import {
  app_class_default,
  clicks_default,
  core_default,
  device_default,
  history_default,
  modal_default,
  navbar_default,
  request_default2 as request_default,
  resize_default,
  router_default,
  service_worker_default,
  statusbar_default,
  store_default,
  subnavbar_default,
  support_default,
  toolbar_default,
  touch_default,
  touch_ripple_default,
  utils_default,
  view_default
} from "./chunk-T4LJHOGB.js";
import {
  require_react
} from "./chunk-YT7D345Q.js";
import {
  __toESM
} from "./chunk-HI5STWHF.js";

// node_modules/framework7/framework7-lite.esm.js
app_class_default.use([device_default, support_default, utils_default, resize_default, request_default, touch_default, clicks_default, router_default, history_default, service_worker_default, store_default, statusbar_default, view_default, navbar_default, toolbar_default, subnavbar_default, touch_ripple_default, modal_default]);
var framework7_lite_esm_default = app_class_default;

// node_modules/framework7-react/shared/utils.js
function noUndefinedProps(obj) {
  const o = {};
  Object.keys(obj).forEach((key) => {
    if (typeof obj[key] !== "undefined")
      o[key] = obj[key];
  });
  return o;
}
function isStringProp(val) {
  return typeof val === "string" && val !== "";
}
function isObject(o) {
  return typeof o === "object" && o !== null && o.constructor && o.constructor === Object;
}
function now() {
  return Date.now();
}
function extend() {
  let deep = true;
  let to;
  let from;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[0] === "boolean") {
    [deep, to] = args;
    args.splice(0, 2);
    from = args;
  } else {
    [to] = args;
    args.splice(0, 1);
    from = args;
  }
  for (let i = 0; i < from.length; i += 1) {
    const nextSource = args[i];
    if (nextSource !== void 0 && nextSource !== null) {
      const keysArray = Object.keys(Object(nextSource));
      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        const nextKey = keysArray[nextIndex];
        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== void 0 && desc.enumerable) {
          if (!deep) {
            to[nextKey] = nextSource[nextKey];
          } else if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            extend(to[nextKey], nextSource[nextKey]);
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};
            extend(to[nextKey], nextSource[nextKey]);
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
function flattenArray() {
  const arr = [];
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  args.forEach((arg) => {
    if (Array.isArray(arg))
      arr.push(...flattenArray(...arg));
    else
      arr.push(arg);
  });
  return arr;
}
function classNames() {
  const classes = [];
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  args.forEach((arg) => {
    if (typeof arg === "object" && arg.constructor === Object) {
      Object.keys(arg).forEach((key) => {
        if (arg[key])
          classes.push(key);
      });
    } else if (arg)
      classes.push(arg);
  });
  const uniqueClasses2 = [];
  classes.forEach((c) => {
    if (uniqueClasses2.indexOf(c) < 0)
      uniqueClasses2.push(c);
  });
  return uniqueClasses2.join(" ");
}
function getSlots(props) {
  if (props === void 0) {
    props = {};
  }
  const slots = {};
  if (!props)
    return slots;
  const children = props.children;
  if (!children || children.length === 0) {
    return slots;
  }
  function addChildToSlot(name2, child) {
    if (!slots[name2])
      slots[name2] = [];
    slots[name2].push(child);
  }
  if (Array.isArray(children)) {
    children.forEach((child) => {
      if (!child)
        return;
      const slotName = child.props && child.props.slot || "default";
      addChildToSlot(slotName, child);
    });
  } else {
    let slotName = "default";
    if (children.props && children.props.slot)
      slotName = children.props.slot;
    addChildToSlot(slotName, children);
  }
  return slots;
}
function emit(props, events) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    args[_key4 - 2] = arguments[_key4];
  }
  if (!events || !events.trim().length || typeof events !== "string")
    return;
  events.trim().split(" ").forEach((event) => {
    let eventName = (event || "").trim();
    if (!eventName)
      return;
    eventName = eventName.charAt(0).toUpperCase() + eventName.slice(1);
    const propName = `on${eventName}`;
    if (props[propName])
      props[propName](...args);
  });
}
function getExtraAttrs(props) {
  if (props === void 0) {
    props = {};
  }
  const extraAttrs = {};
  Object.keys(props).forEach((key) => {
    if (key.indexOf("data-") === 0 || key.indexOf("aria-") === 0 || key === "role") {
      extraAttrs[key] = props[key];
    }
  });
  return extraAttrs;
}
var routerIdCounter = 0;
var routerComponentIdCounter = 0;
function unsetRouterIds() {
  routerIdCounter = 0;
  routerComponentIdCounter = 0;
}
function getRouterId() {
  routerIdCounter += 1;
  return `${now()}_${routerIdCounter}`;
}
function getComponentId() {
  routerComponentIdCounter += 1;
  return `${now()}_${routerComponentIdCounter}`;
}

// node_modules/framework7-react/shared/f7.js
var f7;
var f7events;
var theme = {};
var f7routers = {
  views: [],
  tabs: [],
  modals: null
};
var setTheme = () => {
  if (!f7)
    return;
  theme.ios = f7.theme === "ios";
  theme.md = f7.theme === "md";
  theme.aurora = f7.theme === "aurora";
};
var cleanup = () => {
  unsetRouterIds();
  delete theme.ios;
  delete theme.md;
  delete theme.aurora;
  f7routers.views = [];
  f7routers.tabs = [];
  f7routers.modals = null;
};
var f7initEvents = () => {
  f7events = new framework7_lite_esm_default.Events();
};
var f7init = function(rootEl, params, init) {
  if (params === void 0) {
    params = {};
  }
  if (init === void 0) {
    init = true;
  }
  const f7Params = extend({}, params, {
    el: rootEl,
    init
  });
  if (typeof params.store !== "undefined")
    f7Params.store = params.store;
  if (!f7Params.routes)
    f7Params.routes = [];
  if (f7Params.userAgent && (f7Params.theme === "auto" || !f7Params.theme)) {
    const device = framework7_lite_esm_default.getDevice({
      userAgent: f7Params.userAgent
    }, true);
    theme.ios = !!device.ios;
    theme.aurora = device.desktop && device.electron;
    theme.md = !theme.ios && !theme.aurora;
  }
  if (f7 && typeof window !== "undefined")
    return;
  if (typeof window === "undefined")
    cleanup();
  const instance = new framework7_lite_esm_default(f7Params);
  f7 = instance;
  setTheme();
  if (instance.initialized) {
    f7 = instance;
    f7events.emit("ready", f7);
  } else {
    instance.on("init", () => {
      f7 = instance;
      f7events.emit("ready", f7);
    });
  }
};
var f7ready = (callback) => {
  if (!callback)
    return;
  if (f7 && f7.initialized)
    callback(f7);
  else {
    f7events.once("ready", callback);
  }
};

// node_modules/framework7-react/shared/router-open-in.js
var import_react11 = __toESM(require_react(), 1);

// node_modules/framework7-react/components/popup.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/mixins.js
function colorClasses(props) {
  const {
    color,
    colorTheme,
    textColor,
    bgColor,
    borderColor,
    rippleColor,
    dark
  } = props;
  return {
    dark,
    [`color-${color}`]: color,
    [`color-theme-${colorTheme}`]: colorTheme,
    [`text-color-${textColor}`]: textColor,
    [`bg-color-${bgColor}`]: bgColor,
    [`border-color-${borderColor}`]: borderColor,
    [`ripple-color-${rippleColor}`]: rippleColor
  };
}
function routerAttrs(props) {
  const {
    force,
    reloadCurrent,
    reloadPrevious,
    reloadAll,
    reloadDetail,
    animate,
    ignoreCache,
    routeTabId,
    view,
    transition,
    openIn
  } = props;
  let dataAnimate;
  if ("animate" in props && typeof animate !== "undefined") {
    dataAnimate = animate.toString();
  }
  let dataReloadDetail;
  if ("reloadDetail" in props && typeof reloadDetail !== "undefined") {
    dataReloadDetail = reloadDetail.toString();
  }
  return {
    "data-force": force || void 0,
    "data-reload-current": reloadCurrent || void 0,
    "data-reload-all": reloadAll || void 0,
    "data-reload-previous": reloadPrevious || void 0,
    "data-reload-detail": dataReloadDetail,
    "data-animate": dataAnimate,
    "data-ignore-cache": ignoreCache || void 0,
    "data-route-tab-id": routeTabId || void 0,
    "data-view": isStringProp(view) ? view : void 0,
    "data-transition": isStringProp(transition) ? transition : void 0,
    "data-open-in": isStringProp(openIn) ? openIn : void 0
  };
}
function routerClasses(props) {
  const {
    back,
    linkBack,
    external,
    preventRouter
  } = props;
  return {
    back: back || linkBack,
    external,
    "prevent-router": preventRouter
  };
}
function actionsAttrs(props) {
  const {
    searchbarEnable,
    searchbarDisable,
    searchbarClear,
    searchbarToggle,
    panelOpen,
    panelClose,
    panelToggle,
    popupOpen,
    popupClose,
    actionsOpen,
    actionsClose,
    popoverOpen,
    popoverClose,
    loginScreenOpen,
    loginScreenClose,
    sheetOpen,
    sheetClose,
    sortableEnable,
    sortableDisable,
    sortableToggle,
    cardOpen,
    cardClose
  } = props;
  return {
    "data-searchbar": isStringProp(searchbarEnable) && searchbarEnable || isStringProp(searchbarDisable) && searchbarDisable || isStringProp(searchbarClear) && searchbarClear || isStringProp(searchbarToggle) && searchbarToggle || void 0,
    "data-panel": isStringProp(panelOpen) && panelOpen || isStringProp(panelClose) && panelClose || isStringProp(panelToggle) && panelToggle || void 0,
    "data-popup": isStringProp(popupOpen) && popupOpen || isStringProp(popupClose) && popupClose || void 0,
    "data-actions": isStringProp(actionsOpen) && actionsOpen || isStringProp(actionsClose) && actionsClose || void 0,
    "data-popover": isStringProp(popoverOpen) && popoverOpen || isStringProp(popoverClose) && popoverClose || void 0,
    "data-sheet": isStringProp(sheetOpen) && sheetOpen || isStringProp(sheetClose) && sheetClose || void 0,
    "data-login-screen": isStringProp(loginScreenOpen) && loginScreenOpen || isStringProp(loginScreenClose) && loginScreenClose || void 0,
    "data-sortable": isStringProp(sortableEnable) && sortableEnable || isStringProp(sortableDisable) && sortableDisable || isStringProp(sortableToggle) && sortableToggle || void 0,
    "data-card": isStringProp(cardOpen) && cardOpen || isStringProp(cardClose) && cardClose || void 0
  };
}
function actionsClasses(props) {
  const {
    searchbarEnable,
    searchbarDisable,
    searchbarClear,
    searchbarToggle,
    panelOpen,
    panelClose,
    panelToggle,
    popupOpen,
    popupClose,
    actionsClose,
    actionsOpen,
    popoverOpen,
    popoverClose,
    loginScreenOpen,
    loginScreenClose,
    sheetOpen,
    sheetClose,
    sortableEnable,
    sortableDisable,
    sortableToggle,
    cardOpen,
    cardPreventOpen,
    cardClose,
    menuClose
  } = props;
  return {
    "searchbar-enable": searchbarEnable || searchbarEnable === "",
    "searchbar-disable": searchbarDisable || searchbarDisable === "",
    "searchbar-clear": searchbarClear || searchbarClear === "",
    "searchbar-toggle": searchbarToggle || searchbarToggle === "",
    "panel-close": panelClose || panelClose === "",
    "panel-open": panelOpen || panelOpen === "",
    "panel-toggle": panelToggle || panelToggle === "",
    "popup-close": popupClose || popupClose === "",
    "popup-open": popupOpen || popupOpen === "",
    "actions-close": actionsClose || actionsClose === "",
    "actions-open": actionsOpen || actionsOpen === "",
    "popover-close": popoverClose || popoverClose === "",
    "popover-open": popoverOpen || popoverOpen === "",
    "sheet-close": sheetClose || sheetClose === "",
    "sheet-open": sheetOpen || sheetOpen === "",
    "login-screen-close": loginScreenClose || loginScreenClose === "",
    "login-screen-open": loginScreenOpen || loginScreenOpen === "",
    "sortable-enable": sortableEnable || sortableEnable === "",
    "sortable-disable": sortableDisable || sortableDisable === "",
    "sortable-toggle": sortableToggle || sortableToggle === "",
    "card-close": cardClose || cardClose === "",
    "card-open": cardOpen || cardOpen === "",
    "card-prevent-open": cardPreventOpen || cardPreventOpen === "",
    "menu-close": menuClose || menuClose === ""
  };
}

// node_modules/framework7-react/shared/modal-state-classes.js
var modalStateClasses = function(_temp) {
  let {
    isOpened,
    isClosing
  } = _temp === void 0 ? {} : _temp;
  return {
    "modal-in": isOpened.current && !isClosing.current,
    "modal-out": isClosing.current
  };
};

// node_modules/framework7-react/shared/use-isomorphic-layout-effect.js
var import_react = __toESM(require_react(), 1);
function useIsomorphicLayoutEffect(callback, deps) {
  if (typeof window === "undefined")
    return (0, import_react.useEffect)(callback, deps);
  return (0, import_react.useLayoutEffect)(callback, deps);
}

// node_modules/framework7-react/shared/watch-prop.js
var import_react2 = __toESM(require_react(), 1);
var watchProp = (value, callback) => {
  const valueRef = (0, import_react2.useRef)(value);
  useIsomorphicLayoutEffect(() => {
    if (value !== valueRef.current && callback) {
      callback(value, valueRef.current);
    }
    valueRef.current = value;
  }, [value]);
};

// node_modules/framework7-react/components/popup.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Popup = (0, import_react3.forwardRef)((props, ref) => {
  const f7Popup = (0, import_react3.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    tabletFullscreen,
    push,
    opened,
    closeByBackdropClick,
    backdrop,
    backdropEl,
    animate,
    closeOnEscape,
    swipeToClose = false,
    swipeHandler,
    containerEl
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react3.useRef)(null);
  const isOpened = (0, import_react3.useRef)(opened);
  const isClosing = (0, import_react3.useRef)(false);
  const onSwipeStart = (instance) => {
    emit(props, "popupSwipeStart", instance);
  };
  const onSwipeMove = (instance) => {
    emit(props, "popupSwipeMove", instance);
  };
  const onSwipeEnd = (instance) => {
    emit(props, "popupSwipeEnd", instance);
  };
  const onSwipeClose = (instance) => {
    emit(props, "popupSwipeClose", instance);
  };
  const onOpen = (instance) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "popupOpen", instance);
  };
  const onOpened = (instance) => {
    emit(props, "popupOpened", instance);
  };
  const onClose = (instance) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "popupClose", instance);
  };
  const onClosed = (instance) => {
    isClosing.current = false;
    emit(props, "popupClosed", instance);
  };
  (0, import_react3.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Popup: () => f7Popup.current
  }));
  watchProp(opened, (value) => {
    if (!f7Popup.current)
      return;
    if (value) {
      f7Popup.current.open();
    } else {
      f7Popup.current.close();
    }
  });
  const modalEvents = (method) => {
    if (!f7Popup.current)
      return;
    f7Popup.current[method]("swipeStart", onSwipeStart);
    f7Popup.current[method]("swipeMove", onSwipeMove);
    f7Popup.current[method]("swipeEnd", onSwipeEnd);
    f7Popup.current[method]("swipeClose", onSwipeClose);
    f7Popup.current[method]("open", onOpen);
    f7Popup.current[method]("opened", onOpened);
    f7Popup.current[method]("close", onClose);
    f7Popup.current[method]("closed", onClosed);
  };
  const onMount = () => {
    if (!elRef.current)
      return;
    const popupParams = {
      el: elRef.current
    };
    if ("closeByBackdropClick" in props)
      popupParams.closeByBackdropClick = closeByBackdropClick;
    if ("closeOnEscape" in props)
      popupParams.closeOnEscape = closeOnEscape;
    if ("animate" in props)
      popupParams.animate = animate;
    if ("backdrop" in props)
      popupParams.backdrop = backdrop;
    if ("backdropEl" in props)
      popupParams.backdropEl = backdropEl;
    if ("swipeToClose" in props)
      popupParams.swipeToClose = swipeToClose;
    if ("swipeHandler" in props)
      popupParams.swipeHandler = swipeHandler;
    if ("containerEl" in props)
      popupParams.containerEl = containerEl;
    f7ready(() => {
      f7Popup.current = f7.popup.create(popupParams);
      modalEvents("on");
      if (opened) {
        f7Popup.current.open(false);
      }
    });
  };
  const onDestroy = () => {
    if (f7Popup.current) {
      f7Popup.current.destroy();
    }
    f7Popup.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "popup", {
    "popup-tablet-fullscreen": tabletFullscreen,
    "popup-push": push
  }, modalStateClasses({
    isOpened,
    isClosing
  }), colorClasses(props));
  return import_react3.default.createElement("div", _extends({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Popup.displayName = "f7-popup";
var popup_default = Popup;

// node_modules/framework7-react/components/view.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/use-tab.js
var useTab = (elRef, props) => {
  const onTabShow = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "tabShow", el);
  };
  const onTabHide = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "tabHide", el);
  };
  const attachEvents = () => {
    if (!elRef.current)
      return;
    f7ready(() => {
      f7.on("tabShow", onTabShow);
      f7.on("tabHide", onTabHide);
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("tabShow", onTabShow);
    f7.off("tabHide", onTabHide);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
};

// node_modules/framework7-react/shared/use-async-component.js
var import_react4 = __toESM(require_react(), 1);
var useAsyncComponent = (component, props, key) => {
  const Component = (0, import_react4.lazy)(component);
  return import_react4.default.createElement(import_react4.Suspense, {
    fallback: null,
    key
  }, import_react4.default.createElement(Component, props));
};

// node_modules/framework7-react/shared/get-router-initial-component.js
var getRouterInitialComponent = (router, initialComponent) => {
  let initialComponentData;
  const {
    initialUrl
  } = router.getInitialUrl();
  const initialRoute = router.findMatchingRoute(initialUrl);
  let routeProps = {};
  if (initialRoute && initialRoute.route && initialRoute.route.options) {
    routeProps = initialRoute.route.options.props;
  }
  const isMasterRoute = (route) => {
    if (route.master === true)
      return true;
    if (typeof route.master === "function")
      return route.master(router.app);
    return false;
  };
  if (initialRoute && initialRoute.route && (initialRoute.route.component || initialRoute.route.asyncComponent) && !isMasterRoute(initialRoute.route)) {
    initialComponentData = {
      component: initialRoute.route.component || initialRoute.route.asyncComponent,
      initialComponent,
      id: getComponentId(),
      isAsync: !!initialRoute.route.asyncComponent,
      props: {
        f7route: initialRoute,
        f7router: router,
        ...routeProps,
        ...initialRoute.params
      }
    };
  }
  return {
    initialPage: initialComponentData,
    initialRoute
  };
};

// node_modules/framework7-react/shared/router-context.js
var import_react5 = __toESM(require_react(), 1);
var RouterContext = import_react5.default.createContext({
  route: null,
  router: null
});

// node_modules/framework7-react/components/view.js
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var View = (0, import_react6.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    init = true,
    main,
    tab,
    tabActive,
    url,
    initRouterOnTabShow,
    browserHistoryInitialMatch = true
  } = props;
  const childrenArray = import_react6.default.Children.toArray(children);
  const initialPageComponent = childrenArray.filter((c) => c.props && c.props.initialPage)[0];
  const restChildren = childrenArray.filter((c) => !c.props || !c.props.initialPage);
  const shouldInitRouter = !(initRouterOnTabShow && tab && !tabActive);
  const extraAttrs = getExtraAttrs(props);
  const f7View = (0, import_react6.useRef)(null);
  const elRef = (0, import_react6.useRef)(null);
  const routerData = (0, import_react6.useRef)(null);
  let initialPage;
  let initialRoute;
  const onViewInit = (view) => {
    emit(props, "viewInit", view);
    if (!init) {
      routerData.current.instance = view;
      f7View.current = routerData.current.instance;
    }
  };
  if (f7 && !f7View.current && init) {
    const routerId = getRouterId();
    f7View.current = f7.views.create(elRef.current, {
      routerId,
      init: false,
      ...noUndefinedProps(props),
      browserHistoryInitialMatch,
      on: {
        init: onViewInit
      }
    });
    routerData.current = {
      routerId,
      instance: f7View.current
    };
    f7routers.views.push(routerData.current);
    if (shouldInitRouter && f7View.current && f7View.current.router && (url || main)) {
      const initialData = getRouterInitialComponent(f7View.current.router, initialPageComponent);
      initialPage = initialData.initialPage;
      initialRoute = initialData.initialRoute;
      if (initialRoute && initialRoute.route && initialRoute.route.masterRoute) {
        initialPage = void 0;
        initialRoute = void 0;
      }
    }
  }
  const [pages, setPages] = (0, import_react6.useState)(initialPage ? [initialPage] : []);
  const onResize = (view, width) => {
    emit(props, "viewResize", width);
  };
  const onSwipeBackMove = (data) => {
    const swipeBackData = data;
    emit(props, "swipeBackMove", swipeBackData);
  };
  const onSwipeBackBeforeChange = (data) => {
    const swipeBackData = data;
    emit(props, "swipeBackBeforeChange", swipeBackData);
  };
  const onSwipeBackAfterChange = (data) => {
    const swipeBackData = data;
    emit(props, "swipeBackAfterChange", swipeBackData);
  };
  const onSwipeBackBeforeReset = (data) => {
    const swipeBackData = data;
    emit(props, "swipeBackBeforeReset", swipeBackData);
  };
  const onSwipeBackAfterReset = (data) => {
    const swipeBackData = data;
    emit(props, "swipeBackAfterReset", swipeBackData);
  };
  (0, import_react6.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7View: () => f7View.current
  }));
  const onMount = () => {
    f7ready(() => {
      if (f7View.current) {
        routerData.current.el = elRef.current;
        routerData.current.pages = pages;
        routerData.current.setPages = (newPages) => {
          setPages([...newPages]);
        };
        if (initialPage && initialPage.isAsync && !initialPage.initialComponent) {
          initialPage.component().then(() => {
            setTimeout(() => {
              f7View.current.init(elRef.current);
              if (initialPage) {
                initialPage.el = f7View.current.router.currentPageEl;
                if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
                  initialRoute.route.keepAliveData = {
                    pageEl: initialPage.el
                  };
                }
              }
            }, 100);
          });
        } else {
          f7View.current.init(elRef.current);
          if (initialPage) {
            initialPage.el = f7View.current.router.currentPageEl;
            if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
              initialRoute.route.keepAliveData = {
                pageEl: initialPage.el
              };
            }
          }
        }
      } else {
        const routerId = getRouterId();
        routerData.current = {
          el: elRef.current,
          routerId,
          pages,
          instance: f7View.current,
          setPages(newPages) {
            setPages([...newPages]);
          }
        };
        f7routers.views.push(routerData.current);
        routerData.current.instance = f7.views.create(elRef.current, {
          routerId,
          ...noUndefinedProps(props),
          browserHistoryInitialMatch,
          on: {
            init: onViewInit
          }
        });
        f7View.current = routerData.current.instance;
      }
      if (!init)
        return;
      f7View.current.on("resize", onResize);
      f7View.current.on("swipebackMove", onSwipeBackMove);
      f7View.current.on("swipebackBeforeChange", onSwipeBackBeforeChange);
      f7View.current.on("swipebackAfterChange", onSwipeBackAfterChange);
      f7View.current.on("swipebackBeforeReset", onSwipeBackBeforeReset);
      f7View.current.on("swipebackAfterReset", onSwipeBackAfterReset);
    });
  };
  const onDestroy = () => {
    if (f7View.current) {
      f7View.current.off("resize", onResize);
      f7View.current.off("swipebackMove", onSwipeBackMove);
      f7View.current.off("swipebackBeforeChange", onSwipeBackBeforeChange);
      f7View.current.off("swipebackAfterChange", onSwipeBackAfterChange);
      f7View.current.off("swipebackBeforeReset", onSwipeBackBeforeReset);
      f7View.current.off("swipebackAfterReset", onSwipeBackAfterReset);
      if (f7View.current.destroy)
        f7View.current.destroy();
      f7View.current = null;
    }
    f7routers.views.splice(f7routers.views.indexOf(routerData.current), 1);
    routerData.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (routerData.current && f7) {
      f7events.emit("viewRouterDidUpdate", routerData.current);
    }
  });
  useTab(elRef, props);
  const classes = classNames(className, "view", {
    "view-main": main,
    "tab-active": tabActive,
    tab
  }, colorClasses(props));
  return import_react6.default.createElement("div", _extends2({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), restChildren, pages.map((_ref) => {
    let {
      component: PageComponent,
      id: pageId,
      props: pageProps,
      isAsync,
      initialComponent
    } = _ref;
    return import_react6.default.createElement(RouterContext.Provider, {
      key: pageId,
      value: {
        router: pageProps.f7router,
        route: pageProps.f7route
      }
    }, initialComponent ? import_react6.default.cloneElement(initialComponent, {
      ...pageProps
    }) : isAsync ? useAsyncComponent(PageComponent, pageProps) : import_react6.default.createElement(PageComponent, pageProps));
  }));
});
View.displayName = "f7-view";
var view_default2 = View;

// node_modules/framework7-react/components/login-screen.js
var import_react7 = __toESM(require_react(), 1);
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var LoginScreen = (0, import_react7.forwardRef)((props, ref) => {
  const f7LoginScreen = (0, import_react7.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    opened,
    animate,
    containerEl
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const isOpened = (0, import_react7.useRef)(opened);
  const isClosing = (0, import_react7.useRef)(false);
  const elRef = (0, import_react7.useRef)(null);
  const onOpen = (instance) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "loginScreenOpen", instance);
  };
  const onOpened = (instance) => {
    emit(props, "loginScreenOpened", instance);
  };
  const onClose = (instance) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "loginScreenClose", instance);
  };
  const onClosed = (instance) => {
    isClosing.current = false;
    emit(props, "loginScreenClosed", instance);
  };
  (0, import_react7.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7LoginScreen: () => f7LoginScreen.current
  }));
  watchProp(opened, (value) => {
    if (!f7LoginScreen.current)
      return;
    if (value) {
      f7LoginScreen.current.open();
    } else {
      f7LoginScreen.current.close();
    }
  });
  const modalEvents = (method) => {
    if (!f7LoginScreen.current)
      return;
    f7LoginScreen.current[method]("open", onOpen);
    f7LoginScreen.current[method]("opened", onOpened);
    f7LoginScreen.current[method]("close", onClose);
    f7LoginScreen.current[method]("closed", onClosed);
  };
  const onMount = () => {
    if (!elRef.current)
      return;
    f7ready(() => {
      const loginScreenParams = {
        el: elRef.current
      };
      if ("animate" in props)
        loginScreenParams.animate = animate;
      if ("containerEl" in props)
        loginScreenParams.containerEl = containerEl;
      f7LoginScreen.current = f7.loginScreen.create(loginScreenParams);
      modalEvents("on");
      if (opened) {
        f7LoginScreen.current.open(false);
      }
    });
  };
  const onDestroy = () => {
    if (f7LoginScreen.current) {
      f7LoginScreen.current.destroy();
    }
    f7LoginScreen.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "login-screen", modalStateClasses({
    isOpened,
    isClosing
  }), colorClasses(props));
  return import_react7.default.createElement("div", _extends3({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
LoginScreen.displayName = "f7-login-screen";
var login_screen_default = LoginScreen;

// node_modules/framework7-react/components/sheet.js
var import_react8 = __toESM(require_react(), 1);
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
var Sheet = (0, import_react8.forwardRef)((props, ref) => {
  const f7Sheet = (0, import_react8.useRef)(null);
  const {
    className,
    id,
    style,
    top,
    bottom,
    position,
    push,
    opened,
    animate,
    backdrop,
    backdropEl,
    closeByBackdropClick,
    closeByOutsideClick,
    closeOnEscape,
    swipeToClose,
    swipeToStep,
    swipeHandler,
    containerEl
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react8.useRef)(null);
  const isOpened = (0, import_react8.useRef)(opened);
  const isClosing = (0, import_react8.useRef)(false);
  const onStepProgress = (instance, progress) => {
    emit(props, "sheetStepProgress", instance, progress);
  };
  const onStepOpen = (instance) => {
    emit(props, "sheetStepOpen", instance);
  };
  const onStepClose = (instance) => {
    emit(props, "sheetStepClose", instance);
  };
  const onOpen = (instance) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "sheetOpen", instance);
  };
  const onOpened = (instance) => {
    emit(props, "sheetOpened", instance);
  };
  const onClose = (instance) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "sheetClose", instance);
  };
  const onClosed = (instance) => {
    isClosing.current = false;
    emit(props, "sheetClosed", instance);
  };
  (0, import_react8.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Sheet: () => f7Sheet.current
  }));
  const modalEvents = (method) => {
    if (!f7Sheet.current)
      return;
    f7Sheet.current[method]("open", onOpen);
    f7Sheet.current[method]("opened", onOpened);
    f7Sheet.current[method]("close", onClose);
    f7Sheet.current[method]("closed", onClosed);
    f7Sheet.current[method]("stepOpen", onStepOpen);
    f7Sheet.current[method]("stepClose", onStepClose);
    f7Sheet.current[method]("stepProgress", onStepProgress);
  };
  const onMount = () => {
    if (!elRef.current)
      return;
    const sheetParams = {
      el: elRef.current
    };
    if ("animate" in props && typeof animate !== "undefined")
      sheetParams.animate = animate;
    if ("backdrop" in props && typeof backdrop !== "undefined")
      sheetParams.backdrop = backdrop;
    if ("backdropEl" in props)
      sheetParams.backdropEl = backdropEl;
    if ("closeByBackdropClick" in props)
      sheetParams.closeByBackdropClick = closeByBackdropClick;
    if ("closeByOutsideClick" in props)
      sheetParams.closeByOutsideClick = closeByOutsideClick;
    if ("closeOnEscape" in props)
      sheetParams.closeOnEscape = closeOnEscape;
    if ("swipeToClose" in props)
      sheetParams.swipeToClose = swipeToClose;
    if ("swipeToStep" in props)
      sheetParams.swipeToStep = swipeToStep;
    if ("swipeHandler" in props)
      sheetParams.swipeHandler = swipeHandler;
    if ("containerEl" in props)
      sheetParams.containerEl = containerEl;
    f7ready(() => {
      f7Sheet.current = f7.sheet.create(sheetParams);
      modalEvents("on");
      if (opened) {
        f7Sheet.current.open(false);
      }
    });
  };
  const onDestroy = () => {
    if (f7Sheet.current) {
      f7Sheet.current.destroy();
    }
    f7Sheet.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  watchProp(opened, (value) => {
    if (!f7Sheet.current)
      return;
    if (value) {
      f7Sheet.current.open();
    } else {
      f7Sheet.current.close();
    }
  });
  const slots = getSlots(props);
  const fixedList = [];
  const staticList = [];
  const fixedTags = "navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel".split(" ").map((tagName) => `f7-${tagName}`);
  const slotsDefault = slots.default;
  if (slotsDefault && slotsDefault.length) {
    slotsDefault.forEach((child) => {
      if (typeof child === "undefined")
        return;
      let isFixedTag = false;
      const tag = child.type && (child.type.displayName || child.type.name);
      if (!tag) {
        staticList.push(child);
        return;
      }
      if (fixedTags.indexOf(tag) >= 0) {
        isFixedTag = true;
      }
      if (isFixedTag)
        fixedList.push(child);
      else
        staticList.push(child);
    });
  }
  const innerEl = import_react8.default.createElement("div", {
    className: "sheet-modal-inner"
  }, staticList, slots.static);
  let positionComputed = "bottom";
  if (position)
    positionComputed = position;
  else if (top)
    positionComputed = "top";
  else if (bottom)
    positionComputed = "bottom";
  const classes = classNames(className, "sheet-modal", `sheet-modal-${positionComputed}`, {
    "sheet-modal-push": push
  }, modalStateClasses({
    isOpened,
    isClosing
  }), colorClasses(props));
  return import_react8.default.createElement("div", _extends4({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), fixedList, slots.fixed, innerEl);
});
Sheet.displayName = "f7-sheet";
var sheet_default = Sheet;

// node_modules/framework7-react/components/popover.js
var import_react9 = __toESM(require_react(), 1);
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var Popover = (0, import_react9.forwardRef)((props, ref) => {
  const f7Popover = (0, import_react9.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    opened,
    animate,
    targetEl,
    backdrop,
    backdropEl,
    closeByBackdropClick,
    closeByOutsideClick,
    closeOnEscape,
    containerEl,
    verticalPosition
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react9.useRef)(null);
  const isOpened = (0, import_react9.useRef)(opened);
  const isClosing = (0, import_react9.useRef)(false);
  const onOpen = (instance) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "popoverOpen", instance);
  };
  const onOpened = (instance) => {
    emit(props, "popoverOpened", instance);
  };
  const onClose = (instance) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "popoverClose", instance);
  };
  const onClosed = (instance) => {
    isClosing.current = false;
    emit(props, "popoverClosed", instance);
  };
  (0, import_react9.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Popover: () => f7Popover.current
  }));
  watchProp(opened, (value) => {
    if (!f7Popover.current)
      return;
    if (value) {
      f7Popover.current.open();
    } else {
      f7Popover.current.close();
    }
  });
  const modalEvents = (method) => {
    if (!f7Popover.current)
      return;
    f7Popover.current[method]("open", onOpen);
    f7Popover.current[method]("opened", onOpened);
    f7Popover.current[method]("close", onClose);
    f7Popover.current[method]("closed", onClosed);
  };
  const onMount = () => {
    if (!elRef.current)
      return;
    const popoverParams = {
      el: elRef.current
    };
    if (targetEl)
      popoverParams.targetEl = targetEl;
    if ("closeByBackdropClick" in props)
      popoverParams.closeByBackdropClick = closeByBackdropClick;
    if ("closeByOutsideClick" in props)
      popoverParams.closeByOutsideClick = closeByOutsideClick;
    if ("closeOnEscape" in props)
      popoverParams.closeOnEscape = closeOnEscape;
    if ("backdrop" in props)
      popoverParams.backdrop = backdrop;
    if ("backdropEl" in props)
      popoverParams.backdropEl = backdropEl;
    if ("animate" in props)
      popoverParams.animate = animate;
    if ("containerEl" in props)
      popoverParams.containerEl = containerEl;
    if ("verticalPosition" in props)
      popoverParams.verticalPosition = verticalPosition;
    f7ready(() => {
      f7Popover.current = f7.popover.create(popoverParams);
      modalEvents("on");
      if (opened && targetEl) {
        f7Popover.current.open(targetEl, false);
      }
    });
  };
  const onDestroy = () => {
    if (f7Popover.current) {
      f7Popover.current.destroy();
    }
    f7Popover.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "popover", modalStateClasses({
    isOpened,
    isClosing
  }), colorClasses(props));
  return import_react9.default.createElement("div", _extends5({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react9.default.createElement("div", {
    className: "popover-angle"
  }), import_react9.default.createElement("div", {
    className: "popover-inner"
  }, children));
});
Popover.displayName = "f7-popover";
var popover_default = Popover;

// node_modules/framework7-react/components/panel.js
var import_react10 = __toESM(require_react(), 1);
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var Panel = (0, import_react10.forwardRef)((props, ref) => {
  const f7Panel = (0, import_react10.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    side,
    effect,
    cover,
    reveal,
    push,
    left,
    opened,
    resizable,
    backdrop = true,
    backdropEl,
    containerEl,
    visibleBreakpoint,
    collapsedBreakpoint,
    swipe,
    swipeNoFollow,
    swipeOnlyClose,
    swipeActiveArea = 0,
    swipeThreshold = 0
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react10.useRef)(null);
  const isOpened = (0, import_react10.useRef)(false);
  const isClosing = (0, import_react10.useRef)(false);
  const isCollapsed = (0, import_react10.useRef)(false);
  const isBreakpoint = (0, import_react10.useRef)(false);
  const onOpen = (event) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "panelOpen", event);
  };
  const onOpened = (event) => {
    emit(props, "panelOpened", event);
  };
  const onClose = (event) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "panelClose", event);
  };
  const onClosed = (event) => {
    isClosing.current = false;
    emit(props, "panelClosed", event);
  };
  const onBackdropClick = (event) => {
    emit(props, "click panelBackdropClick", event);
  };
  const onSwipe = (event) => {
    emit(props, "panelSwipe", event);
  };
  const onSwipeOpen = (event) => {
    emit(props, "panelSwipeOpen", event);
  };
  const onBreakpoint = (event) => {
    isBreakpoint.current = true;
    isCollapsed.current = false;
    emit(props, "panelBreakpoint", event);
  };
  const onCollapsedBreakpoint = (event) => {
    isBreakpoint.current = false;
    isCollapsed.current = true;
    emit(props, "panelCollapsedBreakpoint", event);
  };
  const onResize = function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    emit(props, "panelResize", ...args);
  };
  (0, import_react10.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Panel: () => f7Panel.current
  }));
  watchProp(resizable, (newValue) => {
    if (!f7Panel.current)
      return;
    if (newValue)
      f7Panel.current.enableResizable();
    else
      f7Panel.current.disableResizable();
  });
  watchProp(opened, (newValue) => {
    if (!f7Panel.current)
      return;
    if (newValue) {
      f7Panel.current.open();
    } else {
      f7Panel.current.close();
    }
  });
  const modalEvents = (method) => {
    if (!f7Panel.current)
      return;
    f7Panel.current[method]("open", onOpen);
    f7Panel.current[method]("opened", onOpened);
    f7Panel.current[method]("close", onClose);
    f7Panel.current[method]("closed", onClosed);
    f7Panel.current[method]("backdropClick", onBackdropClick);
    f7Panel.current[method]("swipe", onSwipe);
    f7Panel.current[method]("swipeOpen", onSwipeOpen);
    f7Panel.current[method]("collapsedBreakpoint", onCollapsedBreakpoint);
    f7Panel.current[method]("breakpoint", onBreakpoint);
    f7Panel.current[method]("resize", onResize);
  };
  const onMount = () => {
    f7ready(() => {
      const $ = f7.$;
      if (!$)
        return;
      if ($(".panel-backdrop").length === 0) {
        $('<div class="panel-backdrop"></div>').insertBefore(elRef.current);
      }
      const params = noUndefinedProps({
        el: elRef.current,
        resizable,
        backdrop,
        backdropEl,
        containerEl,
        visibleBreakpoint,
        collapsedBreakpoint,
        swipe,
        swipeNoFollow,
        swipeOnlyClose,
        swipeActiveArea,
        swipeThreshold
      });
      f7Panel.current = f7.panel.create(params);
      modalEvents("on");
      if (opened) {
        f7Panel.current.open(false);
      }
    });
  };
  const onDestroy = () => {
    if (f7Panel.current && f7Panel.current.destroy) {
      f7Panel.current.destroy();
    }
    f7Panel.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const sideComputed = side || (left ? "left" : "right");
  const effectComputed = effect || (reveal ? "reveal" : push ? "push" : "cover");
  const classes = classNames(className, "panel", {
    "panel-in": isOpened.current && !isClosing.current && !isBreakpoint.current,
    "panel-in-breakpoint": isBreakpoint.current,
    "panel-in-collapsed": isCollapsed.current,
    "panel-resizable": resizable,
    [`panel-${sideComputed}`]: sideComputed,
    [`panel-${effectComputed}`]: effectComputed
  }, colorClasses(props));
  return import_react10.default.createElement("div", _extends6({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, resizable && import_react10.default.createElement("div", {
    className: "panel-resize-handler"
  }));
});
Panel.displayName = "f7-panel";
var panel_default = Panel;

// node_modules/framework7-react/shared/router-open-in.js
var routerOpenIn = (router, url, options) => {
  const navigateOptions = {
    url,
    route: {
      path: url,
      options: {
        ...options,
        openIn: void 0
      }
    }
  };
  const params = {
    ...options
  };
  if (options.openIn === "popup") {
    params.component = function DynamicPopup() {
      return import_react11.default.createElement(popup_default, {
        className: "popup-router-open-in",
        "data-url": url
      }, import_react11.default.createElement(view_default2, {
        linksView: router.view.selector,
        url,
        ignoreOpenIn: true
      }));
    };
    navigateOptions.route.popup = params;
  }
  if (options.openIn === "loginScreen") {
    params.component = function DynamicPopover() {
      return import_react11.default.createElement(login_screen_default, {
        className: "login-screen-router-open-in",
        "data-url": url
      }, import_react11.default.createElement(view_default2, {
        linksView: router.view.selector,
        url,
        ignoreOpenIn: true
      }));
    };
    navigateOptions.route.loginScreen = params;
  }
  if (options.openIn === "sheet") {
    params.component = function DynamicSheet() {
      return import_react11.default.createElement(sheet_default, {
        className: "sheet-modal-router-open-in",
        "data-url": url
      }, import_react11.default.createElement(view_default2, {
        linksView: router.view.selector,
        url,
        ignoreOpenIn: true
      }));
    };
    navigateOptions.route.sheet = params;
  }
  if (options.openIn === "popover") {
    params.targetEl = options.clickedEl || options.targetEl;
    params.component = function DynamicPopover() {
      return import_react11.default.createElement(popover_default, {
        className: "popover-router-open-in",
        targetEl: options.clickedEl || options.targetEl,
        "data-url": url
      }, import_react11.default.createElement(view_default2, {
        linksView: router.view.selector,
        url,
        ignoreOpenIn: true
      }));
    };
    navigateOptions.route.popover = params;
  }
  if (options.openIn.indexOf("panel") >= 0) {
    const parts = options.openIn.split(":");
    const side = parts[1] || "left";
    const effect = parts[2] || "cover";
    params.component = function DynamicPanel() {
      return import_react11.default.createElement(panel_default, {
        side,
        effect,
        className: "panel-router-open-in",
        "data-url": url
      }, import_react11.default.createElement(view_default2, {
        linksView: router.view.selector,
        url,
        ignoreOpenIn: true
      }));
    };
    navigateOptions.route.panel = params;
  }
  return router.navigate(navigateOptions);
};

// node_modules/framework7-react/shared/components-router.js
var getChildrenArray = (el) => {
  const arr = [];
  for (let i = 0; i < el.children.length; i += 1) {
    arr.push(el.children[i]);
  }
  return arr;
};
var hasSameChildren = (childrenBefore, childrenAfter) => {
  if (childrenBefore.length !== childrenAfter.length)
    return false;
  const set = /* @__PURE__ */ new Set([...childrenBefore, ...childrenAfter]);
  if (set.size === childrenBefore.length)
    return true;
  return false;
};
var components_router_default = {
  proto: {
    openIn(router, navigateUrl, options) {
      return routerOpenIn(router, navigateUrl, options);
    },
    pageComponentLoader(_ref) {
      let {
        routerEl,
        component,
        options,
        resolve,
        reject
      } = _ref;
      const router = this;
      const routerId = router.id;
      const el = routerEl;
      let viewRouter;
      f7routers.views.forEach((data) => {
        if (data.el && data.el === routerEl || data.routerId && data.routerId === routerId) {
          viewRouter = data;
        }
      });
      if (!viewRouter) {
        reject();
        return;
      }
      const pageData = {
        component,
        id: getComponentId(),
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.params, options.props || {})
      };
      let resolved;
      const childrenBefore = getChildrenArray(el);
      function onDidUpdate(componentRouterData) {
        if (componentRouterData !== viewRouter || resolved)
          return;
        const childrenAfter = getChildrenArray(el);
        if (hasSameChildren(childrenBefore, childrenAfter))
          return;
        f7events.off("viewRouterDidUpdate", onDidUpdate);
        const pageEl = el.children[el.children.length - 1];
        pageData.el = pageEl;
        resolve(pageEl);
        resolved = true;
      }
      f7events.on("viewRouterDidUpdate", onDidUpdate);
      viewRouter.pages.push(pageData);
      viewRouter.setPages(viewRouter.pages);
    },
    removePage($pageEl) {
      if (!$pageEl)
        return;
      const router = this;
      let f7Page;
      if ("length" in $pageEl && $pageEl[0])
        f7Page = $pageEl[0].f7Page;
      else
        f7Page = $pageEl.f7Page;
      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {
        router.app.$($pageEl).remove();
        return;
      }
      let viewRouter;
      f7routers.views.forEach((data) => {
        if (data.el && data.el === router.el) {
          viewRouter = data;
        }
      });
      let pageEl;
      if ("length" in $pageEl) {
        if ($pageEl.length === 0)
          return;
        pageEl = $pageEl[0];
      } else {
        pageEl = $pageEl;
      }
      if (!pageEl)
        return;
      let pageComponentFound;
      viewRouter.pages.forEach((page, index) => {
        if (page.el === pageEl) {
          pageComponentFound = true;
          viewRouter.pages.splice(index, 1);
          viewRouter.setPages(viewRouter.pages);
        }
      });
      if (!pageComponentFound) {
        pageEl.parentNode.removeChild(pageEl);
      }
    },
    tabComponentLoader(_temp) {
      let {
        tabEl,
        component,
        options,
        resolve,
        reject
      } = _temp === void 0 ? {} : _temp;
      const router = this;
      if (!tabEl)
        reject();
      let tabRouter;
      f7routers.tabs.forEach((tabData) => {
        if (tabData.el && tabData.el === tabEl) {
          tabRouter = tabData;
        }
      });
      if (!tabRouter) {
        reject();
        return;
      }
      const id = getComponentId();
      const tabContent = {
        id,
        component,
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.route && options.route.route.tab && options.route.route.tab.options && options.route.route.tab.options.props || {}, options.route.params, options.props || {})
      };
      let resolved;
      function onDidUpdate(componentRouterData) {
        if (componentRouterData !== tabRouter || resolved)
          return;
        f7events.off("tabRouterDidUpdate", onDidUpdate);
        const tabContentEl = tabEl.children[0];
        resolve(tabContentEl);
        resolved = true;
      }
      f7events.on("tabRouterDidUpdate", onDidUpdate);
      tabRouter.setTabContent(tabContent);
    },
    removeTabContent(tabEl) {
      if (!tabEl)
        return;
      let tabRouter;
      f7routers.tabs.forEach((tabData) => {
        if (tabData.el && tabData.el === tabEl) {
          tabRouter = tabData;
        }
      });
      if (!tabRouter) {
        tabEl.innerHTML = "";
        return;
      }
      tabRouter.setTabContent(null);
    },
    modalComponentLoader(_temp2) {
      let {
        component,
        options,
        resolve,
        reject
      } = _temp2 === void 0 ? {} : _temp2;
      const router = this;
      const modalsRouter = f7routers.modals;
      if (!modalsRouter) {
        reject();
        return;
      }
      const modalData = {
        component,
        id: getComponentId(),
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.params, options.props || {})
      };
      let resolved;
      function onDidUpdate() {
        if (resolved)
          return;
        f7events.off("modalsRouterDidUpdate", onDidUpdate);
        const modalEl = modalsRouter.el.children[modalsRouter.el.children.length - 1];
        modalData.el = modalEl;
        resolve(modalEl);
        resolved = true;
      }
      f7events.on("modalsRouterDidUpdate", onDidUpdate);
      modalsRouter.modals.push(modalData);
      modalsRouter.setModals(modalsRouter.modals);
    },
    removeModal(modalEl) {
      const modalsRouter = f7routers.modals;
      if (!modalsRouter)
        return;
      let modalDataToRemove;
      modalsRouter.modals.forEach((modalData) => {
        if (modalData.el === modalEl)
          modalDataToRemove = modalData;
      });
      modalsRouter.modals.splice(modalsRouter.modals.indexOf(modalDataToRemove), 1);
      modalsRouter.setModals(modalsRouter.modals);
    }
  }
};

// node_modules/framework7-react/shared/plugin.js
var Framework7React = {
  name: "reactPlugin",
  installed: false,
  install(params) {
    if (params === void 0) {
      params = {};
    }
    if (Framework7React.installed)
      return;
    Framework7React.installed = true;
    f7initEvents();
    const {
      theme: paramsTheme,
      userAgent
    } = params;
    if (paramsTheme === "md")
      theme.md = true;
    if (paramsTheme === "ios")
      theme.ios = true;
    if (paramsTheme === "aurora")
      theme.aurora = true;
    const needThemeCalc = typeof window === "undefined" ? !!userAgent : true;
    if (needThemeCalc && (!paramsTheme || paramsTheme === "auto")) {
      const device = framework7_lite_esm_default.getDevice({
        userAgent
      }, true);
      theme.ios = !!device.ios;
      theme.aurora = device.desktop && device.electron;
      theme.md = !theme.ios && !theme.aurora;
    }
    f7ready(() => {
      setTheme();
    });
    framework7_lite_esm_default.Router.use(components_router_default);
  }
};
var plugin_default = Framework7React;

// node_modules/framework7-react/shared/use-store.js
var import_react12 = __toESM(require_react(), 1);
var useStore = function() {
  const assignedGetters = (0, import_react12.useRef)({});
  let store = arguments.length <= 0 ? void 0 : arguments[0];
  let getter = arguments.length <= 1 ? void 0 : arguments[1];
  if (arguments.length === 1) {
    store = f7.store;
    getter = arguments.length <= 0 ? void 0 : arguments[0];
  }
  const obj = store._gettersPlain[getter];
  const [value, setValue] = (0, import_react12.useState)(obj.value);
  function onUpdated(newValue) {
    setValue(newValue);
  }
  if (!assignedGetters.current[getter]) {
    obj.onUpdated(onUpdated);
    assignedGetters.current[getter] = true;
  }
  (0, import_react12.useEffect)(() => {
    return () => {
      store.__removeCallback(onUpdated);
    };
  }, []);
  return value;
};

// node_modules/framework7-react/components/accordion-content.js
var import_react13 = __toESM(require_react(), 1);
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
var AccordionContent = (0, import_react13.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const elRef = (0, import_react13.useRef)(null);
  (0, import_react13.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const extraAttrs = getExtraAttrs(props);
  const classes = classNames(className, "accordion-item-content", colorClasses(props));
  return import_react13.default.createElement("div", _extends7({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
AccordionContent.displayName = "f7-accordion-content";
var accordion_content_default = AccordionContent;

// node_modules/framework7-react/components/accordion-item.js
var import_react14 = __toESM(require_react(), 1);
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
var AccordionItem = (0, import_react14.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    opened
  } = props;
  const elRef = (0, import_react14.useRef)(null);
  (0, import_react14.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onBeforeOpen = (el, prevent) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionBeforeOpen", prevent);
  };
  const onOpen = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionOpen");
  };
  const onOpened = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionOpened");
  };
  const onBeforeClose = (el, prevent) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionBeforeClose", prevent);
  };
  const onClose = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionClose");
  };
  const onClosed = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionClosed");
  };
  const attachEvents = () => {
    f7ready(() => {
      f7.on("accordionBeforeOpen", onBeforeOpen);
      f7.on("accordionOpen", onOpen);
      f7.on("accordionOpened", onOpened);
      f7.on("accordionBeforeClose", onBeforeClose);
      f7.on("accordionClose", onClose);
      f7.on("accordionClosed", onClosed);
    });
  };
  const detachEvents = () => {
    f7.off("accordionBeforeOpen", onBeforeOpen);
    f7.off("accordionOpen", onOpen);
    f7.off("accordionOpened", onOpened);
    f7.off("accordionBeforeClose", onBeforeClose);
    f7.off("accordionClose", onClose);
    f7.off("accordionClosed", onClosed);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const extraAttrs = getExtraAttrs(props);
  const classes = classNames(className, "accordion-item", {
    "accordion-item-opened": opened
  }, colorClasses(props));
  return import_react14.default.createElement("div", _extends8({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
AccordionItem.displayName = "f7-accordion-item";
var accordion_item_default = AccordionItem;

// node_modules/framework7-react/components/accordion-toggle.js
var import_react15 = __toESM(require_react(), 1);
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var AccordionToggle = (0, import_react15.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const elRef = (0, import_react15.useRef)(null);
  (0, import_react15.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const extraAttrs = getExtraAttrs(props);
  const classes = classNames(className, "accordion-item-toggle", colorClasses(props));
  return import_react15.default.createElement("div", _extends9({
    id,
    style,
    className: classes
  }, extraAttrs, {
    ref: elRef
  }), children);
});
AccordionToggle.displayName = "f7-accordion-toggle";
var accordion_toggle_default = AccordionToggle;

// node_modules/framework7-react/components/accordion.js
var import_react16 = __toESM(require_react(), 1);
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
var Accordion = (0, import_react16.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    accordionOpposite,
    children
  } = props;
  const elRef = (0, import_react16.useRef)(null);
  (0, import_react16.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const extraAttrs = getExtraAttrs(props);
  const classes = classNames(className, "accordion-list", accordionOpposite && "accordion-opposite", colorClasses(props));
  return import_react16.default.createElement("div", _extends10({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Accordion.displayName = "f7-accordion";
var accordion_default = Accordion;

// node_modules/framework7-react/components/actions-button.js
var import_react17 = __toESM(require_react(), 1);
function _extends11() {
  _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
var ComponentName = (0, import_react17.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    bold,
    close = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react17.useRef)(null);
  (0, import_react17.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, {
    "actions-button": true,
    "actions-button-bold": bold
  }, colorClasses(props));
  let mediaEl;
  const slots = getSlots(props);
  if (slots.media && slots.media.length) {
    mediaEl = import_react17.default.createElement("div", {
      className: "actions-button-media"
    }, slots.media);
  }
  const onClick = (e) => {
    if (elRef.current && close && f7) {
      f7.actions.close(f7.$(elRef.current).parents(".actions-modal"));
    }
    emit(props, "click", e);
  };
  return import_react17.default.createElement("div", _extends11({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), mediaEl, import_react17.default.createElement("div", {
    className: "actions-button-text"
  }, slots.default));
});
ComponentName.displayName = "f7-actions-button";
var actions_button_default = ComponentName;

// node_modules/framework7-react/components/actions-group.js
var import_react18 = __toESM(require_react(), 1);
function _extends12() {
  _extends12 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
var ActionsGroup = (0, import_react18.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react18.useRef)(null);
  (0, import_react18.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "actions-group", colorClasses(props));
  return import_react18.default.createElement("div", _extends12({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
ActionsGroup.displayName = "f7-actions-group";
var actions_group_default = ActionsGroup;

// node_modules/framework7-react/components/actions-label.js
var import_react19 = __toESM(require_react(), 1);
function _extends13() {
  _extends13 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
var ActionsLabel = (0, import_react19.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    bold
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react19.useRef)(null);
  (0, import_react19.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "actions-label", {
    "actions-button-bold": bold
  }, colorClasses(props));
  const onClick = (e) => {
    emit(props, "click", e);
  };
  return import_react19.default.createElement("div", _extends13({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), children);
});
ActionsLabel.displayName = "f7-actions-label";
var actions_label_default = ActionsLabel;

// node_modules/framework7-react/components/actions.js
var import_react20 = __toESM(require_react(), 1);
function _extends14() {
  _extends14 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
var Actions = (0, import_react20.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    grid,
    opened = false,
    animate
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react20.useRef)(null);
  const isOpened = (0, import_react20.useRef)(opened);
  const isClosing = (0, import_react20.useRef)(false);
  const f7Actions = (0, import_react20.useRef)(null);
  const onOpen = (instance) => {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, "actionsOpen", instance);
  };
  const onOpened = (instance) => {
    emit(props, "actionsOpened", instance);
  };
  const onClose = (instance) => {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, "actionsClose", instance);
  };
  const onClosed = (instance) => {
    isClosing.current = false;
    emit(props, "actionsClosed", instance);
  };
  (0, import_react20.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Actions: () => f7Actions.current
  }));
  watchProp(opened, (value) => {
    if (!f7Actions.current)
      return;
    if (value) {
      f7Actions.current.open();
    } else {
      f7Actions.current.close();
    }
  });
  const modalEvents = (method) => {
    if (!f7Actions.current)
      return;
    f7Actions.current[method]("open", onOpen);
    f7Actions.current[method]("opened", onOpened);
    f7Actions.current[method]("close", onClose);
    f7Actions.current[method]("closed", onClosed);
  };
  const onMount = () => {
    if (!elRef.current)
      return;
    const {
      target,
      convertToPopover,
      forceToPopover,
      closeByBackdropClick,
      closeByOutsideClick,
      closeOnEscape,
      backdrop,
      backdropEl,
      containerEl
    } = props;
    const params = {
      el: elRef.current,
      grid
    };
    if (target)
      params.targetEl = target;
    if ("convertToPopover" in props)
      params.convertToPopover = convertToPopover;
    if ("forceToPopover" in props)
      params.forceToPopover = forceToPopover;
    if ("backdrop" in props)
      params.backdrop = backdrop;
    if ("backdropEl" in props)
      params.backdropEl = backdropEl;
    if ("closeByBackdropClick" in props)
      params.closeByBackdropClick = closeByBackdropClick;
    if ("closeByOutsideClick" in props)
      params.closeByOutsideClick = closeByOutsideClick;
    if ("closeOnEscape" in props)
      params.closeOnEscape = closeOnEscape;
    if ("animate" in props)
      params.animate = animate;
    if ("containerEl" in props)
      params.containerEl = containerEl;
    f7ready(() => {
      f7Actions.current = f7.actions.create(params);
      modalEvents("on");
      if (opened) {
        f7Actions.current.open(false);
      }
    });
  };
  const onDestroy = () => {
    if (f7Actions.current)
      f7Actions.current.destroy();
    f7Actions.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    modalEvents("on");
    return () => {
      modalEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "actions-modal", {
    "actions-grid": grid
  }, modalStateClasses({
    isOpened,
    isClosing
  }), colorClasses(props));
  return import_react20.default.createElement("div", _extends14({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Actions.displayName = "f7-actions";
var actions_default = Actions;

// node_modules/framework7-react/components/app.js
var import_react22 = __toESM(require_react(), 1);

// node_modules/framework7-react/components/routable-modals.js
var import_react21 = __toESM(require_react(), 1);
function _extends15() {
  _extends15 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
var RoutableModals = (0, import_react21.forwardRef)((props, ref) => {
  const [modals, setModals] = (0, import_react21.useState)([]);
  const elRef = (0, import_react21.useRef)(null);
  const routerData = (0, import_react21.useRef)(null);
  (0, import_react21.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onMount = () => {
    routerData.current = {
      modals,
      el: elRef.current,
      setModals(newModals) {
        setModals([...newModals]);
      }
    };
    f7routers.modals = routerData.current;
  };
  const onDestroy = () => {
    if (!routerData.current)
      return;
    f7routers.modals = null;
    routerData.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (!routerData.current || !f7)
      return;
    f7events.emit("modalsRouterDidUpdate", routerData.current);
  });
  return import_react21.default.createElement("div", {
    ref: elRef,
    className: "framework7-modals"
  }, modals.map((_ref) => {
    let {
      component: ModalComponent,
      id: modalId,
      props: modalProps
    } = _ref;
    return import_react21.default.createElement(ModalComponent, _extends15({
      key: modalId
    }, modalProps));
  }));
});
RoutableModals.displayName = "f7-routable-modals";
var routable_modals_default = RoutableModals;

// node_modules/framework7-react/components/app.js
function _extends16() {
  _extends16 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
var App = (0, import_react22.forwardRef)((props, ref) => {
  const {
    className,
    style,
    children,
    ...rest
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const params = rest;
  const elRef = (0, import_react22.useRef)(null);
  (0, import_react22.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "framework7-root", colorClasses(props));
  if (!f7 || typeof window === "undefined") {
    f7init(elRef.current, params, false);
  }
  useIsomorphicLayoutEffect(() => {
    const parentEl = elRef.current && elRef.current.parentNode;
    if (typeof document !== "undefined" && parentEl && parentEl !== document.body && parentEl.parentNode === document.body) {
      parentEl.style.height = "100%";
    }
    if (f7) {
      f7.init(elRef.current);
      return;
    }
    f7init(elRef.current, params, true);
  }, []);
  return import_react22.default.createElement("div", _extends16({
    id: "framework7-root",
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, import_react22.default.createElement(routable_modals_default, null));
});
App.displayName = "f7-app";
var app_default = App;

// node_modules/framework7-react/components/appbar.js
var import_react23 = __toESM(require_react(), 1);
function _extends17() {
  _extends17 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
var Appbar = (0, import_react23.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    inner = true,
    innerClass,
    innerClassName,
    noShadow,
    noHairline
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react23.useRef)(null);
  (0, import_react23.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  let innerEl;
  if (inner) {
    innerEl = import_react23.default.createElement("div", {
      className: classNames("appbar-inner", innerClass, innerClassName)
    }, children);
  }
  const classes = classNames(className, "appbar", {
    "no-shadow": noShadow,
    "no-hairline": noHairline
  }, colorClasses(props));
  const slots = getSlots(props);
  return import_react23.default.createElement("div", _extends17({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), slots["before-inner"], innerEl || slots.default, slots["after-inner"]);
});
Appbar.displayName = "f7-appbar";
var appbar_default = Appbar;

// node_modules/framework7-react/components/area-chart.js
var import_react24 = __toESM(require_react(), 1);
function _extends18() {
  _extends18 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
var AreaChart = (0, import_react24.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    lineChart = false,
    datasets = [],
    axis = false,
    axisLabels = [],
    tooltip = false,
    legend = false,
    toggleDatasets = false,
    width = 640,
    height = 320,
    maxAxisLabels = 8,
    formatAxisLabel: formatAxisLabelProp,
    formatLegendLabel: formatLegendLabelProp,
    formatTooltip: formatTooltipProp,
    formatTooltipAxisLabel,
    formatTooltipTotal,
    formatTooltipDataset,
    children
  } = props;
  const [currentIndex, setCurrentIndex] = (0, import_react24.useState)(null);
  const previousIndex = (0, import_react24.useRef)(null);
  const [hiddenDatasets, setHiddenDatasets] = (0, import_react24.useState)([]);
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react24.useRef)(null);
  const svgElRef = (0, import_react24.useRef)(null);
  const f7Tooltip = (0, import_react24.useRef)(null);
  const linesOffsets = (0, import_react24.useRef)(null);
  (0, import_react24.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const getVisibleLegends = () => {
    if (!maxAxisLabels || axisLabels.length <= maxAxisLabels)
      return axisLabels;
    const skipStep = Math.ceil(axisLabels.length / maxAxisLabels);
    const filtered = axisLabels.filter((label, index) => index % skipStep === 0);
    return filtered;
  };
  const getSummValues = () => {
    const summValues = [];
    datasets.filter((dataset, index) => !hiddenDatasets.includes(index)).forEach((_ref) => {
      let {
        values
      } = _ref;
      values.forEach((value, valueIndex) => {
        if (!summValues[valueIndex])
          summValues[valueIndex] = 0;
        summValues[valueIndex] += value;
      });
    });
    return summValues;
  };
  const getChartData = () => {
    const data = [];
    if (!datasets.length) {
      return data;
    }
    const lastValues = datasets[0].values.map(() => 0);
    let maxValue = 0;
    if (lineChart) {
      datasets.forEach((_ref2) => {
        let {
          values
        } = _ref2;
        const datasetMaxValue = Math.max(...values);
        if (datasetMaxValue > maxValue)
          maxValue = datasetMaxValue;
      });
    } else {
      maxValue = Math.max(...getSummValues());
    }
    datasets.filter((dataset, index) => !hiddenDatasets.includes(index)).forEach((_ref3) => {
      let {
        label,
        values,
        color
      } = _ref3;
      const points = values.map((originalValue, valueIndex) => {
        lastValues[valueIndex] += originalValue;
        const value = lineChart ? originalValue : lastValues[valueIndex];
        const x = valueIndex / (values.length - 1) * width;
        const y = height - value / maxValue * height;
        if (lineChart) {
          return `${valueIndex === 0 ? "M" : "L"}${x},${y}`;
        }
        return `${x} ${y}`;
      });
      if (!lineChart) {
        points.push(`${width} ${height} 0 ${height}`);
      }
      data.push({
        label,
        points: points.join(" "),
        color
      });
    });
    return data.reverse();
  };
  const getVerticalLines = () => {
    const lines = [];
    if (!datasets.length) {
      return lines;
    }
    const values = datasets[0].values;
    values.forEach((value, valueIndex) => {
      const x = valueIndex / (values.length - 1) * width;
      lines.push(x);
    });
    return lines;
  };
  const toggleDataset = (index) => {
    if (!toggleDatasets)
      return;
    if (hiddenDatasets.includes(index)) {
      hiddenDatasets.splice(hiddenDatasets.indexOf(index), 1);
    } else {
      hiddenDatasets.push(index);
    }
    setHiddenDatasets([...hiddenDatasets]);
  };
  const formatAxisLabel = (label) => {
    if (formatAxisLabelProp)
      return formatAxisLabelProp(label);
    return label;
  };
  const formatLegendLabel = (label) => {
    if (formatLegendLabelProp)
      return formatLegendLabelProp(label);
    return label;
  };
  const calcLinesOffsets = () => {
    const lines = svgElRef.current.querySelectorAll("line");
    linesOffsets.current = [];
    for (let i = 0; i < lines.length; i += 1) {
      linesOffsets.current.push(lines[i].getBoundingClientRect().left);
    }
  };
  const formatTooltip = () => {
    if (currentIndex === null)
      return "";
    let total = 0;
    const currentValues = datasets.filter((dataset, index) => !hiddenDatasets.includes(index)).map((dataset) => ({
      color: dataset.color,
      label: dataset.label,
      value: dataset.values[currentIndex]
    }));
    currentValues.forEach((dataset) => {
      total += dataset.value;
    });
    if (formatTooltipProp) {
      return formatTooltipProp({
        index: currentIndex,
        total,
        datasets: currentValues
      });
    }
    let labelText = formatTooltipAxisLabel ? formatTooltipAxisLabel(axisLabels[currentIndex]) : formatAxisLabel(axisLabels[currentIndex]);
    if (!labelText)
      labelText = "";
    const totalText = formatTooltipTotal ? formatTooltipTotal(total) : total;
    const datasetsText = currentValues.length > 0 ? `
      <ul class="area-chart-tooltip-list">
        ${currentValues.map((_ref4) => {
      let {
        label,
        color,
        value
      } = _ref4;
      const valueText = formatTooltipDataset ? formatTooltipDataset(label, value, color) : `${label}: ${value}`;
      return `
              <li><span style="background-color: ${color};"></span>${valueText}</li>
            `;
    }).join("")}
      </ul>` : "";
    return `
      <div class="area-chart-tooltip-label">${labelText}</div>
      <div class="area-chart-tooltip-total">${totalText}</div>
      ${datasetsText}
    `;
  };
  const setTooltip = () => {
    if (!tooltip)
      return;
    const hasVisibleDataSets = datasets.filter((dataset, index) => !hiddenDatasets.includes(index)).length > 0;
    if (!hasVisibleDataSets) {
      if (f7Tooltip.current && f7Tooltip.current.hide)
        f7Tooltip.current.hide();
      return;
    }
    if (currentIndex !== null && !f7Tooltip.current) {
      f7Tooltip.current = f7.tooltip.create({
        trigger: "manual",
        containerEl: elRef.current,
        targetEl: svgElRef.current.querySelector(`line[data-index="${currentIndex}"]`),
        text: formatTooltip(),
        cssClass: "area-chart-tooltip"
      });
      if (f7Tooltip.current && f7Tooltip.current.show) {
        f7Tooltip.current.show();
      }
      return;
    }
    if (!f7Tooltip.current || !f7Tooltip.current.hide || !f7Tooltip.current.show) {
      return;
    }
    if (currentIndex !== null) {
      f7Tooltip.current.setText(formatTooltip());
      f7Tooltip.current.setTargetEl(svgElRef.current.querySelector(`line[data-index="${currentIndex}"]`));
      f7Tooltip.current.show();
    } else {
      f7Tooltip.current.hide();
    }
  };
  const onMouseEnter = () => {
    calcLinesOffsets();
  };
  const onMouseMove = (e) => {
    if (!linesOffsets.current) {
      calcLinesOffsets();
    }
    let currentLeft = e.pageX;
    if (typeof currentLeft === "undefined")
      currentLeft = 0;
    const distances = linesOffsets.current.map((left) => Math.abs(currentLeft - left));
    const minDistance = Math.min(...distances);
    const closestIndex = distances.indexOf(minDistance);
    setCurrentIndex(closestIndex);
  };
  const onMouseLeave = () => {
    setCurrentIndex(null);
  };
  const attachEvents = () => {
    if (!svgElRef.current)
      return;
    svgElRef.current.addEventListener("mouseenter", onMouseEnter);
    svgElRef.current.addEventListener("mousemove", onMouseMove);
    svgElRef.current.addEventListener("mouseleave", onMouseLeave);
  };
  const detachEvents = () => {
    if (!svgElRef.current)
      return;
    svgElRef.current.removeEventListener("mouseenter", onMouseEnter);
    svgElRef.current.removeEventListener("mousemove", onMouseMove);
    svgElRef.current.removeEventListener("mouseleave", onMouseLeave);
  };
  (0, import_react24.useEffect)(() => {
    if (previousIndex.current === currentIndex)
      return;
    previousIndex.current = currentIndex;
    emit(props, "select", currentIndex);
    setTooltip();
  }, [currentIndex]);
  (0, import_react24.useEffect)(() => {
    attachEvents();
    return detachEvents;
  });
  (0, import_react24.useEffect)(() => {
    return () => {
      if (f7Tooltip.current && f7Tooltip.current.destroy) {
        f7Tooltip.current.destroy();
      }
      f7Tooltip.current = null;
    };
  }, []);
  const classes = classNames("area-chart", className);
  const chartData = getChartData();
  const verticalLines = getVerticalLines();
  const visibleLegends = getVisibleLegends();
  const LegendItemTag = toggleDatasets ? "button" : "span";
  const ChartTag = lineChart ? "path" : "polygon";
  return import_react24.default.createElement("div", _extends18({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react24.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width,
    height,
    viewBox: `0 0 ${width} ${height}`,
    preserveAspectRatio: "none",
    ref: svgElRef
  }, chartData.map((data, index) => import_react24.default.createElement(ChartTag, {
    key: `${ChartTag}-${index}`,
    fill: lineChart ? void 0 : data.color,
    stroke: lineChart ? data.color : void 0,
    fillRule: "evenodd",
    points: lineChart ? void 0 : data.points,
    d: lineChart ? data.points : void 0
  })), verticalLines.map((line, index) => import_react24.default.createElement("line", {
    key: `line-${index}`,
    "data-index": index,
    fill: "#000",
    x1: line,
    y1: 0,
    x2: line,
    y2: height,
    className: classNames({
      "area-chart-current-line": currentIndex === index
    })
  }))), axis && import_react24.default.createElement("div", {
    className: "area-chart-axis"
  }, axisLabels.map((label, index) => import_react24.default.createElement("span", {
    key: index
  }, visibleLegends.includes(label) && import_react24.default.createElement("span", null, formatAxisLabel(label))))), legend && import_react24.default.createElement("div", {
    className: "area-chart-legend"
  }, datasets.map((dataset, index) => import_react24.default.createElement(LegendItemTag, {
    key: index,
    className: classNames("area-chart-legend-item", {
      "area-chart-legend-item-hidden": hiddenDatasets.includes(index),
      "area-chart-legend-button": toggleDatasets
    }),
    type: toggleDatasets ? "button" : void 0,
    onClick: () => toggleDataset(index)
  }, import_react24.default.createElement("span", {
    style: {
      backgroundColor: dataset.color
    }
  }), formatLegendLabel(dataset.label)))), children);
});
AreaChart.displayName = "f7-area-chart";
var area_chart_default = AreaChart;

// node_modules/framework7-react/components/badge.js
var import_react26 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/use-tooltip.js
var import_react25 = __toESM(require_react(), 1);
var useTooltip = (elRef, props) => {
  const f7Tooltip = (0, import_react25.useRef)(null);
  const {
    tooltip,
    tooltipTrigger
  } = props;
  const onMount = () => {
    if (!elRef.current)
      return;
    if (!tooltip)
      return;
    f7ready(() => {
      f7Tooltip.current = f7.tooltip.create({
        targetEl: elRef.current,
        text: tooltip,
        trigger: tooltipTrigger
      });
    });
  };
  const onDestroy = () => {
    if (f7Tooltip.current && f7Tooltip.current.destroy) {
      f7Tooltip.current.destroy();
      f7Tooltip.current = null;
    }
  };
  (0, import_react25.useEffect)(() => {
    onMount();
    return onDestroy;
  }, []);
  watchProp(tooltip, (value) => {
    if (!value && f7Tooltip.current) {
      f7Tooltip.current.destroy();
      f7Tooltip.current = null;
      return;
    }
    if (value && !f7Tooltip.current && f7) {
      f7Tooltip.current = f7.tooltip.create({
        targetEl: elRef.current,
        text: value,
        trigger: tooltipTrigger
      });
      return;
    }
    if (!value || !f7Tooltip.current)
      return;
    f7Tooltip.current.setText(value);
  });
};

// node_modules/framework7-react/components/badge.js
function _extends19() {
  _extends19 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
var Badge = (0, import_react26.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react26.useRef)(null);
  (0, import_react26.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  const classes = classNames(className, "badge", colorClasses(props));
  return import_react26.default.createElement("span", _extends19({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Badge.displayName = "f7-badge";
var badge_default = Badge;

// node_modules/framework7-react/components/block-footer.js
var import_react27 = __toESM(require_react(), 1);
function _extends20() {
  _extends20 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
var BlockFooter = (0, import_react27.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react27.useRef)(null);
  (0, import_react27.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "block-footer", colorClasses(props));
  return import_react27.default.createElement("div", _extends20({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
BlockFooter.displayName = "f7-block-footer";
var block_footer_default = BlockFooter;

// node_modules/framework7-react/components/block-header.js
var import_react28 = __toESM(require_react(), 1);
function _extends21() {
  _extends21 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
var BlockHeader = (0, import_react28.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react28.useRef)(null);
  (0, import_react28.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "block-header", colorClasses(props));
  return import_react28.default.createElement("div", _extends21({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
BlockHeader.displayName = "f7-block-header";
var block_header_default = BlockHeader;

// node_modules/framework7-react/components/block-title.js
var import_react29 = __toESM(require_react(), 1);
function _extends22() {
  _extends22 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
var BlockTitle = (0, import_react29.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    large,
    medium
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react29.useRef)(null);
  (0, import_react29.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "block-title", {
    "block-title-large": large,
    "block-title-medium": medium
  }, colorClasses(props));
  return import_react29.default.createElement("div", _extends22({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
BlockTitle.displayName = "f7-block-title";
var block_title_default = BlockTitle;

// node_modules/framework7-react/components/block.js
var import_react30 = __toESM(require_react(), 1);
function _extends23() {
  _extends23 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
var Block = (0, import_react30.forwardRef)((props, ref) => {
  const {
    className,
    inset,
    xsmallInset,
    smallInset,
    mediumInset,
    largeInset,
    xlargeInset,
    strong,
    accordionList,
    accordionOpposite,
    tabs,
    tab,
    tabActive,
    noHairlines,
    noHairlinesIos,
    noHairlinesMd,
    noHairlinesAurora,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react30.useRef)(null);
  (0, import_react30.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTab(elRef, props);
  const classes = classNames(className, "block", {
    inset,
    "xsmall-inset": xsmallInset,
    "small-inset": smallInset,
    "medium-inset": mediumInset,
    "large-inset": largeInset,
    "xlarge-inset": xlargeInset,
    "block-strong": strong,
    "accordion-list": accordionList,
    "accordion-opposite": accordionOpposite,
    tabs,
    tab,
    "tab-active": tabActive,
    "no-hairlines": noHairlines,
    "no-hairlines-md": noHairlinesMd,
    "no-hairlines-ios": noHairlinesIos,
    "no-hairlines-aurora": noHairlinesAurora
  }, colorClasses(props));
  return import_react30.default.createElement("div", _extends23({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Block.displayName = "f7-block";
var block_default = Block;

// node_modules/framework7-react/components/breadcrumbs-collapsed.js
var import_react31 = __toESM(require_react(), 1);
function _extends24() {
  _extends24 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
var BreadcrumbsCollapsed = (0, import_react31.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react31.useRef)(null);
  (0, import_react31.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onClick = (e) => {
    emit(props, "click", e);
  };
  return import_react31.default.createElement("div", _extends24({
    className: classNames("breadcrumbs-collapsed", className),
    ref: elRef,
    id,
    style,
    onClick
  }, extraAttrs), import_react31.default.createElement("span", null), children);
});
BreadcrumbsCollapsed.displayName = "f7-breadcrumbs-collapsed";
var breadcrumbs_collapsed_default = BreadcrumbsCollapsed;

// node_modules/framework7-react/components/breadcrumbs-item.js
var import_react32 = __toESM(require_react(), 1);
function _extends25() {
  _extends25 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
var BreadcrumbsItem = (0, import_react32.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    active,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react32.useRef)(null);
  (0, import_react32.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onClick = (e) => {
    emit(props, "click", e);
  };
  return import_react32.default.createElement("div", _extends25({
    className: classNames("breadcrumbs-item", className, active && "breadcrumbs-item-active"),
    ref: elRef,
    id,
    style,
    onClick
  }, extraAttrs), children);
});
BreadcrumbsItem.displayName = "f7-breadcrumbs-item";
var breadcrumbs_item_default = BreadcrumbsItem;

// node_modules/framework7-react/components/breadcrumbs-separator.js
var import_react33 = __toESM(require_react(), 1);
function _extends26() {
  _extends26 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
var BreadcrumbsSeparator = (0, import_react33.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react33.useRef)(null);
  (0, import_react33.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  return import_react33.default.createElement("div", _extends26({
    className: classNames("breadcrumbs-separator", className),
    ref: elRef,
    id,
    style
  }, extraAttrs));
});
BreadcrumbsSeparator.displayName = "f7-breadcrumbs-separator";
var breadcrumbs_separator_default = BreadcrumbsSeparator;

// node_modules/framework7-react/components/breadcrumbs.js
var import_react34 = __toESM(require_react(), 1);
function _extends27() {
  _extends27 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
var Breadcrumbs = (0, import_react34.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react34.useRef)(null);
  (0, import_react34.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  return import_react34.default.createElement("div", _extends27({
    className: classNames("breadcrumbs", className),
    ref: elRef,
    id,
    style
  }, extraAttrs), children);
});
Breadcrumbs.displayName = "f7-breadcrumbs";
var breadcrumbs_default = Breadcrumbs;

// node_modules/framework7-react/components/button.js
var import_react40 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/use-icon.js
var import_react37 = __toESM(require_react(), 1);

// node_modules/framework7-react/components/icon.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/use-theme.js
var import_react35 = __toESM(require_react(), 1);
var useTheme = () => {
  const [t, setTheme2] = (0, import_react35.useState)(f7 ? theme : null);
  if (!f7) {
    f7ready(() => {
      setTheme2(theme);
    });
  }
  return t;
};

// node_modules/framework7-react/components/icon.js
function _extends28() {
  _extends28 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
var Icon = (0, import_react36.forwardRef)((props, ref) => {
  const theme2 = useTheme();
  const {
    className,
    id,
    style,
    children,
    material,
    f7: f72,
    icon,
    md,
    ios,
    aurora,
    size
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react36.useRef)(null);
  (0, import_react36.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  const getClasses = () => {
    let classes = {
      icon: true
    };
    let themeIcon;
    if (theme2 && theme2.ios)
      themeIcon = ios;
    else if (theme2 && theme2.md)
      themeIcon = md;
    else if (theme2 && theme2.aurora)
      themeIcon = aurora;
    if (themeIcon) {
      const parts = themeIcon.split(":");
      const prop = parts[0];
      const value = parts[1];
      if (prop === "material" || prop === "f7") {
        classes["material-icons"] = prop === "material";
        classes["f7-icons"] = prop === "f7";
      }
      if (prop === "icon") {
        classes[value] = true;
      }
    } else {
      classes = {
        icon: true,
        "material-icons": material,
        "f7-icons": f72
      };
      if (icon)
        classes[icon] = true;
    }
    return classNames(className, classes, colorClasses(props));
  };
  const getIconText = () => {
    let text = material || f72;
    if (md && theme2 && theme2.md && (md.indexOf("material:") >= 0 || md.indexOf("f7:") >= 0)) {
      text = md.split(":")[1];
    } else if (ios && theme2 && theme2.ios && (ios.indexOf("material:") >= 0 || ios.indexOf("f7:") >= 0)) {
      text = ios.split(":")[1];
    } else if (aurora && theme2 && theme2.aurora && (aurora.indexOf("material:") >= 0 || aurora.indexOf("f7:") >= 0)) {
      text = aurora.split(":")[1];
    }
    return text;
  };
  let sizeComputed = size;
  if (typeof size === "number" || parseFloat(size) === size * 1) {
    sizeComputed = `${size}px`;
  }
  return import_react36.default.createElement("i", _extends28({
    id,
    style: extend({
      fontSize: sizeComputed,
      width: sizeComputed,
      height: sizeComputed
    }, style),
    className: getClasses(),
    ref: elRef
  }, extraAttrs), getIconText(), children);
});
Icon.displayName = "f7-icon";
var icon_default = Icon;

// node_modules/framework7-react/shared/use-icon.js
var useIcon = function(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    icon,
    iconMaterial,
    iconF7,
    iconMd,
    iconIos,
    iconAurora,
    iconColor,
    iconSize,
    iconBadge,
    badgeColor,
    iconBadgeColor
  } = props;
  if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {
    return import_react37.default.createElement(icon_default, {
      material: iconMaterial,
      f7: iconF7,
      icon,
      md: iconMd,
      ios: iconIos,
      aurora: iconAurora,
      color: iconColor,
      size: iconSize
    }, (iconBadge || iconBadge === 0) && import_react37.default.createElement(badge_default, {
      color: badgeColor || iconBadgeColor
    }, iconBadge));
  }
  return null;
};

// node_modules/framework7-react/shared/use-route-props.js
var import_react38 = __toESM(require_react(), 1);
var useRouteProps = function(elRef, _temp) {
  let {
    routeProps
  } = _temp === void 0 ? {} : _temp;
  (0, import_react38.useEffect)(() => {
    if (elRef.current) {
      elRef.current.f7RouteProps = routeProps;
    }
    return () => {
      if (elRef.current && elRef.current.f7RouteProps) {
        delete elRef.current.f7RouteProps;
      }
    };
  }, [routeProps]);
};

// node_modules/framework7-react/components/preloader.js
var import_react39 = __toESM(require_react(), 1);
function _extends29() {
  _extends29 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
var Preloader = (0, import_react39.forwardRef)((props, ref) => {
  const theme2 = useTheme();
  const {
    className,
    id,
    style,
    size
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react39.useRef)(null);
  (0, import_react39.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const preloaderStyle = {};
  let sizeComputed = size;
  if (sizeComputed && typeof sizeComputed === "string" && sizeComputed.indexOf("px") >= 0) {
    sizeComputed = sizeComputed.replace("px", "");
  }
  if (sizeComputed) {
    preloaderStyle.width = `${sizeComputed}px`;
    preloaderStyle.height = `${sizeComputed}px`;
    preloaderStyle["--f7-preloader-size"] = `${sizeComputed}px`;
  }
  if (style)
    extend(preloaderStyle, style || {});
  let innerEl;
  if (theme2 && theme2.md) {
    innerEl = import_react39.default.createElement("span", {
      className: "preloader-inner"
    }, import_react39.default.createElement("svg", {
      viewBox: "0 0 36 36"
    }, import_react39.default.createElement("circle", {
      cx: "18",
      cy: "18",
      r: "16"
    })));
  } else if (theme2 && theme2.ios) {
    innerEl = import_react39.default.createElement("span", {
      className: "preloader-inner"
    }, import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }), import_react39.default.createElement("span", {
      className: "preloader-inner-line"
    }));
  } else if (theme2 && theme2.aurora) {
    innerEl = import_react39.default.createElement("span", {
      className: "preloader-inner"
    }, import_react39.default.createElement("span", {
      className: "preloader-inner-circle"
    }));
  } else if (!theme2) {
    innerEl = import_react39.default.createElement("span", {
      className: "preloader-inner"
    });
  }
  const classes = classNames(className, "preloader", colorClasses(props));
  return import_react39.default.createElement("span", _extends29({
    id,
    style: preloaderStyle,
    className: classes,
    ref: elRef
  }, extraAttrs), innerEl);
});
Preloader.displayName = "f7-preloader";
var preloader_default = Preloader;

// node_modules/framework7-react/components/button.js
function _extends30() {
  _extends30 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
var Button = (0, import_react40.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    text,
    type,
    href = "#",
    target,
    tabLink,
    tabLinkActive,
    round,
    roundIos,
    roundAurora,
    roundMd,
    fill,
    fillIos,
    fillAurora,
    fillMd,
    large,
    largeIos,
    largeAurora,
    largeMd,
    small,
    smallIos,
    smallAurora,
    smallMd,
    raised,
    raisedIos,
    raisedAurora,
    raisedMd,
    active,
    outline,
    outlineIos,
    outlineAurora,
    outlineMd,
    disabled,
    preloader,
    preloaderSize,
    preloaderColor,
    loading
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react40.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react40.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  useRouteProps(elRef, props);
  const getClasses = () => {
    return classNames(className, "button", {
      "tab-link": tabLink || tabLink === "",
      "tab-link-active": tabLinkActive,
      "button-round": round,
      "button-round-ios": roundIos,
      "button-round-aurora": roundAurora,
      "button-round-md": roundMd,
      "button-fill": fill,
      "button-fill-ios": fillIos,
      "button-fill-aurora": fillAurora,
      "button-fill-md": fillMd,
      "button-large": large,
      "button-large-ios": largeIos,
      "button-large-aurora": largeAurora,
      "button-large-md": largeMd,
      "button-small": small,
      "button-small-ios": smallIos,
      "button-small-aurora": smallAurora,
      "button-small-md": smallMd,
      "button-raised": raised,
      "button-raised-ios": raisedIos,
      "button-raised-aurora": raisedAurora,
      "button-raised-md": raisedMd,
      "button-active": active,
      "button-outline": outline,
      "button-outline-ios": outlineIos,
      "button-outline-aurora": outlineAurora,
      "button-outline-md": outlineMd,
      "button-preloader": preloader,
      "button-loading": loading,
      disabled
    }, colorClasses(props), routerClasses(props), actionsClasses(props));
  };
  const ButtonTag = type === "submit" || type === "reset" || type === "button" ? "button" : "a";
  const getAttrs = () => {
    let hrefComputed = href;
    if (href === true)
      hrefComputed = "#";
    if (href === false || ButtonTag === "button")
      hrefComputed = void 0;
    return extend({
      href: hrefComputed,
      target,
      type,
      "data-tab": isStringProp(tabLink) && tabLink || void 0
    }, routerAttrs(props), actionsAttrs(props));
  };
  const iconEl = useIcon(props);
  let textEl;
  if (text) {
    textEl = import_react40.default.createElement("span", null, text);
  }
  if (preloader) {
    return import_react40.default.createElement(ButtonTag, _extends30({
      ref: elRef,
      id,
      style,
      className: getClasses()
    }, getAttrs(), extraAttrs, {
      onClick
    }), import_react40.default.createElement(preloader_default, {
      size: preloaderSize,
      color: preloaderColor
    }), import_react40.default.createElement("span", null, iconEl, textEl, children));
  }
  return import_react40.default.createElement(ButtonTag, _extends30({
    ref: elRef,
    id,
    style,
    className: getClasses()
  }, getAttrs(), extraAttrs, {
    onClick
  }), iconEl, textEl, children);
});
Button.displayName = "f7-button";
var button_default = Button;

// node_modules/framework7-react/components/card-content.js
var import_react41 = __toESM(require_react(), 1);
function _extends31() {
  _extends31 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends31.apply(this, arguments);
}
var CardContent = (0, import_react41.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    padding = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react41.useRef)(null);
  (0, import_react41.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "card-content", {
    "card-content-padding": padding
  }, colorClasses(props));
  return import_react41.default.createElement("div", _extends31({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
CardContent.displayName = "f7-card-content";
var card_content_default = CardContent;

// node_modules/framework7-react/components/card-footer.js
var import_react42 = __toESM(require_react(), 1);
function _extends32() {
  _extends32 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends32.apply(this, arguments);
}
var CardFooter = (0, import_react42.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react42.useRef)(null);
  (0, import_react42.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "card-footer", colorClasses(props));
  return import_react42.default.createElement("div", _extends32({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
CardFooter.displayName = "f7-card-footer";
var card_footer_default = CardFooter;

// node_modules/framework7-react/components/card-header.js
var import_react43 = __toESM(require_react(), 1);
function _extends33() {
  _extends33 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends33.apply(this, arguments);
}
var CardHeader = (0, import_react43.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react43.useRef)(null);
  (0, import_react43.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "card-header", colorClasses(props));
  return import_react43.default.createElement("div", _extends33({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
CardHeader.displayName = "f7-card-header";
var card_header_default = CardHeader;

// node_modules/framework7-react/components/card.js
var import_react44 = __toESM(require_react(), 1);
function _extends34() {
  _extends34 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends34.apply(this, arguments);
}
var Card = (0, import_react44.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    title,
    content,
    footer,
    padding,
    outline,
    expandable,
    expandableAnimateWidth,
    expandableOpened,
    animate,
    hideNavbarOnOpen,
    hideToolbarOnOpen,
    hideStatusbarOnOpen,
    scrollableEl,
    swipeToClose,
    closeByBackdropClick,
    backdrop,
    backdropEl,
    noShadow,
    noBorder
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react44.useRef)(null);
  const open = () => {
    if (!elRef.current)
      return;
    f7.card.open(elRef.current);
  };
  const close = () => {
    if (!elRef.current)
      return;
    f7.card.close(elRef.current);
  };
  const onBeforeOpen = (el, prevent) => {
    if (elRef.current !== el)
      return;
    emit(props, "cardBeforeOpen", el, prevent);
  };
  const onOpen = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "cardOpen", el);
  };
  const onOpened = (el, pageEl) => {
    if (elRef.current !== el)
      return;
    emit(props, "cardOpened", el, pageEl);
  };
  const onClose = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "cardClose", el);
  };
  const onClosed = (el, pageEl) => {
    if (elRef.current !== el)
      return;
    emit(props, "cardClosed", el, pageEl);
  };
  const attachEvents = () => {
    if (!expandable || !elRef.current)
      return;
    f7ready(() => {
      f7.on("cardBeforeOpen", onBeforeOpen);
      f7.on("cardOpen", onOpen);
      f7.on("cardOpened", onOpened);
      f7.on("cardClose", onClose);
      f7.on("cardClosed", onClosed);
    });
  };
  const detachEvents = () => {
    f7.off("cardBeforeOpen", onBeforeOpen);
    f7.off("cardOpen", onOpen);
    f7.off("cardOpened", onOpened);
    f7.off("cardClose", onClose);
    f7.off("cardClosed", onClosed);
  };
  const onMount = () => {
    if (!expandable || !elRef.current)
      return;
    f7ready(() => {
      if (expandable && expandableOpened) {
        f7.card.open(elRef.current, false);
      }
    });
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
  }, []);
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  watchProp(expandableOpened, (value) => {
    if (value) {
      open();
    } else {
      close();
    }
  });
  (0, import_react44.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    open,
    close
  }));
  let headerEl;
  let contentEl;
  let footerEl;
  const classes = classNames(className, "card", {
    "card-outline": outline,
    "card-expandable": expandable,
    "card-expandable-animate-width": expandableAnimateWidth,
    "no-shadow": noShadow,
    "no-border": noBorder
  }, colorClasses(props));
  const slots = getSlots(props);
  if (title || slots.header) {
    headerEl = import_react44.default.createElement(card_header_default, null, title, slots.header);
  }
  if (content || slots.content) {
    contentEl = import_react44.default.createElement(card_content_default, {
      padding
    }, content, slots.content);
  }
  if (footer || slots.footer) {
    footerEl = import_react44.default.createElement(card_footer_default, null, footer, slots.footer);
  }
  return import_react44.default.createElement("div", _extends34({
    id,
    style,
    className: classes,
    "data-animate": typeof animate === "undefined" ? animate : animate.toString(),
    "data-hide-navbar-on-open": typeof hideNavbarOnOpen === "undefined" ? hideNavbarOnOpen : hideNavbarOnOpen.toString(),
    "data-hide-toolbar-on-open": typeof hideToolbarOnOpen === "undefined" ? hideToolbarOnOpen : hideToolbarOnOpen.toString(),
    "data-hide-statusbar-on-open": typeof hideStatusbarOnOpen === "undefined" ? hideStatusbarOnOpen : hideStatusbarOnOpen.toString(),
    "data-scrollable-el": scrollableEl,
    "data-swipe-to-close": typeof swipeToClose === "undefined" ? swipeToClose : swipeToClose.toString(),
    "data-close-by-backdrop-click": typeof closeByBackdropClick === "undefined" ? closeByBackdropClick : closeByBackdropClick.toString(),
    "data-backdrop": typeof backdrop === "undefined" ? backdrop : backdrop.toString(),
    "data-backdrop-el": backdropEl,
    ref: elRef
  }, extraAttrs), headerEl, contentEl, footerEl, slots.default);
});
Card.displayName = "f7-card";
var card_default = Card;

// node_modules/framework7-react/components/checkbox.js
var import_react45 = __toESM(require_react(), 1);
function _extends35() {
  _extends35 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends35.apply(this, arguments);
}
var Checkbox = (0, import_react45.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    name: name2,
    value,
    disabled,
    readonly,
    checked,
    defaultChecked,
    indeterminate
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react45.useRef)(null);
  const inputElRef = (0, import_react45.useRef)(null);
  (0, import_react45.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    inputEl: inputElRef.current
  }));
  const onChange = (event) => {
    emit(props, "change", event);
  };
  (0, import_react45.useEffect)(() => {
    if (inputElRef.current) {
      inputElRef.current.indeterminate = !!indeterminate;
    }
  }, [indeterminate]);
  const inputEl = import_react45.default.createElement("input", {
    ref: inputElRef,
    type: "checkbox",
    name: name2,
    value,
    disabled,
    readOnly: readonly,
    checked,
    defaultChecked,
    onChange
  });
  const iconEl = import_react45.default.createElement("i", {
    className: "icon-checkbox"
  });
  const classes = classNames(className, {
    checkbox: true,
    disabled
  }, colorClasses(props));
  return import_react45.default.createElement("label", _extends35({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), inputEl, iconEl, children);
});
Checkbox.displayName = "f7-checkbox";
var checkbox_default = Checkbox;

// node_modules/framework7-react/components/chip.js
var import_react46 = __toESM(require_react(), 1);
function _extends36() {
  _extends36 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends36.apply(this, arguments);
}
var Chip = (0, import_react46.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    media,
    text,
    deleteable,
    mediaTextColor,
    mediaBgColor,
    outline
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const onClick = (event) => {
    emit(props, "click", event);
  };
  const onDeleteClick = (event) => {
    emit(props, "delete", event);
  };
  const elRef = (0, import_react46.useRef)(null);
  (0, import_react46.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  const slots = getSlots(props);
  const iconEl = useIcon(props);
  let mediaEl;
  let labelEl;
  let deleteEl;
  if (media || iconEl || slots && slots.media) {
    const mediaClasses = classNames("chip-media", mediaTextColor && `text-color-${mediaTextColor}`, mediaBgColor && `bg-color-${mediaBgColor}`);
    mediaEl = import_react46.default.createElement("div", {
      className: mediaClasses
    }, iconEl, media, slots.media);
  }
  if (text || slots && (slots.text || slots.default && slots.default.length)) {
    labelEl = import_react46.default.createElement("div", {
      className: "chip-label"
    }, text, slots.text, slots.default);
  }
  if (deleteable) {
    deleteEl = import_react46.default.createElement("a", {
      className: "chip-delete",
      onClick: onDeleteClick
    });
  }
  const classes = classNames(className, "chip", {
    "chip-outline": outline
  }, colorClasses(props));
  return import_react46.default.createElement("div", _extends36({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), mediaEl, labelEl, deleteEl);
});
Chip.displayName = "f7-chip";
var chip_default = Chip;

// node_modules/framework7-react/components/col.js
var import_react47 = __toESM(require_react(), 1);
function _extends37() {
  _extends37 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends37.apply(this, arguments);
}
var Col = (0, import_react47.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    tag = "div",
    width = "auto",
    xsmall,
    small,
    medium,
    large,
    xlarge,
    resizable,
    resizableFixed,
    resizableAbsolute,
    resizableHandler = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react47.useRef)(null);
  const onClick = (event) => {
    emit(props, "click", event);
  };
  const onResize = (el) => {
    if (el === elRef.current) {
      emit(props, "gridResize");
    }
  };
  (0, import_react47.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const ColTag = tag;
  const classes = classNames(className, {
    col: width === "auto",
    [`col-${width}`]: width !== "auto",
    [`xsmall-${xsmall}`]: xsmall,
    [`small-${small}`]: small,
    [`medium-${medium}`]: medium,
    [`large-${large}`]: large,
    [`xlarge-${xlarge}`]: xlarge,
    resizable,
    "resizable-fixed": resizableFixed,
    "resizable-absolute": resizableAbsolute
  }, colorClasses(props));
  (0, import_react47.useEffect)(() => {
    f7ready(() => {
      f7.on("gridResize", onResize);
    });
    return () => {
      f7.off("gridResize", onResize);
    };
  });
  return import_react47.default.createElement(ColTag, _extends37({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), children, resizable && resizableHandler && import_react47.default.createElement("span", {
    className: "resize-handler"
  }));
});
Col.displayName = "f7-col";
var col_default = Col;

// node_modules/framework7-react/components/fab-backdrop.js
var import_react48 = __toESM(require_react(), 1);
function _extends38() {
  _extends38 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends38.apply(this, arguments);
}
var FabBackdrop = (0, import_react48.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react48.useRef)(null);
  (0, import_react48.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "fab-backdrop");
  return import_react48.default.createElement("div", _extends38({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
FabBackdrop.displayName = "f7-fab-backdrop";
var fab_backdrop_default = FabBackdrop;

// node_modules/framework7-react/components/fab-button.js
var import_react49 = __toESM(require_react(), 1);
function _extends39() {
  _extends39 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends39.apply(this, arguments);
}
var FabButton = (0, import_react49.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    fabClose,
    label,
    target
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react49.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react49.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  const classes = classNames(className, {
    "fab-close": fabClose,
    "fab-label-button": label
  }, colorClasses(props));
  let labelEl;
  if (label) {
    labelEl = import_react49.default.createElement("span", {
      className: "fab-label"
    }, label);
  }
  return import_react49.default.createElement("a", _extends39({
    id,
    style,
    target,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), children, labelEl);
});
FabButton.displayName = "f7-fab-button";
var fab_button_default = FabButton;

// node_modules/framework7-react/components/fab-buttons.js
var import_react50 = __toESM(require_react(), 1);
function _extends40() {
  _extends40 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends40.apply(this, arguments);
}
var FabButtons = (0, import_react50.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    position
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react50.useRef)(null);
  (0, import_react50.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "fab-buttons", `fab-buttons-${position}`, colorClasses(props));
  return import_react50.default.createElement("div", _extends40({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
FabButtons.displayName = "f7-fab-buttons";
var fab_buttons_default = FabButtons;

// node_modules/framework7-react/components/fab.js
var import_react51 = __toESM(require_react(), 1);
function _extends41() {
  _extends41 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends41.apply(this, arguments);
}
var Fab = (0, import_react51.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    morphTo,
    href,
    target,
    text,
    position = "right-bottom"
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react51.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react51.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  let hrefComputed = href;
  if (hrefComputed === true)
    hrefComputed = "#";
  if (hrefComputed === false)
    hrefComputed = void 0;
  const linkChildren = [];
  const rootChildren = [];
  const {
    link: linkSlots,
    default: defaultSlots,
    root: rootSlots,
    text: textSlots
  } = getSlots(props);
  if (defaultSlots) {
    for (let i = 0; i < defaultSlots.length; i += 1) {
      const child = defaultSlots[i];
      let isRoot;
      const tag = child.type && (child.type.displayName || child.type.name);
      if (tag === "FabButtons" || tag === "f7-fab-buttons")
        isRoot = true;
      if (isRoot)
        rootChildren.push(child);
      else
        linkChildren.push(child);
    }
  }
  let textEl;
  if (text || textSlots && textSlots.length) {
    textEl = import_react51.default.createElement("div", {
      className: "fab-text"
    }, text, textSlots);
  }
  let linkEl;
  if (linkChildren.length || linkSlots && linkSlots.length || textEl) {
    linkEl = import_react51.default.createElement("a", {
      target,
      href: hrefComputed,
      onClick
    }, linkChildren, textEl, linkSlots);
  }
  const classes = classNames(className, "fab", `fab-${position}`, {
    "fab-morph": morphTo,
    "fab-extended": typeof textEl !== "undefined"
  }, colorClasses(props));
  return import_react51.default.createElement("div", _extends41({
    id,
    style,
    className: classes,
    "data-morph-to": morphTo,
    ref: elRef
  }, extraAttrs), linkEl, rootChildren, rootSlots);
});
Fab.displayName = "f7-fab";
var fab_default = Fab;

// node_modules/framework7-react/components/gauge.js
var import_react52 = __toESM(require_react(), 1);
function _extends42() {
  _extends42 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends42.apply(this, arguments);
}
var Gauge = (0, import_react52.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    type = "circle",
    value = 0,
    size = 200,
    bgColor = "transparent",
    borderBgColor = "#eeeeee",
    borderColor = "#000000",
    borderWidth = 10,
    valueText,
    valueTextColor = "#000000",
    valueFontSize = 31,
    valueFontWeight = 500,
    labelText,
    labelTextColor = "#888888",
    labelFontSize = 14,
    labelFontWeight = 400
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react52.useRef)(null);
  (0, import_react52.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "gauge");
  const semiCircle = type === "semicircle";
  const radius = size / 2 - borderWidth / 2;
  const length = 2 * Math.PI * radius;
  const progress = Math.max(Math.min(value, 1), 0);
  return import_react52.default.createElement("div", _extends42({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react52.default.createElement("svg", {
    className: "gauge-svg",
    width: `${size}px`,
    height: `${semiCircle ? size / 2 : size}px`,
    viewBox: `0 0 ${size} ${semiCircle ? size / 2 : size}`
  }, semiCircle && import_react52.default.createElement("path", {
    className: "gauge-back-semi",
    d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,
    stroke: borderBgColor,
    strokeWidth: borderWidth,
    fill: bgColor || "none"
  }), semiCircle && import_react52.default.createElement("path", {
    className: "gauge-front-semi",
    d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,
    stroke: borderColor,
    strokeWidth: borderWidth,
    strokeDasharray: length / 2,
    strokeDashoffset: length / 2 * (1 + progress),
    fill: borderBgColor ? "none" : bgColor || "none"
  }), !semiCircle && borderBgColor && import_react52.default.createElement("circle", {
    className: "gauge-back-circle",
    stroke: borderBgColor,
    strokeWidth: borderWidth,
    fill: bgColor || "none",
    cx: size / 2,
    cy: size / 2,
    r: radius
  }), !semiCircle && import_react52.default.createElement("circle", {
    className: "gauge-front-circle",
    transform: `rotate(-90 ${size / 2} ${size / 2})`,
    stroke: borderColor,
    strokeWidth: borderWidth,
    strokeDasharray: length,
    strokeDashoffset: length * (1 - progress),
    fill: borderBgColor ? "none" : bgColor || "none",
    cx: size / 2,
    cy: size / 2,
    r: radius
  }), valueText && import_react52.default.createElement("text", {
    className: "gauge-value-text",
    x: "50%",
    y: semiCircle ? "100%" : "50%",
    fontWeight: valueFontWeight,
    fontSize: valueFontSize,
    fill: valueTextColor,
    dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,
    textAnchor: "middle",
    dominantBaseline: !semiCircle ? "middle" : null
  }, valueText), labelText && import_react52.default.createElement("text", {
    className: "gauge-label-text",
    x: "50%",
    y: semiCircle ? "100%" : "50%",
    fontWeight: labelFontWeight,
    fontSize: labelFontSize,
    fill: labelTextColor,
    dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,
    textAnchor: "middle",
    dominantBaseline: !semiCircle ? "middle" : null
  }, labelText)));
});
Gauge.displayName = "f7-gauge";
var gauge_default = Gauge;

// node_modules/framework7-react/components/input.js
var import_react56 = __toESM(require_react(), 1);

// node_modules/framework7-react/components/toggle.js
var import_react53 = __toESM(require_react(), 1);
function _extends43() {
  _extends43 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends43.apply(this, arguments);
}
var Toggle = (0, import_react53.forwardRef)((props, ref) => {
  const f7Toggle = (0, import_react53.useRef)(null);
  const {
    className,
    id,
    style,
    init = true,
    checked,
    defaultChecked,
    disabled,
    readonly,
    name: name2,
    value
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react53.useRef)(null);
  const inputElRef = (0, import_react53.useRef)(null);
  const onChange = (event) => {
    emit(props, "change", event);
  };
  (0, import_react53.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Toggle: () => f7Toggle.current
  }));
  useTooltip(elRef, props);
  watchProp(checked, (newValue) => {
    if (!f7Toggle.current)
      return;
    f7Toggle.current.checked = newValue;
  });
  const onToggleChange = (toggleInstance) => {
    emit(props, "toggleChange", toggleInstance.checked);
  };
  const toggleEvents = (method) => {
    if (!f7Toggle.current)
      return;
    f7Toggle.current[method]("toggleChange", onToggleChange);
  };
  const onMount = () => {
    f7ready(() => {
      if (!init || !elRef.current)
        return;
      f7Toggle.current = f7.toggle.create({
        el: elRef.current
      });
      toggleEvents("on");
    });
  };
  const onDestroy = () => {
    if (f7Toggle.current && f7Toggle.current.destroy && f7Toggle.current.$el) {
      f7Toggle.current.destroy();
    }
    f7Toggle.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    toggleEvents("on");
    if (inputElRef.current) {
      inputElRef.current.addEventListener("change", onChange);
    }
    return () => {
      toggleEvents("off");
      if (inputElRef.current) {
        inputElRef.current.removeEventListener("change", onChange);
      }
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const labelClasses = classNames("toggle", className, {
    disabled
  }, colorClasses(props));
  const inputEl = import_react53.default.createElement("input", {
    ref: inputElRef,
    type: "checkbox",
    name: name2,
    disabled,
    readOnly: readonly,
    checked,
    defaultChecked,
    value,
    onChange: () => {
    }
  });
  return import_react53.default.createElement("label", _extends43({
    id,
    style,
    className: labelClasses,
    ref: elRef
  }, extraAttrs), inputEl, import_react53.default.createElement("span", {
    className: "toggle-icon"
  }));
});
Toggle.displayName = "f7-toggle";
var toggle_default = Toggle;

// node_modules/framework7-react/components/range.js
var import_react54 = __toESM(require_react(), 1);
function _extends44() {
  _extends44 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends44.apply(this, arguments);
}
var Range = (0, import_react54.forwardRef)((props, ref) => {
  const f7Range = (0, import_react54.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    init = true,
    value = 0,
    min = 0,
    max = 100,
    step = 1,
    label = false,
    dual = false,
    vertical = false,
    verticalReversed = false,
    draggableBar = true,
    formatLabel,
    scale = false,
    scaleSteps = 5,
    scaleSubSteps = 0,
    formatScaleLabel,
    limitKnobPosition = void 0,
    name: name2,
    input,
    inputId,
    disabled
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react54.useRef)(null);
  (0, import_react54.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Range: () => f7Range.current
  }));
  watchProp(value, (newValue) => {
    if (!f7Range.current)
      return;
    const rangeValue = f7Range.current.value;
    if (Array.isArray(newValue) && Array.isArray(rangeValue)) {
      if (rangeValue[0] !== newValue[0] || rangeValue[1] !== newValue[1]) {
        f7Range.current.setValue(newValue);
      }
    } else {
      f7Range.current.setValue(newValue);
    }
  });
  const onChange = (range, val) => {
    emit(props, "rangeChange", val);
  };
  const onChanged = (range, val) => {
    emit(props, "rangeChanged", val);
  };
  const rangeEvents = (method) => {
    if (!f7Range.current)
      return;
    f7Range.current[method]("change", onChange);
    f7Range.current[method]("changed", onChanged);
  };
  const onMount = () => {
    f7ready(() => {
      if (!init || !elRef.current)
        return;
      f7Range.current = f7.range.create(noUndefinedProps({
        el: elRef.current,
        value,
        min,
        max,
        step,
        label,
        dual,
        draggableBar,
        vertical,
        verticalReversed,
        formatLabel,
        scale,
        scaleSteps,
        scaleSubSteps,
        formatScaleLabel,
        limitKnobPosition
      }));
      rangeEvents("on");
    });
  };
  const onDestroy = () => {
    if (f7Range.current && f7Range.current.destroy)
      f7Range.current.destroy();
    f7Range.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    rangeEvents("on");
    return () => {
      rangeEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "range-slider", {
    "range-slider-horizontal": !vertical,
    "range-slider-vertical": vertical,
    "range-slider-vertical-reversed": vertical && verticalReversed,
    disabled
  }, colorClasses(props));
  return import_react54.default.createElement("div", _extends44({
    ref: elRef,
    id,
    style,
    className: classes
  }, extraAttrs), input && import_react54.default.createElement("input", {
    type: "range",
    name: name2,
    id: inputId
  }), children);
});
Range.displayName = "f7-range";
var range_default = Range;

// node_modules/framework7-react/components/text-editor.js
var import_react55 = __toESM(require_react(), 1);
function _extends45() {
  _extends45 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends45.apply(this, arguments);
}
var TextEditor = (0, import_react55.forwardRef)((props, ref) => {
  const f7TextEditor = (0, import_react55.useRef)(null);
  const {
    className,
    id,
    style,
    mode,
    value,
    buttons,
    customButtons,
    dividers,
    imageUrlText,
    linkUrlText,
    placeholder,
    clearFormattingOnPaste,
    resizable = false
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react55.useRef)(null);
  const onChange = (editor, editorValue) => {
    emit(props, "textEditorChange", editorValue);
  };
  const onInput = (editor, editorValue) => {
    emit(props, "textEditorInput", editorValue);
  };
  const onFocus = () => {
    emit(props, "textEditorFocus");
  };
  const onBlur = () => {
    emit(props, "textEditorBlur");
  };
  const onButtonClick = (editor, button) => {
    emit(props, "textEditorButtonClick", button);
  };
  const onKeyboardOpen = () => {
    emit(props, "textEditorKeyboardOpen");
  };
  const onKeyboardClose = () => {
    emit(props, "textEditorKeyboardClose");
  };
  const onPopoverOpen = () => {
    emit(props, "textEditorPopoverOpen");
  };
  const onPopoverClose = () => {
    emit(props, "textEditorPopoverClose");
  };
  const onInsertLink = (editor, url) => {
    emit(props, "textEditorInsertLink", url);
  };
  const onInsertImage = (editor, url) => {
    emit(props, "textEditorInsertImage", url);
  };
  (0, import_react55.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7TextEditor: () => f7TextEditor.current
  }));
  watchProp(value, (newValue) => {
    if (f7TextEditor.current) {
      f7TextEditor.current.setValue(newValue);
    }
  });
  const onMount = () => {
    const params = noUndefinedProps({
      el: elRef.current,
      mode,
      value,
      buttons,
      customButtons,
      dividers,
      imageUrlText,
      linkUrlText,
      placeholder,
      clearFormattingOnPaste,
      on: {
        change: onChange,
        input: onInput,
        focus: onFocus,
        blur: onBlur,
        buttonClick: onButtonClick,
        keyboardOpen: onKeyboardOpen,
        keyboardClose: onKeyboardClose,
        popoverOpen: onPopoverOpen,
        popoverClose: onPopoverClose,
        insertLink: onInsertLink,
        insertImage: onInsertImage
      }
    });
    f7ready(() => {
      f7TextEditor.current = f7.textEditor.create(params);
    });
  };
  const onDestroy = () => {
    if (f7TextEditor.current && f7TextEditor.current.destroy) {
      f7TextEditor.current.destroy();
    }
    f7TextEditor.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const slots = getSlots(props);
  const classes = classNames(className, "text-editor", resizable && "text-editor-resizable", colorClasses(props));
  return import_react55.default.createElement("div", _extends45({
    ref: elRef,
    id,
    style,
    className: classes
  }, extraAttrs), slots["root-start"], import_react55.default.createElement("div", {
    className: "text-editor-content",
    contentEditable: true
  }, slots.default), slots["root-end"], slots.root);
});
TextEditor.displayName = "f7-text-editor";
var text_editor_default = TextEditor;

// node_modules/framework7-react/components/input.js
function _extends46() {
  _extends46 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends46.apply(this, arguments);
}
var Input = (0, import_react56.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    type,
    name: name2,
    value,
    defaultValue,
    inputmode,
    placeholder,
    inputId,
    size,
    accept,
    autocomplete,
    autocorrect,
    autocapitalize,
    spellcheck,
    autofocus,
    autosave,
    checked,
    disabled,
    max,
    min,
    step,
    maxlength,
    minlength,
    multiple,
    readonly,
    required,
    inputStyle,
    pattern,
    validate,
    validateOnBlur,
    onValidate,
    tabindex,
    resizable,
    clearButton,
    noFormStoreData,
    noStoreData,
    ignoreStoreData,
    errorMessage,
    errorMessageForce,
    info,
    outline,
    wrap = true,
    dropdown = "auto",
    calendarParams,
    colorPickerParams,
    textEditorParams
  } = props;
  const [inputInvalid, setInputInvalid] = (0, import_react56.useState)(false);
  const [inputFocused, setInputFocused] = (0, import_react56.useState)(false);
  const extraAttrs = getExtraAttrs(props);
  const f7Calendar = (0, import_react56.useRef)(null);
  const f7ColorPicker = (0, import_react56.useRef)(null);
  const elRef = (0, import_react56.useRef)(null);
  const inputElRef = (0, import_react56.useRef)(null);
  const updateInputOnDidUpdate = (0, import_react56.useRef)(false);
  const getDomValue = () => {
    if (!inputElRef.current)
      return void 0;
    return inputElRef.current.value;
  };
  const isInputHasValue = () => {
    if (type === "datepicker" && Array.isArray(value) && value.length === 0) {
      return false;
    }
    const domValue2 = getDomValue();
    return typeof value === "undefined" ? domValue2 || domValue2 === 0 : value || value === 0;
  };
  const validateInput = () => {
    if (!f7 || !inputElRef.current)
      return;
    const validity = inputElRef.current.validity;
    if (!validity)
      return;
    if (!validity.valid) {
      if (onValidate)
        onValidate(false);
      if (inputInvalid !== true) {
        setInputInvalid(true);
      }
    } else {
      if (onValidate)
        onValidate(true);
      if (inputInvalid !== false) {
        setInputInvalid(false);
      }
    }
  };
  const onTextareaResize = (event) => {
    emit(props, "textareaResize", event);
  };
  const onInputNotEmpty = (event) => {
    emit(props, "inputNotEmpty", event);
  };
  const onInputEmpty = (event) => {
    emit(props, "inputEmpty", event);
  };
  const onInputClear = (event) => {
    emit(props, "inputClear", event);
  };
  const onInput = function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    emit(props, "input", ...args);
    if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && inputElRef.current) {
      validateInput();
    }
  };
  const onFocus = function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    emit(props, "focus", ...args);
    setInputFocused(true);
  };
  const onBlur = function() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    emit(props, "blur", ...args);
    if ((validate || validate === "" || validateOnBlur || validateOnBlur === "") && inputElRef.current) {
      validateInput();
    }
    setInputFocused(false);
  };
  const onChange = function() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    emit(props, "change", ...args);
    if (type === "texteditor") {
      emit(props, "textEditorChange", args[1]);
    }
  };
  (0, import_react56.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onMount = () => {
    f7ready(() => {
      if (type === "range" || type === "toggle")
        return;
      if (!inputElRef.current)
        return;
      inputElRef.current.addEventListener("input:notempty", onInputNotEmpty, false);
      if (type === "textarea" && resizable) {
        inputElRef.current.addEventListener("textarea:resize", onTextareaResize, false);
      }
      if (clearButton) {
        inputElRef.current.addEventListener("input:empty", onInputEmpty, false);
        inputElRef.current.addEventListener("input:clear", onInputClear, false);
      }
      if (type === "datepicker") {
        f7Calendar.current = f7.calendar.create({
          inputEl: inputElRef.current,
          value,
          on: {
            change(calendar, calendarValue) {
              emit(props, "calendarChange", calendarValue);
            }
          },
          ...calendarParams || {}
        });
      }
      if (type === "colorpicker") {
        f7ColorPicker.current = f7.colorPicker.create({
          inputEl: inputElRef.current,
          value,
          on: {
            change(colorPicker, colorPickerValue) {
              emit(props, "colorPickerChange", colorPickerValue);
            }
          },
          ...colorPickerParams || {}
        });
      }
      f7.input.checkEmptyState(inputElRef.current);
      if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && (typeof value !== "undefined" && value !== null && value !== "" || typeof defaultValue !== "undefined" && defaultValue !== null && defaultValue !== "")) {
        setTimeout(() => {
          validateInput();
        }, 0);
      }
      if (resizable) {
        f7.input.resizeTextarea(inputElRef.current);
      }
    });
  };
  const onDestroy = () => {
    if (type === "range" || type === "toggle")
      return;
    if (!inputElRef.current)
      return;
    inputElRef.current.removeEventListener("input:notempty", onInputNotEmpty, false);
    if (type === "textarea" && resizable) {
      inputElRef.current.removeEventListener("textarea:resize", onTextareaResize, false);
    }
    if (clearButton) {
      inputElRef.current.removeEventListener("input:empty", onInputEmpty, false);
      inputElRef.current.removeEventListener("input:clear", onInputClear, false);
    }
    if (f7Calendar.current && f7Calendar.current.destroy) {
      f7Calendar.current.destroy();
      f7Calendar.current = null;
    }
    if (f7ColorPicker.current && f7ColorPicker.current.destroy) {
      f7ColorPicker.current.destroy();
      f7ColorPicker.current = null;
    }
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (!f7)
      return;
    if (updateInputOnDidUpdate.current) {
      if (!inputElRef.current)
        return;
      updateInputOnDidUpdate.current = false;
      f7.input.checkEmptyState(inputElRef.current);
      if (validate && !validateOnBlur) {
        validateInput();
      }
      if (resizable) {
        f7.input.resizeTextarea(inputElRef.current);
      }
    }
  });
  watchProp(colorPickerParams, (newValue) => {
    if (!f7 || !f7ColorPicker.current)
      return;
    extend(f7ColorPicker.current.params, newValue || {});
  });
  watchProp(calendarParams, (newValue) => {
    if (!f7 || !f7Calendar.current)
      return;
    extend(f7Calendar.current.params, newValue || {});
  });
  watchProp(value, (newValue) => {
    if (type === "range" || type === "toggle")
      return;
    if (!f7)
      return;
    updateInputOnDidUpdate.current = true;
    if (f7Calendar.current) {
      f7Calendar.current.setValue(newValue);
    }
    if (f7ColorPicker.current) {
      f7ColorPicker.current.setValue(newValue);
    }
  });
  const domValue = getDomValue();
  const inputHasValue = isInputHasValue();
  const slots = getSlots(props);
  let inputEl;
  const createInput = (InputTag, children) => {
    const needsValue = type !== "file" && type !== "datepicker" && type !== "colorpicker";
    const needsType = InputTag === "input";
    let inputType = type;
    if (inputType === "datepicker" || inputType === "colorpicker") {
      inputType = "text";
    }
    const inputClassName = classNames(!wrap && className, {
      resizable: inputType === "textarea" && resizable,
      "no-store-data": noFormStoreData || noStoreData || ignoreStoreData,
      "input-invalid": errorMessage && errorMessageForce || inputInvalid,
      "input-with-value": inputHasValue,
      "input-focused": inputFocused
    });
    let inputValue;
    if (needsValue) {
      if (typeof value !== "undefined")
        inputValue = value;
      else
        inputValue = domValue;
    }
    const valueProps = {};
    if (type !== "datepicker" && type !== "colorpicker") {
      if ("value" in props)
        valueProps.value = inputValue;
      if ("defaultValue" in props)
        valueProps.defaultValue = defaultValue;
    }
    return import_react56.default.createElement(InputTag, _extends46({
      ref: inputElRef,
      style: inputStyle,
      name: name2,
      type: needsType ? inputType : void 0,
      placeholder,
      inputMode: inputmode,
      id: inputId,
      size,
      accept,
      autoComplete: autocomplete,
      autoCorrect: autocorrect,
      autoCapitalize: autocapitalize,
      spellCheck: spellcheck,
      autoFocus: autofocus,
      autoSave: autosave,
      checked,
      disabled,
      max,
      maxLength: maxlength,
      min,
      minLength: minlength,
      step,
      multiple,
      readOnly: readonly,
      required,
      pattern,
      validate: typeof validate === "string" && validate.length ? validate : void 0,
      "data-validate": validate === true || validate === "" || validateOnBlur === true || validateOnBlur === "" ? true : void 0,
      "data-validate-on-blur": validateOnBlur === true || validateOnBlur === "" ? true : void 0,
      tabIndex: tabindex,
      "data-error-message": errorMessageForce ? void 0 : errorMessage,
      className: inputClassName,
      onFocus,
      onBlur,
      onInput,
      onChange
    }, valueProps), children);
  };
  if (type === "select" || type === "textarea" || type === "file") {
    if (type === "select") {
      inputEl = createInput("select", slots.default);
    } else if (type === "file") {
      inputEl = createInput("input");
    } else {
      inputEl = createInput("textarea");
    }
  } else if (slots.default && slots.default.length > 0 || !type) {
    inputEl = slots.default;
  } else if (type === "toggle") {
    inputEl = import_react56.default.createElement(toggle_default, {
      checked,
      readonly,
      name: name2,
      value,
      disabled,
      id: inputId,
      onChange
    });
  } else if (type === "range") {
    inputEl = import_react56.default.createElement(range_default, {
      value,
      disabled,
      min,
      max,
      step,
      name: name2,
      id: inputId,
      input: true,
      onRangeChange: onChange
    });
  } else if (type === "texteditor") {
    inputEl = import_react56.default.createElement(text_editor_default, _extends46({
      value,
      resizable,
      placeholder,
      onTextEditorFocus: onFocus,
      onTextEditorBlur: onBlur,
      onTextEditorInput: onInput,
      onTextEditorChange: onChange
    }, textEditorParams));
  } else {
    inputEl = createInput("input");
  }
  if (wrap) {
    const wrapClasses = classNames(className, "input", {
      "input-outline": outline,
      "input-dropdown": dropdown === "auto" ? type === "select" : dropdown,
      "input-invalid": errorMessage && errorMessageForce || inputInvalid
    }, colorClasses(props));
    return import_react56.default.createElement("div", _extends46({
      id,
      className: wrapClasses,
      style,
      ref: elRef
    }, extraAttrs), inputEl, (errorMessage || slots["error-message"] && slots["error-message"].length) && errorMessageForce && import_react56.default.createElement("div", {
      className: "input-error-message"
    }, errorMessage, slots["error-message"]), clearButton && import_react56.default.createElement("span", {
      className: "input-clear-button"
    }), (info || slots.info && slots.info.length) && import_react56.default.createElement("div", {
      className: "input-info"
    }, info, slots.info));
  }
  return inputEl;
});
Input.displayName = "f7-input";
var input_default = Input;

// node_modules/framework7-react/components/link.js
var import_react59 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/tabbar-context.js
var import_react57 = __toESM(require_react(), 1);
var TabbarContext = import_react57.default.createContext({
  tabbarHasLabels: false
});

// node_modules/framework7-react/shared/use-smart-select.js
var import_react58 = __toESM(require_react(), 1);
var useSmartSelect = (smartSelect, smartSelectParams, f7SmartSelect, getEl) => {
  const onMount = () => {
    f7ready(() => {
      if (smartSelect) {
        const ssParams = extend({
          el: getEl()
        }, smartSelectParams || {});
        f7SmartSelect.current = f7.smartSelect.create(ssParams);
      }
    });
  };
  const onDestroy = () => {
    if (f7SmartSelect.current && f7SmartSelect.current.destroy) {
      f7SmartSelect.current.destroy();
    }
    f7SmartSelect.current = null;
  };
  (0, import_react58.useEffect)(() => {
    onMount();
    return onDestroy;
  }, []);
};

// node_modules/framework7-react/components/link.js
function _extends47() {
  _extends47 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends47.apply(this, arguments);
}
var Link = (0, import_react59.forwardRef)((props, ref) => {
  const f7SmartSelect = (0, import_react59.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    noLinkClass,
    text,
    tabLink,
    tabLinkActive,
    tabbarLabel,
    iconOnly,
    badge,
    badgeColor,
    href = "#",
    target,
    smartSelect,
    smartSelectParams
  } = props;
  const tabbarContext = (0, import_react59.useContext)(TabbarContext);
  const isTabbarLabel = tabbarLabel || tabbarContext.tabbarHasLabels;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react59.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react59.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7SmartSelect: () => f7SmartSelect.current
  }));
  useTooltip(elRef, props);
  useRouteProps(elRef, props);
  useSmartSelect(smartSelect, smartSelectParams, f7SmartSelect, () => {
    return elRef.current;
  });
  let textEl;
  let badgeEl;
  if (text) {
    if (badge)
      badgeEl = import_react59.default.createElement(badge_default, {
        color: badgeColor
      }, badge);
    textEl = import_react59.default.createElement("span", {
      className: isTabbarLabel ? "tabbar-label" : ""
    }, text, badgeEl);
  }
  const iconEl = useIcon(props);
  let iconOnlyComputed;
  if (iconOnly || !text && children && children.length === 0 || !text && !children) {
    iconOnlyComputed = true;
  } else {
    iconOnlyComputed = false;
  }
  const classes = classNames(className, {
    link: !(noLinkClass || isTabbarLabel),
    "icon-only": iconOnlyComputed,
    "tab-link": tabLink || tabLink === "",
    "tab-link-active": tabLinkActive,
    "smart-select": smartSelect
  }, colorClasses(props), routerClasses(props), actionsClasses(props));
  let hrefComputed = href;
  if (href === true)
    hrefComputed = "#";
  if (href === false)
    hrefComputed = void 0;
  const attrs = {
    href: hrefComputed,
    target,
    "data-tab": isStringProp(tabLink) && tabLink || void 0,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return import_react59.default.createElement("a", _extends47({
    ref: elRef,
    id,
    style,
    className: classes
  }, attrs, extraAttrs, {
    onClick
  }), iconEl, textEl, children);
});
Link.displayName = "f7-link";
var link_default = Link;

// node_modules/framework7-react/components/list-button.js
var import_react60 = __toESM(require_react(), 1);
function _extends48() {
  _extends48 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends48.apply(this, arguments);
}
var ListButton = (0, import_react60.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    title,
    text,
    tabLink,
    tabLinkActive,
    link,
    href,
    target
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react60.useRef)(null);
  const linkElRef = (0, import_react60.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react60.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(linkElRef, props);
  useRouteProps(linkElRef, props);
  const linkAttrs = {
    href: typeof link === "boolean" && typeof href === "boolean" ? "#" : link || href,
    target,
    "data-tab": isStringProp(tabLink) && tabLink,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  const linkClasses = classNames({
    "list-button": true,
    "tab-link": tabLink || tabLink === "",
    "tab-link-active": tabLinkActive,
    ...colorClasses(props),
    ...routerClasses(props),
    ...actionsClasses(props)
  });
  return import_react60.default.createElement("li", _extends48({
    id,
    style,
    className,
    ref: elRef
  }, extraAttrs), import_react60.default.createElement("a", _extends48({
    className: linkClasses
  }, linkAttrs, {
    onClick,
    ref: linkElRef
  }), title, text, children));
});
ListButton.displayName = "f7-list-button";
var list_button_default = ListButton;

// node_modules/framework7-react/components/list-group.js
var import_react62 = __toESM(require_react(), 1);

// node_modules/framework7-react/shared/list-context.js
var import_react61 = __toESM(require_react(), 1);
var ListContext = import_react61.default.createContext({
  listIsMedia: false,
  listIsSimple: false,
  listIsSortable: false,
  listIsSortableOpposite: false
});

// node_modules/framework7-react/components/list-group.js
function _extends49() {
  _extends49 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends49.apply(this, arguments);
}
var ListGroup = (0, import_react62.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    simpleList,
    mediaList,
    sortable,
    sortableOpposite,
    sortableTapHold,
    sortableMoveElements
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const listContext = (0, import_react62.useContext)(ListContext);
  const elRef = (0, import_react62.useRef)(null);
  (0, import_react62.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "list-group", {
    "media-list": mediaList,
    sortable,
    "sortable-tap-hold": sortableTapHold,
    "sortable-opposite": sortableOpposite
  }, colorClasses(props));
  return import_react62.default.createElement("div", _extends49({
    id,
    style,
    className: classes,
    "data-sortable-move-elements": typeof sortableMoveElements !== "undefined" ? sortableMoveElements.toString() : void 0,
    ref: elRef
  }, extraAttrs), import_react62.default.createElement("ul", null, import_react62.default.createElement(ListContext.Provider, {
    value: {
      listIsMedia: mediaList || listContext.listIsMedia,
      listIsSimple: simpleList || listContext.listIsSimple,
      listIsSortable: sortable || listContext.listIsSortable,
      listIsSortableOpposite: sortableOpposite || listContext.listIsSortableOpposite
    }
  }, children)));
});
ListGroup.displayName = "f7-list-group";
var list_group_default = ListGroup;

// node_modules/framework7-react/components/list-index.js
var import_react63 = __toESM(require_react(), 1);
function _extends50() {
  _extends50 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends50.apply(this, arguments);
}
var ListIndex = (0, import_react63.forwardRef)((props, ref) => {
  const f7ListIndex = (0, import_react63.useRef)(null);
  const {
    className,
    id,
    style,
    children,
    init = true,
    listEl,
    indexes = "auto",
    scrollList = true,
    label = false,
    iosItemHeight = 14,
    mdItemHeight = 14,
    auroraItemHeight = 14
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react63.useRef)(null);
  const update = () => {
    if (!f7ListIndex.current)
      return;
    f7ListIndex.current.update();
  };
  const scrollListToIndex = (indexContent) => {
    if (!f7ListIndex.current)
      return;
    f7ListIndex.current.scrollListToIndex(indexContent);
  };
  (0, import_react63.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7ListIndex: () => f7ListIndex.current,
    update,
    scrollListToIndex
  }));
  watchProp(indexes, (newValue) => {
    if (!f7ListIndex.current)
      return;
    f7ListIndex.current.params.indexes = newValue;
    update();
  });
  const onMount = () => {
    if (!init)
      return;
    f7ready(() => {
      f7ListIndex.current = f7.listIndex.create({
        el: elRef.current,
        listEl,
        indexes,
        iosItemHeight,
        mdItemHeight,
        auroraItemHeight,
        scrollList,
        label,
        on: {
          select(index, itemContent, itemIndex) {
            emit(props, "listIndexSelect", itemContent, itemIndex);
          }
        }
      });
    });
  };
  const onDestroy = () => {
    if (f7ListIndex.current && f7ListIndex.current.destroy) {
      f7ListIndex.current.destroy();
    }
    f7ListIndex.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const classes = classNames(className, "list-index", colorClasses(props));
  return import_react63.default.createElement("div", _extends50({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
ListIndex.displayName = "f7-list-index";
var list_index_default = ListIndex;

// node_modules/framework7-react/components/list-input.js
var import_react64 = __toESM(require_react(), 1);
function _extends51() {
  _extends51 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends51.apply(this, arguments);
}
var ListInput = (0, import_react64.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    sortable,
    media,
    dropdown = "auto",
    wrap = true,
    input: renderInput = true,
    type = "text",
    name: name2,
    value,
    defaultValue,
    inputmode,
    readonly,
    required,
    disabled,
    placeholder,
    inputId,
    size,
    accept,
    autocomplete,
    autocorrect,
    autocapitalize,
    spellcheck,
    autofocus,
    autosave,
    max,
    min,
    step,
    maxlength,
    minlength,
    multiple,
    inputStyle,
    pattern,
    validate,
    validateOnBlur,
    onValidate,
    tabindex,
    resizable,
    clearButton,
    noFormStoreData,
    noStoreData,
    ignoreStoreData,
    errorMessage,
    errorMessageForce,
    info,
    outline,
    label,
    inlineLabel,
    floatingLabel,
    calendarParams,
    colorPickerParams,
    textEditorParams
  } = props;
  const [inputInvalid, setInputInvalid] = (0, import_react64.useState)(false);
  const [inputFocused, setInputFocused] = (0, import_react64.useState)(false);
  const listContext = (0, import_react64.useContext)(ListContext);
  const {
    listIsSortable = false
  } = listContext || {};
  const extraAttrs = getExtraAttrs(props);
  const f7Calendar = (0, import_react64.useRef)(null);
  const f7ColorPicker = (0, import_react64.useRef)(null);
  const elRef = (0, import_react64.useRef)(null);
  const inputElRef = (0, import_react64.useRef)(null);
  const itemContentElRef = (0, import_react64.useRef)(null);
  const updateInputOnDidUpdate = (0, import_react64.useRef)(false);
  const getDomValue = () => {
    if (!inputElRef.current)
      return void 0;
    return inputElRef.current.value;
  };
  const isInputHasValue = () => {
    if (type === "datepicker" && Array.isArray(value) && value.length === 0) {
      return false;
    }
    const domValue2 = getDomValue();
    return typeof value === "undefined" ? domValue2 || domValue2 === 0 : value || value === 0;
  };
  const validateInput = () => {
    if (!f7 || !inputElRef.current)
      return;
    const validity = inputElRef.current.validity;
    if (!validity)
      return;
    if (!validity.valid) {
      if (onValidate)
        onValidate(false);
      if (inputInvalid !== true) {
        setInputInvalid(true);
      }
    } else {
      if (onValidate)
        onValidate(true);
      if (inputInvalid !== false) {
        setInputInvalid(false);
      }
    }
  };
  const onTextareaResize = (event) => {
    emit(props, "textareaResize", event);
  };
  const onInputNotEmpty = (event) => {
    emit(props, "inputNotEmpty", event);
  };
  const onInputEmpty = (event) => {
    emit(props, "inputEmpty", event);
  };
  const onInputClear = (event) => {
    emit(props, "inputClear", event);
  };
  const onInput = function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    emit(props, "input", ...args);
    if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && inputElRef.current) {
      validateInput(inputElRef.current);
    }
  };
  const onFocus = function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    emit(props, "focus", ...args);
    setInputFocused(true);
  };
  const onBlur = function() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    emit(props, "blur", ...args);
    if ((validate || validate === "" || validateOnBlur || validateOnBlur === "") && inputElRef.current) {
      validateInput(inputElRef.current);
    }
    setInputFocused(false);
  };
  const onChange = function() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    emit(props, "change", ...args);
    if (type === "texteditor") {
      emit(props, "textEditorChange", args[0]);
    }
  };
  (0, import_react64.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const onMount = () => {
    if (!elRef.current && !itemContentElRef.current)
      return;
    f7ready(() => {
      if (!inputElRef.current)
        return;
      inputElRef.current.addEventListener("input:notempty", onInputNotEmpty, false);
      inputElRef.current.addEventListener("textarea:resize", onTextareaResize, false);
      inputElRef.current.addEventListener("input:empty", onInputEmpty, false);
      inputElRef.current.addEventListener("input:clear", onInputClear, false);
      if (type === "datepicker") {
        f7Calendar.current = f7.calendar.create({
          inputEl: inputElRef.current,
          value,
          on: {
            change(calendar, calendarValue) {
              emit(props, "calendarChange", calendarValue);
            }
          },
          ...calendarParams || {}
        });
      }
      if (type === "colorpicker") {
        f7ColorPicker.current = f7.colorPicker.create({
          inputEl: inputElRef.current,
          value,
          on: {
            change(colorPicker, colorPickerValue) {
              emit(props, "colorpicker:change colorPickerChange", colorPickerValue);
            }
          },
          ...colorPickerParams || {}
        });
      }
      if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && (typeof value !== "undefined" && value !== null && value !== "" || typeof defaultValue !== "undefined" && defaultValue !== null && defaultValue !== "")) {
        setTimeout(() => {
          validateInput();
        }, 0);
      }
      if (type === "textarea" && resizable) {
        f7.input.resizeTextarea(inputElRef.current);
      }
    });
  };
  const onDestroy = () => {
    if (inputElRef.current) {
      inputElRef.current.removeEventListener("input:notempty", onInputNotEmpty, false);
      inputElRef.current.removeEventListener("textarea:resize", onTextareaResize, false);
      inputElRef.current.removeEventListener("input:empty", onInputEmpty, false);
      inputElRef.current.removeEventListener("input:clear", onInputClear, false);
    }
    if (f7Calendar.current && f7Calendar.current.destroy) {
      f7Calendar.current.destroy();
      f7Calendar.current = null;
    }
    if (f7ColorPicker.current && f7ColorPicker.current.destroy) {
      f7ColorPicker.current.destroy();
      f7ColorPicker.current = null;
    }
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (!f7)
      return;
    if (updateInputOnDidUpdate.current) {
      if (!inputElRef.current)
        return;
      updateInputOnDidUpdate.current = false;
      if (validate && !validateOnBlur) {
        validateInput();
      }
      if (type === "textarea" && resizable) {
        f7.input.resizeTextarea(inputElRef.current);
      }
    }
  });
  watchProp(colorPickerParams, (newValue) => {
    if (!f7 || !f7ColorPicker.current)
      return;
    extend(f7ColorPicker.current.params, newValue || {});
  });
  watchProp(calendarParams, (newValue) => {
    if (!f7 || !f7Calendar.current)
      return;
    extend(f7Calendar.current.params, newValue || {});
  });
  watchProp(value, (newValue) => {
    if (!f7)
      return;
    updateInputOnDidUpdate.current = true;
    if (f7Calendar.current) {
      f7Calendar.current.setValue(newValue);
    }
    if (f7ColorPicker.current) {
      f7ColorPicker.current.setValue(newValue);
    }
  });
  const slots = getSlots(props);
  const domValue = getDomValue();
  const inputHasValue = isInputHasValue();
  const isSortableComputed = sortable === true || sortable === false ? sortable : listIsSortable;
  let inputEl;
  const createInput = (InputTag, children) => {
    const needsValue = type !== "file" && type !== "datepicker" && type !== "colorpicker";
    const needsType = InputTag === "input";
    let inputType = type;
    if (inputType === "datepicker" || inputType === "colorpicker") {
      inputType = "text";
    }
    const inputClassName = classNames({
      resizable: inputType === "textarea" && resizable,
      "no-store-data": noFormStoreData || noStoreData || ignoreStoreData,
      "input-invalid": errorMessage && errorMessageForce || inputInvalid,
      "input-with-value": inputHasValue,
      "input-focused": inputFocused
    });
    let inputValue;
    if (needsValue) {
      if (typeof value !== "undefined")
        inputValue = value;
      else
        inputValue = domValue;
    }
    const valueProps = {};
    if (type !== "datepicker" && type !== "colorpicker") {
      if ("value" in props)
        valueProps.value = inputValue;
      if ("defaultValue" in props)
        valueProps.defaultValue = defaultValue;
    }
    return import_react64.default.createElement(InputTag, _extends51({
      ref: inputElRef,
      style: inputStyle,
      name: name2,
      type: needsType ? inputType : void 0,
      placeholder,
      inputMode: inputmode,
      id: inputId,
      size,
      accept,
      autoComplete: autocomplete,
      autoCorrect: autocorrect,
      autoCapitalize: autocapitalize,
      spellCheck: spellcheck,
      autoFocus: autofocus,
      autoSave: autosave,
      disabled,
      max,
      maxLength: maxlength,
      min,
      minLength: minlength,
      step,
      multiple,
      readOnly: readonly,
      required,
      pattern,
      validate: typeof validate === "string" && validate.length ? validate : void 0,
      "data-validate": validate === true || validate === "" || validateOnBlur === true || validateOnBlur === "" ? true : void 0,
      "data-validate-on-blur": validateOnBlur === true || validateOnBlur === "" ? true : void 0,
      tabIndex: tabindex,
      "data-error-message": errorMessageForce ? void 0 : errorMessage,
      className: inputClassName,
      onFocus,
      onBlur,
      onInput,
      onChange
    }, valueProps), children);
  };
  if (renderInput) {
    if (type === "select" || type === "textarea" || type === "file") {
      if (type === "select") {
        inputEl = createInput("select", slots.default);
      } else if (type === "file") {
        inputEl = createInput("input");
      } else {
        inputEl = createInput("textarea");
      }
    } else if (type === "texteditor") {
      inputEl = import_react64.default.createElement(text_editor_default, _extends51({
        value,
        resizable,
        placeholder,
        onTextEditorFocus: onFocus,
        onTextEditorBlur: onBlur,
        onTextEditorInput: onInput,
        onTextEditorChange: onChange
      }, textEditorParams || {}));
    } else {
      inputEl = createInput("input");
    }
  }
  const hasErrorMessage = !!errorMessage || slots["error-message"] && slots["error-message"].length;
  const ItemContent = import_react64.default.createElement("div", {
    ref: itemContentElRef,
    className: classNames("item-content item-input", !wrap && className, !wrap && {
      disabled
    }, !wrap && colorClasses(props), {
      "inline-label": inlineLabel,
      "item-input-outline": outline,
      "item-input-focused": inputFocused,
      "item-input-with-info": !!info || slots.info && slots.info.length,
      "item-input-with-value": inputHasValue,
      "item-input-with-error-message": hasErrorMessage && errorMessageForce || inputInvalid,
      "item-input-invalid": hasErrorMessage && errorMessageForce || inputInvalid
    })
  }, slots["content-start"], (media || slots.media) && import_react64.default.createElement("div", {
    className: "item-media"
  }, media && import_react64.default.createElement("img", {
    src: media
  }), slots.media), import_react64.default.createElement("div", {
    className: "item-inner"
  }, slots["inner-start"], (label || slots.label) && import_react64.default.createElement("div", {
    className: classNames("item-title item-label", {
      "item-floating-label": floatingLabel
    })
  }, label, slots.label), import_react64.default.createElement("div", {
    className: classNames("item-input-wrap", {
      "input-dropdown": dropdown === "auto" ? type === "select" : dropdown
    })
  }, inputEl, slots.input, hasErrorMessage && errorMessageForce && import_react64.default.createElement("div", {
    className: "item-input-error-message"
  }, errorMessage, slots["error-message"]), clearButton && import_react64.default.createElement("span", {
    className: "input-clear-button"
  }), (info || slots.info) && import_react64.default.createElement("div", {
    className: "item-input-info"
  }, info, slots.info)), slots.inner, slots["inner-end"]), slots.content, slots["content-end"]);
  if (!wrap) {
    return ItemContent;
  }
  return import_react64.default.createElement("li", _extends51({
    ref: elRef,
    id,
    style,
    className: classNames(className, {
      disabled
    }, colorClasses(props))
  }, extraAttrs), slots["root-start"], ItemContent, isSortableComputed && import_react64.default.createElement("div", {
    className: "sortable-handler"
  }), slots.root, slots["root-end"]);
});
ListInput.displayName = "f7-list-input";
var list_input_default = ListInput;

// node_modules/framework7-react/components/list-item-cell.js
var import_react65 = __toESM(require_react(), 1);
function _extends52() {
  _extends52 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends52.apply(this, arguments);
}
var ListItemCell = (0, import_react65.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react65.useRef)(null);
  (0, import_react65.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "item-cell", colorClasses(props));
  return import_react65.default.createElement("div", _extends52({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
ListItemCell.displayName = "f7-list-item-cell";
var list_item_cell_default = ListItemCell;

// node_modules/framework7-react/components/list-item-content.js
var import_react66 = __toESM(require_react(), 1);
var ListItemContent = (props) => {
  const {
    indeterminate,
    radio,
    checkbox,
    value,
    name: name2,
    readonly,
    disabled,
    checked,
    defaultChecked,
    required,
    media,
    header,
    footer,
    title,
    subtitle,
    text,
    after,
    badge,
    badgeColor,
    radioIcon,
    swipeout,
    sortable,
    accordionItem,
    onChange,
    onClick,
    isMediaComputed,
    isSortableComputed,
    isSortableOppositeComputed,
    slots
  } = props;
  const inputElRef = (0, import_react66.useRef)(null);
  (0, import_react66.useEffect)(() => {
    if (inputElRef.current) {
      inputElRef.current.indeterminate = !!indeterminate;
    }
  }, [indeterminate]);
  let titleEl;
  let afterWrapEl;
  let afterEl;
  let badgeEl;
  let innerEl;
  let titleRowEl;
  let subtitleEl;
  let textEl;
  let mediaEl;
  let inputEl;
  let inputIconEl;
  let headerEl;
  let footerEl;
  if (radio || checkbox) {
    inputEl = import_react66.default.createElement("input", {
      ref: inputElRef,
      value,
      name: name2,
      checked,
      defaultChecked,
      readOnly: readonly,
      disabled,
      required,
      type: radio ? "radio" : "checkbox",
      onChange
    });
    inputIconEl = import_react66.default.createElement("i", {
      className: `icon icon-${radio ? "radio" : "checkbox"}`
    });
  }
  if (media || slots.media) {
    let mediaImgEl;
    if (media) {
      mediaImgEl = import_react66.default.createElement("img", {
        src: media
      });
    }
    mediaEl = import_react66.default.createElement("div", {
      className: "item-media"
    }, mediaImgEl, slots.media);
  }
  if (header || slots.header) {
    headerEl = import_react66.default.createElement("div", {
      className: "item-header"
    }, header, slots.header);
  }
  if (footer || slots.footer) {
    footerEl = import_react66.default.createElement("div", {
      className: "item-footer"
    }, footer, slots.footer);
  }
  if (title || slots.title || !isMediaComputed && headerEl || !isMediaComputed && footerEl) {
    titleEl = import_react66.default.createElement("div", {
      className: "item-title"
    }, !isMediaComputed && headerEl, title, slots.title, !isMediaComputed && footerEl);
  }
  if (subtitle || slots.subtitle) {
    subtitleEl = import_react66.default.createElement("div", {
      className: "item-subtitle"
    }, subtitle, slots.subtitle);
  }
  if (text || slots.text) {
    textEl = import_react66.default.createElement("div", {
      className: "item-text"
    }, text, slots.text);
  }
  if (after || badge || slots.after) {
    if (after) {
      afterEl = import_react66.default.createElement("span", null, after);
    }
    if (badge) {
      badgeEl = import_react66.default.createElement(badge_default, {
        color: badgeColor
      }, badge);
    }
    afterWrapEl = import_react66.default.createElement("div", {
      className: "item-after"
    }, slots["after-start"], afterEl, badgeEl, slots.after, slots["after-end"]);
  }
  if (isMediaComputed) {
    titleRowEl = import_react66.default.createElement("div", {
      className: "item-title-row"
    }, slots["before-title"], titleEl, slots["after-title"], afterWrapEl);
    innerEl = import_react66.default.createElement("div", {
      className: "item-inner"
    }, slots["inner-start"], headerEl, titleRowEl, subtitleEl, textEl, swipeout || accordionItem ? null : slots.default, slots.inner, footerEl, slots["inner-end"]);
  } else {
    innerEl = import_react66.default.createElement("div", {
      className: "item-inner"
    }, slots["inner-start"], slots["before-title"], titleEl, slots["after-title"], afterWrapEl, swipeout || accordionItem ? null : slots.default, slots.inner, slots["inner-end"]);
  }
  const ItemContentTag = checkbox || radio ? "label" : "div";
  const classes = classNames("item-content", {
    "item-checkbox": checkbox,
    "item-radio": radio,
    "item-radio-icon-start": radio && radioIcon === "start",
    "item-radio-icon-end": radio && radioIcon === "end"
  }, colorClasses(props));
  return import_react66.default.createElement(ItemContentTag, {
    className: classes,
    onClick
  }, isSortableComputed && sortable !== false && isSortableOppositeComputed && import_react66.default.createElement("div", {
    className: "sortable-handler"
  }), slots["content-start"], inputEl, inputIconEl, mediaEl, innerEl, slots.content, slots["content-end"]);
};
ListItemContent.displayName = "f7-list-item-content";
var list_item_content_default = ListItemContent;

// node_modules/framework7-react/components/list-item-row.js
var import_react67 = __toESM(require_react(), 1);
function _extends53() {
  _extends53 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends53.apply(this, arguments);
}
var ListItemRow = (0, import_react67.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react67.useRef)(null);
  (0, import_react67.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "item-row", colorClasses(props));
  return import_react67.default.createElement("div", _extends53({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
ListItemRow.displayName = "f7-list-item-row";
var list_item_row_default = ListItemRow;

// node_modules/framework7-react/components/list-item.js
var import_react68 = __toESM(require_react(), 1);
function _extends54() {
  _extends54 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends54.apply(this, arguments);
}
var ListItem = (0, import_react68.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    title,
    link,
    target,
    tabLink,
    tabLinkActive,
    selected,
    mediaItem,
    mediaList,
    divider,
    groupTitle,
    swipeout,
    swipeoutOpened,
    sortable,
    sortableOpposite,
    accordionItem,
    accordionItemOpened,
    smartSelect,
    smartSelectParams,
    noChevron,
    chevronCenter,
    checkbox,
    radio,
    disabled,
    virtualListIndex,
    href
  } = props;
  const listContext = (0, import_react68.useContext)(ListContext);
  const {
    listIsMedia = false,
    listIsSortable = false,
    listIsSortableOpposite = false,
    listIsSimple = false
  } = listContext || {};
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react68.useRef)(null);
  const linkElRef = (0, import_react68.useRef)(null);
  const f7SmartSelect = (0, import_react68.useRef)(null);
  const onClick = (event) => {
    if (event.target.tagName.toLowerCase() !== "input") {
      emit(props, "click", event);
    }
  };
  const onSwipeoutOverswipeEnter = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutOverswipeEnter");
  };
  const onSwipeoutOverswipeExit = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutOverswipeExit");
  };
  const onSwipeoutDeleted = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutDeleted");
  };
  const onSwipeoutDelete = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutDelete");
  };
  const onSwipeoutClose = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutClose");
  };
  const onSwipeoutClosed = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutClosed");
  };
  const onSwipeoutOpen = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutOpen");
  };
  const onSwipeoutOpened = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeoutOpened");
  };
  const onSwipeout = (el, progress) => {
    if (elRef.current !== el)
      return;
    emit(props, "swipeout", progress);
  };
  const onAccBeforeClose = (el, prevent) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionBeforeClose", prevent);
  };
  const onAccClose = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionClose");
  };
  const onAccClosed = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionClosed");
  };
  const onAccBeforeOpen = (el, prevent) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionBeforeOpen", prevent);
  };
  const onAccOpen = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionOpen");
  };
  const onAccOpened = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "accordionOpened");
  };
  const onChange = (event) => {
    emit(props, "change", event);
  };
  (0, import_react68.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7SmartSelect: () => f7SmartSelect.current
  }));
  useTooltip(elRef, props);
  useRouteProps(linkElRef, props);
  watchProp(swipeoutOpened, (newValue) => {
    if (!swipeout || !elRef.current || !f7)
      return;
    if (newValue) {
      f7.swipeout.open(elRef.current);
    } else {
      f7.swipeout.close(elRef.current);
    }
  });
  const attachEvents = () => {
    f7ready(() => {
      if (swipeout) {
        f7.on("swipeoutOpen", onSwipeoutOpen);
        f7.on("swipeoutOpened", onSwipeoutOpened);
        f7.on("swipeoutClose", onSwipeoutClose);
        f7.on("swipeoutClosed", onSwipeoutClosed);
        f7.on("swipeoutDelete", onSwipeoutDelete);
        f7.on("swipeoutDeleted", onSwipeoutDeleted);
        f7.on("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
        f7.on("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
        f7.on("swipeout", onSwipeout);
      }
      if (accordionItem) {
        f7.on("accordionBeforeOpen", onAccBeforeOpen);
        f7.on("accordionOpen", onAccOpen);
        f7.on("accordionOpened", onAccOpened);
        f7.on("accordionBeforeClose", onAccBeforeClose);
        f7.on("accordionClose", onAccClose);
        f7.on("accordionClosed", onAccClosed);
      }
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("swipeoutOpen", onSwipeoutOpen);
    f7.off("swipeoutOpened", onSwipeoutOpened);
    f7.off("swipeoutClose", onSwipeoutClose);
    f7.off("swipeoutClosed", onSwipeoutClosed);
    f7.off("swipeoutDelete", onSwipeoutDelete);
    f7.off("swipeoutDeleted", onSwipeoutDeleted);
    f7.off("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
    f7.off("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
    f7.off("swipeout", onSwipeout);
    f7.off("accordionBeforeOpen", onAccBeforeOpen);
    f7.off("accordionOpen", onAccOpen);
    f7.off("accordionOpened", onAccOpened);
    f7.off("accordionBeforeClose", onAccBeforeClose);
    f7.off("accordionClose", onAccClose);
    f7.off("accordionClosed", onAccClosed);
  };
  useSmartSelect(smartSelect, smartSelectParams, f7SmartSelect, () => elRef.current.querySelector("a.smart-select"));
  useIsomorphicLayoutEffect(() => {
    f7ready(() => {
      if (swipeout && swipeoutOpened) {
        f7.swipeout.open(elRef.current);
      }
    });
  }, []);
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  let linkEl;
  let itemContentEl;
  const isMediaComputed = mediaItem || mediaList || listIsMedia;
  const isSortableComputed = sortable === true || sortable === false ? sortable : listIsSortable;
  const isSortableOppositeComputed = isSortableComputed && (sortableOpposite || listIsSortableOpposite);
  if (!listIsSimple) {
    itemContentEl = import_react68.default.createElement(list_item_content_default, _extends54({}, props, {
      slots,
      onChange,
      onClick: link || href || accordionItem || smartSelect ? void 0 : onClick,
      isMediaComputed,
      isSortableComputed,
      isSortableOppositeComputed
    }));
    if (link || href || accordionItem || smartSelect) {
      const linkAttrs = {
        href: link === true ? "" : link || href,
        target,
        "data-tab": isStringProp(tabLink) && tabLink || void 0,
        ...routerAttrs(props),
        ...actionsAttrs(props)
      };
      const linkClasses = classNames({
        "item-link": true,
        "smart-select": smartSelect,
        "tab-link": tabLink || tabLink === "",
        "tab-link-active": tabLinkActive,
        "item-selected": selected
      }, routerClasses(props), actionsClasses(props));
      linkEl = import_react68.default.createElement("a", _extends54({
        ref: linkElRef,
        className: linkClasses
      }, linkAttrs, {
        onClick
      }), itemContentEl);
    }
  }
  const liClasses = classNames(className, {
    "item-divider": divider,
    "list-group-title": groupTitle,
    "media-item": isMediaComputed,
    swipeout,
    "accordion-item": accordionItem,
    "accordion-item-opened": accordionItemOpened,
    disabled: disabled && !(radio || checkbox),
    "no-chevron": noChevron,
    "chevron-center": chevronCenter,
    "disallow-sorting": sortable === false
  }, colorClasses(props));
  if (divider || groupTitle) {
    return import_react68.default.createElement("li", {
      ref: elRef,
      id,
      style,
      className: liClasses,
      "data-virtual-list-index": virtualListIndex,
      onClick
    }, import_react68.default.createElement("span", null, title, children));
  }
  if (listIsSimple) {
    return import_react68.default.createElement("li", {
      ref: elRef,
      id,
      style,
      className: liClasses,
      "data-virtual-list-index": virtualListIndex,
      onClick
    }, title, children);
  }
  const linkItemEl = link || href || smartSelect || accordionItem ? linkEl : itemContentEl;
  return import_react68.default.createElement("li", _extends54({
    ref: elRef,
    id,
    style,
    className: liClasses,
    "data-virtual-list-index": virtualListIndex
  }, extraAttrs), slots["root-start"], swipeout ? import_react68.default.createElement("div", {
    className: "swipeout-content"
  }, linkItemEl) : linkItemEl, isSortableComputed && sortable !== false && !isSortableOppositeComputed && import_react68.default.createElement("div", {
    className: "sortable-handler"
  }), (swipeout || accordionItem) && slots.default, slots.root, slots["root-end"]);
});
ListItem.displayName = "f7-list-item";
var list_item_default = ListItem;

// node_modules/framework7-react/components/list.js
var import_react69 = __toESM(require_react(), 1);
function _extends55() {
  _extends55 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends55.apply(this, arguments);
}
var List = (0, import_react69.forwardRef)((props, ref) => {
  const f7VirtualList = (0, import_react69.useRef)(null);
  const {
    className,
    id,
    style,
    inset,
    xsmallInset,
    smallInset,
    mediumInset,
    largeInset,
    xlargeInset,
    mediaList,
    sortable,
    sortableTapHold,
    sortableEnabled,
    sortableMoveElements,
    sortableOpposite,
    accordionList,
    accordionOpposite,
    contactsList,
    simpleList,
    linksList,
    menuList,
    noHairlines,
    noHairlinesBetween,
    noHairlinesMd,
    noHairlinesBetweenMd,
    noHairlinesIos,
    noHairlinesBetweenIos,
    noHairlinesAurora,
    noHairlinesBetweenAurora,
    noChevron,
    chevronCenter,
    tab,
    tabActive,
    form,
    formStoreData,
    inlineLabels,
    virtualList,
    virtualListParams
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react69.useRef)(null);
  const onSubmit = (event) => {
    emit(props, "submit", event);
  };
  const onSortableEnable = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "sortableEnable");
  };
  const onSortableDisable = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "sortableDisable");
  };
  const onSortableSort = (el, sortData, listEl) => {
    if (elRef.current !== listEl)
      return;
    emit(props, "sortableSort", sortData);
  };
  const onSortableMove = (el, listEl) => {
    if (elRef.current !== listEl)
      return;
    emit(props, "sortableMove", el, listEl);
  };
  (0, import_react69.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7VirtualList: () => f7VirtualList.current
  }));
  useTab(elRef, props);
  const attachEvents = () => {
    f7ready(() => {
      f7.on("sortableEnable", onSortableEnable);
      f7.on("sortableDisable", onSortableDisable);
      f7.on("sortableSort", onSortableSort);
      f7.on("sortableMove", onSortableMove);
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("sortableEnable", onSortableEnable);
    f7.off("sortableDisable", onSortableDisable);
    f7.off("sortableSort", onSortableSort);
    f7.off("sortableMove", onSortableMove);
  };
  const onMount = () => {
    f7ready(() => {
      if (!virtualList)
        return;
      const vlParams = virtualListParams || {};
      if (!vlParams.renderItem && !vlParams.renderExternal)
        return;
      f7VirtualList.current = f7.virtualList.create(extend({
        el: elRef.current,
        on: {
          itemBeforeInsert(itemEl, item) {
            const vl = this;
            emit(props, "virtualItemBeforeInsert", vl, itemEl, item);
          },
          beforeClear(fragment) {
            const vl = this;
            emit(props, "virtualBeforeClear", vl, fragment);
          },
          itemsBeforeInsert(fragment) {
            const vl = this;
            emit(props, "virtualItemsBeforeInsert", vl, fragment);
          },
          itemsAfterInsert(fragment) {
            const vl = this;
            emit(props, "virtualItemsAfterInsert", vl, fragment);
          }
        }
      }, vlParams));
    });
  };
  const onDestroy = () => {
    if (!f7)
      return;
    if (!(virtualList && f7VirtualList.current))
      return;
    if (f7VirtualList.current.destroy)
      f7VirtualList.current.destroy();
    f7VirtualList.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  const {
    list: slotsList,
    default: slotsDefault
  } = slots;
  const rootChildrenBeforeList = [];
  const rootChildrenAfterList = [];
  const ulChildren = slotsList || [];
  const flattenSlots = flattenArray(slotsDefault);
  let wasUlChild = false;
  flattenSlots.forEach((child) => {
    if (typeof child === "undefined")
      return;
    let tag = child.type && (child.type.displayName || child.type.name);
    if (!tag && typeof child.type === "string") {
      tag = child.type;
    }
    if (!tag || tag && !(tag === "li" || tag.indexOf("f7-list-item") >= 0 || tag.indexOf("f7-list-button") >= 0 || tag.indexOf("f7-list-input") >= 0)) {
      if (wasUlChild)
        rootChildrenAfterList.push(child);
      else
        rootChildrenBeforeList.push(child);
    } else if (tag) {
      wasUlChild = true;
      ulChildren.push(child);
    }
  });
  const ListTag = form ? "form" : "div";
  const classes = classNames(className, "list", {
    inset,
    "xsmall-inset": xsmallInset,
    "small-inset": smallInset,
    "medium-inset": mediumInset,
    "large-inset": largeInset,
    "xlarge-inset": xlargeInset,
    "media-list": mediaList,
    "simple-list": simpleList,
    "links-list": linksList,
    "menu-list": menuList,
    sortable,
    "sortable-tap-hold": sortableTapHold,
    "sortable-enabled": sortableEnabled,
    "sortable-opposite": sortableOpposite,
    "accordion-list": accordionList,
    "accordion-opposite": accordionOpposite,
    "contacts-list": contactsList,
    "virtual-list": virtualList,
    tab,
    "tab-active": tabActive,
    "no-hairlines": noHairlines,
    "no-hairlines-md": noHairlinesMd,
    "no-hairlines-ios": noHairlinesIos,
    "no-hairlines-aurora": noHairlinesAurora,
    "no-hairlines-between": noHairlinesBetween,
    "no-hairlines-between-md": noHairlinesBetweenMd,
    "no-hairlines-between-ios": noHairlinesBetweenIos,
    "no-hairlines-between-aurora": noHairlinesBetweenAurora,
    "form-store-data": formStoreData,
    "inline-labels": inlineLabels,
    "no-chevron": noChevron,
    "chevron-center": chevronCenter
  }, colorClasses(props));
  return import_react69.default.createElement(ListTag, _extends55({
    id,
    ref: elRef,
    style,
    className: classes
  }, extraAttrs, {
    "data-sortable-move-elements": typeof sortableMoveElements !== "undefined" ? sortableMoveElements.toString() : void 0,
    onSubmit
  }), import_react69.default.createElement(ListContext.Provider, {
    value: {
      listIsMedia: mediaList,
      listIsSimple: simpleList,
      listIsSortable: sortable,
      listIsSortableOpposite: sortableOpposite
    }
  }, slots["before-list"], rootChildrenBeforeList, ulChildren.length > 0 && import_react69.default.createElement("ul", null, ulChildren), slots["after-list"], rootChildrenAfterList));
});
List.displayName = "f7-list";
var list_default = List;

// node_modules/framework7-react/components/login-screen-title.js
var import_react70 = __toESM(require_react(), 1);
function _extends56() {
  _extends56 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends56.apply(this, arguments);
}
var LoginScreenTitle = (0, import_react70.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react70.useRef)(null);
  (0, import_react70.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "login-screen-title", colorClasses(props));
  return import_react70.default.createElement("div", _extends56({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
LoginScreenTitle.displayName = "f7-login-screen-title";
var login_screen_title_default = LoginScreenTitle;

// node_modules/framework7-react/components/menu-dropdown-item.js
var import_react71 = __toESM(require_react(), 1);
function _extends57() {
  _extends57 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends57.apply(this, arguments);
}
var MenuDropdownItem = (0, import_react71.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    link,
    href,
    target,
    text,
    divider,
    menuClose
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react71.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react71.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useRouteProps(elRef, props);
  const isLink = link || href || href === "";
  const Tag = isLink ? "a" : "div";
  const classes = classNames({
    "menu-dropdown-link": isLink && !divider,
    "menu-dropdown-item": !isLink && !divider,
    "menu-dropdown-divider": divider
  }, className, colorClasses(props), routerClasses(props), actionsClasses(props), {
    "menu-close": typeof menuClose === "undefined"
  });
  let hrefComputed = href;
  if (typeof hrefComputed === "undefined" && link)
    hrefComputed = "#";
  const attrs = {
    href: hrefComputed,
    target,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return import_react71.default.createElement(Tag, _extends57({
    className: classes,
    id,
    style,
    ref: elRef
  }, attrs, extraAttrs, {
    onClick
  }), text, children);
});
MenuDropdownItem.displayName = "f7-menu-dropdown-item";
var menu_dropdown_item_default = MenuDropdownItem;

// node_modules/framework7-react/components/menu-dropdown.js
var import_react72 = __toESM(require_react(), 1);
function _extends58() {
  _extends58 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends58.apply(this, arguments);
}
var MenuDropdown = (0, import_react72.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    contentHeight,
    position,
    left,
    center,
    right
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react72.useRef)(null);
  (0, import_react72.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  let positionComputed = position || "left";
  if (left)
    positionComputed = "left";
  if (center)
    positionComputed = "center";
  if (right)
    positionComputed = "right";
  const classes = classNames("menu-dropdown", `menu-dropdown-${positionComputed}`, colorClasses(props), className);
  return import_react72.default.createElement("div", _extends58({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react72.default.createElement("div", {
    className: "menu-dropdown-content",
    style: {
      height: contentHeight
    }
  }, children));
});
MenuDropdown.displayName = "f7-menu-dropdown";
var menu_dropdown_default = MenuDropdown;

// node_modules/framework7-react/components/menu-item.js
var import_react73 = __toESM(require_react(), 1);
function _extends59() {
  _extends59 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends59.apply(this, arguments);
}
var MenuItem = (0, import_react73.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    link,
    href,
    target,
    text,
    dropdown,
    iconOnly
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react73.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  const onOpened = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "menuOpened", el);
  };
  const onClosed = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "menuClosed", el);
  };
  (0, import_react73.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  useRouteProps(elRef, props);
  const attachEvents = () => {
    f7ready(() => {
      f7.on("menuOpened", onOpened);
      f7.on("menuClosed", onClosed);
    });
  };
  const detachEvents = () => {
    f7.off("menuOpened", onOpened);
    f7.off("menuClosed", onOpened);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const iconEl = useIcon(props);
  const slots = getSlots(props);
  let iconOnlyComputed;
  if (iconOnly || !text && slots.text && slots.text.length === 0 || !text && !slots.text) {
    iconOnlyComputed = true;
  } else {
    iconOnlyComputed = false;
  }
  const isLink = link || href || href === "";
  const Tag = isLink ? "a" : "div";
  const isDropdown = dropdown || dropdown === "";
  const classes = classNames({
    "menu-item": true,
    "menu-item-dropdown": isDropdown,
    "icon-only": iconOnlyComputed
  }, className, colorClasses(props), routerClasses(props), actionsClasses(props));
  let hrefComputed = href;
  if (typeof hrefComputed === "undefined" && link)
    hrefComputed = "#";
  const attrs = {
    href: hrefComputed,
    target,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return import_react73.default.createElement(Tag, _extends59({
    ref: elRef,
    className: classes,
    id,
    style
  }, attrs, extraAttrs, {
    onClick
  }), (text || slots.text && slots.text.length || iconEl) && import_react73.default.createElement("div", {
    className: "menu-item-content"
  }, text, iconEl, slots.text), slots.default);
});
MenuItem.displayName = "f7-menu-item";
var menu_item_default = MenuItem;

// node_modules/framework7-react/components/menu.js
var import_react74 = __toESM(require_react(), 1);
function _extends60() {
  _extends60 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends60.apply(this, arguments);
}
var Menu = (0, import_react74.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react74.useRef)(null);
  (0, import_react74.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames("menu", colorClasses(props), className);
  return import_react74.default.createElement("div", _extends60({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react74.default.createElement("div", {
    className: "menu-inner"
  }, children));
});
Menu.displayName = "f7-menu";
var menu_default = Menu;

// node_modules/framework7-react/components/message.js
var import_react75 = __toESM(require_react(), 1);
function _extends61() {
  _extends61 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends61.apply(this, arguments);
}
var Message = (0, import_react75.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    text,
    name: name2,
    avatar,
    type = "sent",
    image,
    header,
    footer,
    textHeader,
    textFooter,
    first,
    last,
    tail,
    sameName,
    sameHeader,
    sameFooter,
    sameAvatar,
    typing
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react75.useRef)(null);
  const onClick = (event) => {
    emit(props, "click", event);
  };
  const onNameClick = (event) => {
    emit(props, "clickName", event);
  };
  const onTextClick = (event) => {
    emit(props, "clickText", event);
  };
  const onAvatarClick = (event) => {
    emit(props, "clickAvatar", event);
  };
  const onHeaderClick = (event) => {
    emit(props, "clickHeader", event);
  };
  const onFooterClick = (event) => {
    emit(props, "clickFooter", event);
  };
  const onBubbleClick = (event) => {
    emit(props, "clickBubble", event);
  };
  (0, import_react75.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const slots = getSlots(props);
  const classes = classNames(className, "message", {
    "message-sent": type === "sent",
    "message-received": type === "received",
    "message-typing": typing,
    "message-first": first,
    "message-last": last,
    "message-tail": tail,
    "message-same-name": sameName,
    "message-same-header": sameHeader,
    "message-same-footer": sameFooter,
    "message-same-avatar": sameAvatar
  }, colorClasses(props));
  return import_react75.default.createElement("div", _extends61({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), slots.start, (avatar || slots.avatar) && import_react75.default.createElement("div", {
    className: "message-avatar",
    style: {
      backgroundImage: avatar && `url(${avatar})`
    },
    onClick: onAvatarClick
  }, slots.avatar), import_react75.default.createElement("div", {
    className: "message-content"
  }, slots["content-start"], (slots.name || name2) && import_react75.default.createElement("div", {
    className: "message-name",
    onClick: onNameClick
  }, name2, slots.name), (slots.header || header) && import_react75.default.createElement("div", {
    className: "message-header",
    onClick: onHeaderClick
  }, header, slots.header), import_react75.default.createElement("div", {
    className: "message-bubble",
    onClick: onBubbleClick
  }, slots["bubble-start"], (slots.image || image) && import_react75.default.createElement("div", {
    className: "message-image"
  }, slots.image || import_react75.default.createElement("img", {
    src: image
  })), (slots["text-header"] || textHeader) && import_react75.default.createElement("div", {
    className: "message-text-header"
  }, textHeader, slots["text-header"]), (slots.text || text || typing) && import_react75.default.createElement("div", {
    className: "message-text",
    onClick: onTextClick
  }, text, slots.text, typing && import_react75.default.createElement("div", {
    className: "message-typing-indicator"
  }, import_react75.default.createElement("div", null), import_react75.default.createElement("div", null), import_react75.default.createElement("div", null))), (slots["text-footer"] || textFooter) && import_react75.default.createElement("div", {
    className: "message-text-footer"
  }, textFooter, slots["text-footer"]), slots["bubble-end"], slots.default), (slots.footer || footer) && import_react75.default.createElement("div", {
    className: "message-footer",
    onClick: onFooterClick
  }, footer, slots.footer), slots["content-end"]), slots.end);
});
Message.displayName = "f7-message";
var message_default = Message;

// node_modules/framework7-react/components/messagebar-attachment.js
var import_react76 = __toESM(require_react(), 1);
function _extends62() {
  _extends62 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends62.apply(this, arguments);
}
var MessagebarAttachment = (0, import_react76.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    image,
    deletable = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react76.useRef)(null);
  const onClick = (event) => {
    emit(props, "attachmentClick", event);
  };
  const onDeleteClick = (event) => {
    emit(props, "attachmentDelete", event);
  };
  (0, import_react76.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messagebar-attachment", colorClasses(props));
  return import_react76.default.createElement("div", _extends62({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), image && import_react76.default.createElement("img", {
    src: image
  }), deletable && import_react76.default.createElement("span", {
    className: "messagebar-attachment-delete",
    onClick: onDeleteClick
  }), children);
});
MessagebarAttachment.displayName = "f7-messagebar-attachment";
var messagebar_attachment_default = MessagebarAttachment;

// node_modules/framework7-react/components/messagebar-attachments.js
var import_react77 = __toESM(require_react(), 1);
function _extends63() {
  _extends63 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends63.apply(this, arguments);
}
var MessagebarAttachments = (0, import_react77.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react77.useRef)(null);
  (0, import_react77.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messagebar-attachments", colorClasses(props));
  return import_react77.default.createElement("div", _extends63({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
MessagebarAttachments.displayName = "f7-messagebar-attachments";
var messagebar_attachments_default = MessagebarAttachments;

// node_modules/framework7-react/components/messagebar-sheet-image.js
var import_react78 = __toESM(require_react(), 1);
function _extends64() {
  _extends64 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends64.apply(this, arguments);
}
var MessagebarSheetImage = (0, import_react78.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    image,
    checked
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react78.useRef)(null);
  const onChange = (event) => {
    if (event.target.checked)
      emit(props, "checked", event);
    else
      emit(props, "unchecked", event);
    emit(props, "change", event);
  };
  (0, import_react78.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messagebar-sheet-image", "checkbox", colorClasses(props));
  const styles = {
    backgroundImage: image && `url(${image})`,
    ...style || {}
  };
  return import_react78.default.createElement("label", _extends64({
    id,
    className: classes,
    style: styles,
    ref: elRef
  }, extraAttrs), import_react78.default.createElement("input", {
    type: "checkbox",
    checked,
    onChange
  }), import_react78.default.createElement("i", {
    className: "icon icon-checkbox"
  }), children);
});
MessagebarSheetImage.displayName = "f7-messagebar-sheet-image";
var messagebar_sheet_image_default = MessagebarSheetImage;

// node_modules/framework7-react/components/messagebar-sheet-item.js
var import_react79 = __toESM(require_react(), 1);
function _extends65() {
  _extends65 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends65.apply(this, arguments);
}
var MessagebarSheetItem = (0, import_react79.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react79.useRef)(null);
  (0, import_react79.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messagebar-sheet-item", colorClasses(props));
  return import_react79.default.createElement("div", _extends65({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
MessagebarSheetItem.displayName = "f7-messagebar-sheet-item";
var messagebar_sheet_item_default = MessagebarSheetItem;

// node_modules/framework7-react/components/messagebar-sheet.js
var import_react80 = __toESM(require_react(), 1);
function _extends66() {
  _extends66 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends66.apply(this, arguments);
}
var MessagebarSheet = (0, import_react80.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react80.useRef)(null);
  (0, import_react80.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messagebar-sheet", colorClasses(props));
  return import_react80.default.createElement("div", _extends66({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
MessagebarSheet.displayName = "f7-messagebar-sheet";
var messagebar_sheet_default = MessagebarSheet;

// node_modules/framework7-react/components/messagebar.js
var import_react81 = __toESM(require_react(), 1);
function _extends67() {
  _extends67 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends67.apply(this, arguments);
}
var Messagebar = (0, import_react81.forwardRef)((props, ref) => {
  const f7Messagebar = (0, import_react81.useRef)(null);
  const updateSheetVisible = (0, import_react81.useRef)(false);
  const updateAttachmentsVisible = (0, import_react81.useRef)(false);
  const {
    className,
    id,
    style,
    sheetVisible,
    attachmentsVisible,
    top,
    resizable = true,
    bottomOffset = 0,
    topOffset = 0,
    maxHeight,
    resizePage = true,
    sendLink,
    value,
    disabled,
    readonly,
    textareaId,
    name: name2,
    placeholder = "Message",
    init = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react81.useRef)(null);
  const areaElRef = (0, import_react81.useRef)(null);
  const onChange = (event) => {
    emit(props, "change", event);
  };
  const onInput = (event) => {
    emit(props, "input", event);
  };
  const onFocus = (event) => {
    emit(props, "focus", event);
  };
  const onBlur = (event) => {
    emit(props, "blur", event);
  };
  const onClick = (event) => {
    const inputValue = areaElRef.current.el.value;
    const clear = f7Messagebar.current ? () => {
      f7Messagebar.current.clear();
    } : () => {
    };
    emit(props, "submit", inputValue, clear);
    emit(props, "send", inputValue, clear);
    emit(props, "click", event);
  };
  const onAttachmentDelete = (instance, attachmentEl, attachmentElIndex) => {
    emit(props, "messagebarAttachmentDelete", instance, attachmentEl, attachmentElIndex);
  };
  const onAttachmentClick = (instance, attachmentEl, attachmentElIndex) => {
    emit(props, "messagebarAttachmentClick", instance, attachmentEl, attachmentElIndex);
  };
  const onResizePage = (instance) => {
    emit(props, "messagebarResizePage", instance);
  };
  (0, import_react81.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Messagebar: () => f7Messagebar.current
  }));
  watchProp(sheetVisible, () => {
    if (!resizable || !f7Messagebar.current)
      return;
    updateSheetVisible.current = true;
  });
  watchProp(attachmentsVisible, () => {
    if (!resizable || !f7Messagebar.current)
      return;
    updateAttachmentsVisible.current = true;
  });
  useIsomorphicLayoutEffect(() => {
    if (!f7Messagebar.current)
      return;
    if (updateSheetVisible.current) {
      updateSheetVisible.current = false;
      f7Messagebar.current.sheetVisible = sheetVisible;
      f7Messagebar.current.resizePage();
    }
    if (updateAttachmentsVisible.current) {
      updateAttachmentsVisible.current = false;
      f7Messagebar.current.attachmentsVisible = attachmentsVisible;
      f7Messagebar.current.resizePage();
    }
  });
  const onMount = () => {
    if (!init)
      return;
    if (!elRef.current)
      return;
    const params = noUndefinedProps({
      el: elRef.current,
      top,
      resizePage,
      bottomOffset,
      topOffset,
      maxHeight,
      on: {
        attachmentDelete: onAttachmentDelete,
        attachmentClick: onAttachmentClick,
        resizePage: onResizePage
      }
    });
    f7ready(() => {
      f7Messagebar.current = f7.messagebar.create(params);
    });
  };
  const onDestroy = () => {
    if (f7Messagebar.current && f7Messagebar.current.destroy)
      f7Messagebar.current.destroy();
    f7Messagebar.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const slots = getSlots(props);
  const {
    default: slotsDefault,
    "before-inner": slotsBeforeInner,
    "after-inner": slotsAfterInner,
    "send-link": slotsSendLink,
    "inner-start": slotsInnerStart,
    "inner-end": slotsInnerEnd,
    "before-area": slotsBeforeArea,
    "after-area": slotsAfterArea
  } = slots;
  const innerEndEls = [];
  let messagebarAttachmentsEl;
  let messagebarSheetEl;
  if (slotsDefault) {
    slotsDefault.forEach((child) => {
      if (typeof child === "undefined")
        return;
      const tag = child.type && (child.type.displayName || child.type.name);
      if (tag && (tag.indexOf("messagebar-attachments") >= 0 || tag === "F7MessagebarAttachments" || tag === "f7-messagebar-attachments")) {
        messagebarAttachmentsEl = child;
      } else if (tag && (tag.indexOf("messagebar-sheet") >= 0 || tag === "F7MessagebarSheet" || tag === "f7-messagebar-sheet")) {
        messagebarSheetEl = child;
      } else {
        innerEndEls.push(child);
      }
    });
  }
  const valueProps = {};
  if ("value" in props)
    valueProps.value = value;
  const classes = classNames(className, "toolbar", "messagebar", {
    "messagebar-attachments-visible": attachmentsVisible,
    "messagebar-sheet-visible": sheetVisible
  }, colorClasses(props));
  return import_react81.default.createElement("div", _extends67({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), slotsBeforeInner, import_react81.default.createElement("div", {
    className: "toolbar-inner"
  }, slotsInnerStart, import_react81.default.createElement("div", {
    className: "messagebar-area"
  }, slotsBeforeArea, messagebarAttachmentsEl, import_react81.default.createElement(input_default, _extends67({
    id: textareaId,
    ref: areaElRef,
    type: "textarea",
    wrap: false,
    placeholder,
    disabled,
    name: name2,
    readonly,
    resizable,
    onInput,
    onChange,
    onFocus,
    onBlur
  }, valueProps)), slotsAfterArea), (sendLink && sendLink.length > 0 || slotsSendLink) && import_react81.default.createElement(link_default, {
    onClick
  }, slotsSendLink || sendLink), slotsInnerEnd, innerEndEls), slotsAfterInner, messagebarSheetEl);
});
Messagebar.displayName = "f7-messagebar";
var messagebar_default = Messagebar;

// node_modules/framework7-react/components/messages-title.js
var import_react82 = __toESM(require_react(), 1);
function _extends68() {
  _extends68 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends68.apply(this, arguments);
}
var MessagesTitle = (0, import_react82.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react82.useRef)(null);
  (0, import_react82.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "messages-title", colorClasses(props));
  return import_react82.default.createElement("div", _extends68({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
MessagesTitle.displayName = "f7-messages-title";
var messages_title_default = MessagesTitle;

// node_modules/framework7-react/components/messages.js
var import_react83 = __toESM(require_react(), 1);
function _extends69() {
  _extends69 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends69.apply(this, arguments);
}
var Messages = (0, import_react83.forwardRef)((props, ref) => {
  const f7Messages = (0, import_react83.useRef)(null);
  const mounted = (0, import_react83.useRef)(false);
  const {
    className,
    id,
    style,
    children,
    autoLayout = false,
    messages = [],
    newMessagesFirst = false,
    scrollMessages = true,
    scrollMessagesOnEdge = true,
    firstMessageRule,
    lastMessageRule,
    tailMessageRule,
    sameNameMessageRule,
    sameHeaderMessageRule,
    sameFooterMessageRule,
    sameAvatarMessageRule,
    customClassMessageRule,
    renderMessage,
    typing = false,
    init = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react83.useRef)(null);
  const childrenBeforeUpdated = (0, import_react83.useRef)(null);
  const reactChildrenBefore = (0, import_react83.useRef)(children ? import_react83.default.Children.count(children) : 0);
  (0, import_react83.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Messages: () => f7Messages.current
  }));
  const onMount = () => {
    if (!init)
      return;
    f7ready(() => {
      f7Messages.current = f7.messages.create(noUndefinedProps({
        el: elRef.current,
        autoLayout,
        messages,
        newMessagesFirst,
        scrollMessages,
        scrollMessagesOnEdge,
        firstMessageRule,
        lastMessageRule,
        tailMessageRule,
        sameNameMessageRule,
        sameHeaderMessageRule,
        sameFooterMessageRule,
        sameAvatarMessageRule,
        customClassMessageRule,
        renderMessage
      }));
      if (typing) {
        f7Messages.current.showTyping();
      }
    });
  };
  const onDestroy = () => {
    if (f7Messages.current && f7Messages.current.destroy)
      f7Messages.current.destroy();
    f7Messages.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const currentChildrenLength = children ? import_react83.default.Children.count(children) : 0;
  if (f7Messages.current && scrollMessages) {
    const beforeChildrenLength = reactChildrenBefore.current || 0;
    if (currentChildrenLength !== beforeChildrenLength) {
      f7Messages.current.setScrollData();
    }
  }
  reactChildrenBefore.current = currentChildrenLength;
  useIsomorphicLayoutEffect(() => {
    const wasMounted = mounted.current;
    mounted.current = true;
    if (!init || !elRef.current)
      return;
    const childElements = elRef.current.children;
    if (!childElements)
      return;
    const childrenAfterUpdated = childElements.length;
    if (!wasMounted) {
      for (let i = 0; i < childElements.length; i += 1) {
        childElements[i].classList.add("message-appeared");
      }
      return;
    }
    for (let i = 0; i < childElements.length; i += 1) {
      if (!childElements[i].classList.contains("message-appeared")) {
        childElements[i].classList.add("message-appear-from-bottom");
      }
    }
    if (f7Messages.current) {
      if (f7Messages.current.layout && autoLayout) {
        f7Messages.current.layout();
      }
      if (childrenBeforeUpdated.current !== childrenAfterUpdated && f7Messages.current.scroll && f7Messages.current.scrollData && scrollMessages) {
        f7Messages.current.scrollWithEdgeCheck(true);
      }
    }
    childrenBeforeUpdated.current = childrenAfterUpdated;
  });
  watchProp(typing, (newValue) => {
    if (!f7Messages.current)
      return;
    if (newValue)
      f7Messages.current.showTyping();
    else
      f7Messages.current.hideTyping();
  });
  const classes = classNames(className, "messages", colorClasses(props));
  return import_react83.default.createElement("div", _extends69({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Messages.displayName = "f7-messages";
var messages_default = Messages;

// node_modules/framework7-react/components/nav-left.js
var import_react84 = __toESM(require_react(), 1);
function _extends70() {
  _extends70 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends70.apply(this, arguments);
}
var NavLeft = (0, import_react84.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    backLink,
    backLinkUrl,
    backLinkForce,
    backLinkShowText,
    sliding
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react84.useRef)(null);
  const onBackClick = (event) => {
    emit(props, "backClick clickBack", event);
  };
  (0, import_react84.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const theme2 = useTheme();
  let linkEl;
  let needBackLinkText = backLinkShowText;
  if (typeof needBackLinkText === "undefined")
    needBackLinkText = !theme2.md;
  if (backLink) {
    const text = backLink !== true && needBackLinkText ? backLink : void 0;
    linkEl = import_react84.default.createElement(link_default, {
      href: backLinkUrl || "#",
      back: true,
      icon: "icon-back",
      force: backLinkForce || void 0,
      className: !text ? "icon-only" : void 0,
      text,
      onClick: onBackClick
    });
  }
  const classes = classNames(className, "left", {
    sliding
  }, colorClasses(props));
  return import_react84.default.createElement("div", _extends70({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), linkEl, children);
});
NavLeft.displayName = "f7-nav-left";
var nav_left_default = NavLeft;

// node_modules/framework7-react/components/nav-right.js
var import_react85 = __toESM(require_react(), 1);
function _extends71() {
  _extends71 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends71.apply(this, arguments);
}
var NavRight = (0, import_react85.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    sliding
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react85.useRef)(null);
  (0, import_react85.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "right", {
    sliding
  }, colorClasses(props));
  return import_react85.default.createElement("div", _extends71({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
NavRight.displayName = "f7-nav-right";
var nav_right_default = NavRight;

// node_modules/framework7-react/components/nav-title-large.js
var import_react86 = __toESM(require_react(), 1);
function _extends72() {
  _extends72 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends72.apply(this, arguments);
}
var NavTitleLarge = (0, import_react86.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react86.useRef)(null);
  (0, import_react86.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "title-large", colorClasses(props));
  return import_react86.default.createElement("div", _extends72({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react86.default.createElement("div", {
    className: "title-large-text"
  }, children));
});
NavTitleLarge.displayName = "f7-nav-title-large";
var nav_title_large_default = NavTitleLarge;

// node_modules/framework7-react/components/nav-title.js
var import_react87 = __toESM(require_react(), 1);
function _extends73() {
  _extends73 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends73.apply(this, arguments);
}
var NavTitle = (0, import_react87.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    title,
    subtitle,
    sliding
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react87.useRef)(null);
  (0, import_react87.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  let subtitleEl;
  if (subtitle) {
    subtitleEl = import_react87.default.createElement("span", {
      className: "subtitle"
    }, subtitle);
  }
  const classes = classNames(className, "title", {
    sliding
  }, colorClasses(props));
  return import_react87.default.createElement("div", _extends73({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, title, subtitleEl);
});
NavTitle.displayName = "f7-nav-title";
var nav_title_default = NavTitle;

// node_modules/framework7-react/components/navbar.js
var import_react88 = __toESM(require_react(), 1);
function _extends74() {
  _extends74 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends74.apply(this, arguments);
}
var Navbar = (0, import_react88.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    sliding = true,
    large,
    largeTransparent,
    transparent,
    hidden,
    noShadow,
    noHairline,
    backLink,
    backLinkForce,
    backLinkUrl,
    backLinkShowText,
    title,
    subtitle,
    titleLarge,
    innerClass,
    innerClassName
  } = props;
  const routerPositionClass = (0, import_react88.useRef)("");
  const largeCollapsed = (0, import_react88.useRef)(false);
  const routerNavbarRole = (0, import_react88.useRef)(null);
  const routerNavbarRoleDetailRoot = (0, import_react88.useRef)(false);
  const routerNavbarMasterStack = (0, import_react88.useRef)(false);
  const transparentVisible = (0, import_react88.useRef)(false);
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react88.useRef)(null);
  const theme2 = useTheme();
  const onHide = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    emit(props, "navbarHide");
  };
  const onShow = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    emit(props, "navbarShow");
  };
  const onExpand = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    largeCollapsed.current = false;
    emit(props, "navbarExpand");
  };
  const onCollapse = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    largeCollapsed.current = true;
    emit(props, "navbarCollapse");
  };
  const onNavbarTransparentShow = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    transparentVisible.current = true;
    emit(props, "navbarTransparentShow");
  };
  const onNavbarTransparentHide = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    transparentVisible.current = false;
    emit(props, "navbarTransparentHide");
  };
  const onNavbarPosition = (navbarEl, position) => {
    if (elRef.current !== navbarEl)
      return;
    routerPositionClass.current = position ? `navbar-${position}` : "";
  };
  const onNavbarRole = (navbarEl, rolesData) => {
    if (elRef.current !== navbarEl)
      return;
    routerNavbarRole.current = rolesData.role;
    routerNavbarRoleDetailRoot.current = rolesData.detailRoot;
  };
  const onNavbarMasterStack = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    routerNavbarMasterStack.current = true;
  };
  const onNavbarMasterUnstack = (navbarEl) => {
    if (elRef.current !== navbarEl)
      return;
    routerNavbarMasterStack.current = false;
  };
  const hide = (animate) => {
    if (!f7)
      return;
    f7.navbar.hide(elRef.current, animate);
  };
  const show = (animate) => {
    if (!f7)
      return;
    f7.navbar.show(elRef.current, animate);
  };
  const size = () => {
    if (!f7)
      return;
    f7.navbar.size(elRef.current);
  };
  const onBackClick = (event) => {
    emit(props, "backClick clickBack", event);
  };
  (0, import_react88.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    hide,
    show,
    size
  }));
  const attachEvents = () => {
    if (!elRef.current)
      return;
    f7ready(() => {
      f7.navbar.size(elRef.current);
      f7.on("navbarShow", onShow);
      f7.on("navbarHide", onHide);
      f7.on("navbarCollapse", onCollapse);
      f7.on("navbarExpand", onExpand);
      f7.on("navbarPosition", onNavbarPosition);
      f7.on("navbarRole", onNavbarRole);
      f7.on("navbarMasterStack", onNavbarMasterStack);
      f7.on("navbarMasterUnstack", onNavbarMasterUnstack);
      f7.on("navbarTransparentShow", onNavbarTransparentShow);
      f7.on("navbarTransparentHide", onNavbarTransparentHide);
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("navbarShow", onShow);
    f7.off("navbarHide", onHide);
    f7.off("navbarCollapse", onCollapse);
    f7.off("navbarExpand", onExpand);
    f7.off("navbarPosition", onNavbarPosition);
    f7.off("navbarRole", onNavbarRole);
    f7.off("navbarMasterStack", onNavbarMasterStack);
    f7.off("navbarMasterUnstack", onNavbarMasterUnstack);
    f7.off("navbarTransparentShow", onNavbarTransparentShow);
    f7.off("navbarTransparentHide", onNavbarTransparentHide);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  let leftEl;
  let titleEl;
  let rightEl;
  let titleLargeEl;
  const addLeftTitleClass = theme2 && theme2.ios && f7 && !f7.params.navbar.iosCenterTitle;
  const addCenterTitleClass = theme2 && theme2.md && f7 && f7.params.navbar.mdCenterTitle || theme2 && theme2.aurora && f7 && f7.params.navbar.auroraCenterTitle;
  const isLarge = large || largeTransparent;
  const isTransparent = transparent || isLarge && largeTransparent;
  const isTransparentVisible = isTransparent && transparentVisible.current;
  const classes = classNames(className, "navbar", routerPositionClass.current, {
    "navbar-hidden": hidden,
    "navbar-large": isLarge,
    "navbar-large-collapsed": isLarge && largeCollapsed.current,
    "navbar-transparent": isTransparent,
    "navbar-transparent-visible": isTransparentVisible,
    "navbar-master": routerNavbarRole.current === "master",
    "navbar-master-detail": routerNavbarRole.current === "detail",
    "navbar-master-detail-root": routerNavbarRoleDetailRoot.current === true,
    "navbar-master-stacked": routerNavbarMasterStack.current === true,
    "no-shadow": noShadow,
    "no-hairline": noHairline
  }, colorClasses(props));
  if (backLink || slots["nav-left"] || slots.left) {
    leftEl = import_react88.default.createElement(nav_left_default, {
      backLink,
      backLinkUrl,
      backLinkForce,
      backLinkShowText,
      onBackClick
    }, slots["nav-left"], slots.left);
  }
  if (title || subtitle || slots.title) {
    titleEl = import_react88.default.createElement(nav_title_default, {
      title,
      subtitle
    }, slots.title);
  }
  if (slots["nav-right"] || slots.right) {
    rightEl = import_react88.default.createElement(nav_right_default, null, slots["nav-right"], slots.right);
  }
  let largeTitle = titleLarge;
  if (!largeTitle && large && title)
    largeTitle = title;
  if (largeTitle || slots["title-large"]) {
    titleLargeEl = import_react88.default.createElement("div", {
      className: "title-large"
    }, import_react88.default.createElement("div", {
      className: "title-large-text"
    }, largeTitle || "", slots["title-large"]));
  }
  const innerEl = import_react88.default.createElement("div", {
    className: classNames("navbar-inner", innerClass, innerClassName, {
      sliding,
      "navbar-inner-left-title": addLeftTitleClass,
      "navbar-inner-centered-title": addCenterTitleClass
    })
  }, leftEl, titleEl, rightEl, titleLargeEl, slots.default);
  return import_react88.default.createElement("div", _extends74({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react88.default.createElement("div", {
    className: "navbar-bg"
  }), slots["before-inner"], innerEl, slots["after-inner"]);
});
Navbar.displayName = "f7-navbar";
var navbar_default2 = Navbar;

// node_modules/framework7-react/components/page-content.js
var import_react89 = __toESM(require_react(), 1);
function _extends75() {
  _extends75 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends75.apply(this, arguments);
}
var PageContent = (0, import_react89.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    tab,
    tabActive,
    ptr,
    ptrDistance,
    ptrPreloader = true,
    ptrBottom,
    ptrMousewheel,
    infinite,
    infiniteTop,
    infiniteDistance,
    infinitePreloader = true,
    hideBarsOnScroll,
    hideNavbarOnScroll,
    hideToolbarOnScroll,
    messagesContent,
    loginScreen
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react89.useRef)(null);
  const onPtrPullStart = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "ptrPullStart");
  };
  const onPtrPullMove = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "ptrPullMove");
  };
  const onPtrPullEnd = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "ptrPullEnd");
  };
  const onPtrRefresh = (el, done) => {
    if (elRef.current !== el)
      return;
    emit(props, "ptrRefresh", done);
  };
  const onPtrDone = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "ptrDone");
  };
  const onInfinite = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "infinite");
  };
  (0, import_react89.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useTab(elRef, props);
  const attachEvents = () => {
    f7ready(() => {
      if (ptr) {
        f7.on("ptrPullStart", onPtrPullStart);
        f7.on("ptrPullMove", onPtrPullMove);
        f7.on("ptrPullEnd", onPtrPullEnd);
        f7.on("ptrRefresh", onPtrRefresh);
        f7.on("ptrDone", onPtrDone);
      }
      if (infinite) {
        f7.on("infinite", onInfinite);
      }
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("ptrPullStart", onPtrPullStart);
    f7.off("ptrPullMove", onPtrPullMove);
    f7.off("ptrPullEnd", onPtrPullEnd);
    f7.off("ptrRefresh", onPtrRefresh);
    f7.off("ptrDone", onPtrDone);
    f7.off("infinite", onInfinite);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  let ptrEl;
  let infiniteEl;
  if (ptr && ptrPreloader) {
    ptrEl = import_react89.default.createElement("div", {
      className: "ptr-preloader"
    }, import_react89.default.createElement(preloader_default, null), import_react89.default.createElement("div", {
      className: "ptr-arrow"
    }));
  }
  if (infinite && infinitePreloader) {
    infiniteEl = import_react89.default.createElement(preloader_default, {
      className: "infinite-scroll-preloader"
    });
  }
  const classes = classNames(className, "page-content", {
    tab,
    "tab-active": tabActive,
    "ptr-content": ptr,
    "ptr-bottom": ptrBottom,
    "infinite-scroll-content": infinite,
    "infinite-scroll-top": infiniteTop,
    "hide-bars-on-scroll": hideBarsOnScroll,
    "hide-navbar-on-scroll": hideNavbarOnScroll,
    "hide-toolbar-on-scroll": hideToolbarOnScroll,
    "messages-content": messagesContent,
    "login-screen-content": loginScreen
  }, colorClasses(props));
  return import_react89.default.createElement("div", _extends75({
    id,
    style,
    className: classes,
    "data-ptr-distance": ptrDistance || void 0,
    "data-ptr-mousewheel": ptrMousewheel || void 0,
    "data-infinite-distance": infiniteDistance || void 0,
    ref: elRef
  }, extraAttrs), ptrBottom ? null : ptrEl, infiniteTop ? infiniteEl : null, children, infiniteTop ? null : infiniteEl, ptrBottom ? ptrEl : null);
});
PageContent.displayName = "f7-page-content";
var page_content_default = PageContent;

// node_modules/framework7-react/components/page.js
var import_react90 = __toESM(require_react(), 1);
function _extends76() {
  _extends76 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends76.apply(this, arguments);
}
var Page = (0, import_react90.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    name: name2,
    stacked,
    withSubnavbar,
    subnavbar,
    withNavbarLarge,
    navbarLarge,
    noNavbar,
    noToolbar,
    tabs,
    pageContent = true,
    noSwipeback,
    ptr,
    ptrDistance,
    ptrPreloader = true,
    ptrBottom,
    ptrMousewheel,
    infinite,
    infiniteTop,
    infiniteDistance,
    infinitePreloader = true,
    hideBarsOnScroll,
    hideNavbarOnScroll,
    hideToolbarOnScroll,
    messagesContent,
    loginScreen,
    onPtrPullStart,
    onPtrPullMove,
    onPtrPullEnd,
    onPtrRefresh,
    onPtrDone,
    onInfinite
  } = props;
  const hasSubnavbar = (0, import_react90.useRef)(false);
  const hasNavbarLarge = (0, import_react90.useRef)(false);
  const hasNavbarLargeCollapsed = (0, import_react90.useRef)(false);
  const hasCardExpandableOpened = (0, import_react90.useRef)(false);
  const routerPositionClass = (0, import_react90.useRef)("");
  const routerForceUnstack = (0, import_react90.useRef)(false);
  const routerPageRole = (0, import_react90.useRef)(null);
  const routerPageRoleDetailRoot = (0, import_react90.useRef)(false);
  const routerPageMasterStack = (0, import_react90.useRef)(false);
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react90.useRef)(null);
  const onPageMounted = (page) => {
    if (elRef.current !== page.el)
      return;
    emit(props, "pageMounted", page);
  };
  const onPageInit = (page) => {
    if (elRef.current !== page.el)
      return;
    if (typeof withSubnavbar === "undefined" && typeof subnavbar === "undefined") {
      if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find(".subnavbar").length || page.$el.children(".navbar").find(".subnavbar").length) {
        hasSubnavbar.current = true;
      }
    }
    if (typeof withNavbarLarge === "undefined" && typeof navbarLarge === "undefined") {
      if (page.$navbarEl && page.$navbarEl.hasClass("navbar-large")) {
        hasNavbarLarge.current = true;
      }
    }
    emit(props, "pageInit", page);
  };
  const onPageReinit = (page) => {
    if (elRef.current !== page.el)
      return;
    emit(props, "pageReinit", page);
  };
  const onPageBeforeIn = (page) => {
    if (elRef.current !== page.el)
      return;
    if (!page.swipeBack) {
      if (page.from === "next") {
        routerPositionClass.current = "page-next";
      }
      if (page.from === "previous") {
        routerPositionClass.current = "page-previous";
      }
    }
    emit(props, "pageBeforeIn", page);
  };
  const onPageBeforeOut = (page) => {
    if (elRef.current !== page.el)
      return;
    emit(props, "pageBeforeOut", page);
  };
  const onPageAfterOut = (page) => {
    if (elRef.current !== page.el)
      return;
    if (page.to === "next") {
      routerPositionClass.current = "page-next";
    }
    if (page.to === "previous") {
      routerPositionClass.current = "page-previous";
    }
    emit(props, "pageAfterOut", page);
  };
  const onPageAfterIn = (page) => {
    if (elRef.current !== page.el)
      return;
    routerPositionClass.current = "page-current";
    emit(props, "pageAfterIn", page);
  };
  const onPageBeforeRemove = (page) => {
    if (elRef.current !== page.el)
      return;
    emit(props, "pageBeforeRemove", page);
  };
  const onPageBeforeUnmount = (page) => {
    if (elRef.current !== page.el)
      return;
    emit(props, "pageBeforeUnmount", page);
  };
  const onPageStack = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    routerForceUnstack.current = false;
  };
  const onPageUnstack = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    routerForceUnstack.current = true;
  };
  const onPagePosition = (pageEl, position) => {
    if (elRef.current !== pageEl)
      return;
    routerPositionClass.current = `page-${position}`;
  };
  const onPageRole = (pageEl, rolesData) => {
    if (elRef.current !== pageEl)
      return;
    routerPageRole.current = rolesData.role;
    routerPageRoleDetailRoot.current = rolesData.detailRoot;
  };
  const onPageMasterStack = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    routerPageMasterStack.current = true;
  };
  const onPageMasterUnstack = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    routerPageMasterStack.current = false;
  };
  const onPageNavbarLargeCollapsed = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    hasNavbarLargeCollapsed.current = true;
  };
  const onPageNavbarLargeExpanded = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    hasNavbarLargeCollapsed.current = false;
  };
  const onCardOpened = (cardEl, pageEl) => {
    if (elRef.current !== pageEl)
      return;
    hasCardExpandableOpened.current = true;
  };
  const onCardClose = (cardEl, pageEl) => {
    if (elRef.current !== pageEl)
      return;
    hasCardExpandableOpened.current = false;
  };
  const onPageTabShow = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    emit(props, "pageTabShow");
  };
  const onPageTabHide = (pageEl) => {
    if (elRef.current !== pageEl)
      return;
    emit(props, "pageTabHide");
  };
  (0, import_react90.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const attachEvents = () => {
    f7ready(() => {
      f7.on("pageMounted", onPageMounted);
      f7.on("pageInit", onPageInit);
      f7.on("pageReinit", onPageReinit);
      f7.on("pageBeforeIn", onPageBeforeIn);
      f7.on("pageBeforeOut", onPageBeforeOut);
      f7.on("pageAfterOut", onPageAfterOut);
      f7.on("pageAfterIn", onPageAfterIn);
      f7.on("pageBeforeRemove", onPageBeforeRemove);
      f7.on("pageBeforeUnmount", onPageBeforeUnmount);
      f7.on("pageStack", onPageStack);
      f7.on("pageUnstack", onPageUnstack);
      f7.on("pagePosition", onPagePosition);
      f7.on("pageRole", onPageRole);
      f7.on("pageMasterStack", onPageMasterStack);
      f7.on("pageMasterUnstack", onPageMasterUnstack);
      f7.on("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
      f7.on("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
      f7.on("cardOpened", onCardOpened);
      f7.on("cardClose", onCardClose);
      f7.on("pageTabShow", onPageTabShow);
      f7.on("pageTabHide", onPageTabHide);
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("pageMounted", onPageMounted);
    f7.off("pageInit", onPageInit);
    f7.off("pageReinit", onPageReinit);
    f7.off("pageBeforeIn", onPageBeforeIn);
    f7.off("pageBeforeOut", onPageBeforeOut);
    f7.off("pageAfterOut", onPageAfterOut);
    f7.off("pageAfterIn", onPageAfterIn);
    f7.off("pageBeforeRemove", onPageBeforeRemove);
    f7.off("pageBeforeUnmount", onPageBeforeUnmount);
    f7.off("pageStack", onPageStack);
    f7.off("pageUnstack", onPageUnstack);
    f7.off("pagePosition", onPagePosition);
    f7.off("pageRole", onPageRole);
    f7.off("pageMasterStack", onPageMasterStack);
    f7.off("pageMasterUnstack", onPageMasterUnstack);
    f7.off("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
    f7.off("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
    f7.off("cardOpened", onCardOpened);
    f7.off("cardClose", onCardClose);
    f7.off("pageTabShow", onPageTabShow);
    f7.off("pageTabHide", onPageTabHide);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  const fixedList = [];
  const staticList = [];
  const {
    static: slotsStatic,
    fixed: slotsFixed,
    default: slotsDefault
  } = slots;
  const fixedTags = "navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel".split(" ").map((tagName) => `f7-${tagName}`);
  let hasSubnavbarComputed;
  let hasNavbarLargeComputed;
  let hasMessages = messagesContent;
  if (slotsDefault) {
    slotsDefault.forEach((child) => {
      if (typeof child === "undefined")
        return;
      let isFixedTag = false;
      const tag = child.type && (child.type.displayName || child.type.name);
      if (!tag) {
        if (pageContent)
          staticList.push(child);
        return;
      }
      if (tag === "f7-subnavbar")
        hasSubnavbarComputed = true;
      if (tag === "f7-navbar") {
        if (child.props && child.props.large)
          hasNavbarLargeComputed = true;
      }
      if (typeof hasMessages === "undefined" && tag === "f7-messages")
        hasMessages = true;
      if (fixedTags.indexOf(tag) >= 0) {
        isFixedTag = true;
      }
      if (pageContent) {
        if (isFixedTag)
          fixedList.push(child);
        else
          staticList.push(child);
      }
    });
  }
  const forceSubnavbar = typeof subnavbar === "undefined" && typeof withSubnavbar === "undefined" ? hasSubnavbarComputed || hasSubnavbar.current : false;
  const forceNavbarLarge = typeof navbarLarge === "undefined" && typeof withNavbarLarge === "undefined" ? hasNavbarLargeComputed || hasNavbarLarge.current : false;
  const classes = classNames(className, "page", routerPositionClass.current, {
    stacked: stacked && !routerForceUnstack.current,
    tabs,
    "page-with-subnavbar": subnavbar || withSubnavbar || forceSubnavbar,
    "page-with-navbar-large": navbarLarge || withNavbarLarge || forceNavbarLarge,
    "no-navbar": noNavbar,
    "no-toolbar": noToolbar,
    "no-swipeback": noSwipeback,
    "page-master": routerPageRole.current === "master",
    "page-master-detail": routerPageRole.current === "detail",
    "page-master-detail-root": routerPageRoleDetailRoot.current === true,
    "page-master-stacked": routerPageMasterStack.current === true,
    "page-with-navbar-large-collapsed": hasNavbarLargeCollapsed.current === true,
    "page-with-card-opened": hasCardExpandableOpened.current === true,
    "login-screen-page": loginScreen
  }, colorClasses(props));
  if (!pageContent) {
    return import_react90.default.createElement("div", _extends76({
      id,
      style,
      className: classes,
      "data-name": name2,
      ref: elRef
    }, extraAttrs), slotsFixed, slotsStatic, slotsDefault);
  }
  const pageContentEl = import_react90.default.createElement(page_content_default, {
    ptr,
    ptrDistance,
    ptrPreloader,
    ptrBottom,
    ptrMousewheel,
    infinite,
    infiniteTop,
    infiniteDistance,
    infinitePreloader,
    hideBarsOnScroll,
    hideNavbarOnScroll,
    hideToolbarOnScroll,
    messagesContent: messagesContent || hasMessages,
    loginScreen,
    onPtrPullStart,
    onPtrPullMove,
    onPtrPullEnd,
    onPtrRefresh,
    onPtrDone,
    onInfinite
  }, slotsStatic, staticList);
  return import_react90.default.createElement("div", _extends76({
    id,
    style,
    className: classes,
    "data-name": name2,
    ref: elRef
  }, extraAttrs), fixedList, slotsFixed, pageContentEl);
});
Page.displayName = "f7-page";
var page_default = Page;

// node_modules/framework7-react/components/photo-browser.js
var import_react91 = __toESM(require_react(), 1);
var PhotoBrowser = (0, import_react91.forwardRef)((props, ref) => {
  const f7PhotoBrowser = (0, import_react91.useRef)(null);
  const {
    init = true,
    params,
    photos,
    exposition = true,
    expositionHideCaptions = false,
    type,
    navbar = true,
    toolbar = true,
    theme: theme2,
    captionsTheme,
    iconsColor,
    swipeToClose = true,
    pageBackLinkText,
    popupCloseLinkText,
    navbarOfText,
    navbarShowCount,
    swiper,
    url,
    routableModals = false,
    virtualSlides = true,
    view,
    renderNavbar,
    renderToolbar,
    renderCaption,
    renderObject,
    renderLazyPhoto,
    renderPhoto,
    renderPage,
    renderPopup,
    renderStandalone
  } = props;
  const open = (index) => {
    return f7PhotoBrowser.current.open(index);
  };
  const close = () => {
    return f7PhotoBrowser.current.close();
  };
  const expositionToggle = () => {
    return f7PhotoBrowser.current.expositionToggle();
  };
  const expositionEnable = () => {
    return f7PhotoBrowser.current.expositionEnable();
  };
  const expositionDisable = () => {
    return f7PhotoBrowser.current.expositionDisable();
  };
  (0, import_react91.useImperativeHandle)(ref, () => ({
    f7PhotoBrowser: () => f7PhotoBrowser.current,
    open,
    close,
    expositionToggle,
    expositionEnable,
    expositionDisable
  }));
  watchProp(photos, (newValue) => {
    const pb = f7PhotoBrowser.current;
    if (!pb)
      return;
    pb.params.photos = newValue;
    if (pb.opened && pb.swiper) {
      pb.swiper.update();
    }
  });
  const onMount = () => {
    if (!init)
      return;
    f7ready(() => {
      let paramsComputed;
      if (typeof params !== "undefined") {
        paramsComputed = params;
      } else {
        paramsComputed = {
          photos,
          exposition,
          expositionHideCaptions,
          type,
          navbar,
          toolbar,
          theme: theme2,
          captionsTheme,
          iconsColor,
          swipeToClose,
          pageBackLinkText,
          popupCloseLinkText,
          navbarOfText,
          navbarShowCount,
          swiper,
          url,
          routableModals,
          virtualSlides,
          view,
          renderNavbar,
          renderToolbar,
          renderCaption,
          renderObject,
          renderLazyPhoto,
          renderPhoto,
          renderPage,
          renderPopup,
          renderStandalone
        };
      }
      Object.keys(paramsComputed).forEach((param) => {
        if (typeof paramsComputed[param] === "undefined" || paramsComputed[param] === "")
          delete paramsComputed[param];
      });
      paramsComputed = extend({}, paramsComputed, {
        on: {
          open() {
            emit(props, "photoBrowserOpen");
          },
          close() {
            emit(props, "photoBrowserClose");
          },
          opened() {
            emit(props, "photoBrowserOpened");
          },
          closed() {
            emit(props, "photoBrowserClosed");
          },
          swipeToClose() {
            emit(props, "photoBrowserSwipeToClose");
          }
        }
      });
      f7PhotoBrowser.current = f7.photoBrowser.create(paramsComputed);
    });
  };
  const onDestroy = () => {
    if (f7PhotoBrowser.current && f7PhotoBrowser.current.destroy)
      f7PhotoBrowser.current.destroy();
    f7PhotoBrowser.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  return null;
});
PhotoBrowser.displayName = "f7-photo-browser";
var photo_browser_default = PhotoBrowser;

// node_modules/framework7-react/components/pie-chart.js
var import_react92 = __toESM(require_react(), 1);
function _extends77() {
  _extends77 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends77.apply(this, arguments);
}
var PieChart = (0, import_react92.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    size = 320,
    tooltip = false,
    datasets = [],
    formatTooltip,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const [currentIndex, setCurrentIndex] = (0, import_react92.useState)(null);
  const previousIndex = (0, import_react92.useRef)(null);
  const elRef = (0, import_react92.useRef)(null);
  const f7Tooltip = (0, import_react92.useRef)(null);
  (0, import_react92.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const getSummValue = () => {
    let summ = 0;
    datasets.map((d) => d.value || 0).forEach((value) => {
      summ += value;
    });
    return summ;
  };
  const getPaths = () => {
    const paths2 = [];
    let cumulativePercentage = 0;
    function getCoordinatesForPercentage(percentage) {
      const x = Math.cos(2 * Math.PI * percentage) * (size / 3);
      const y = Math.sin(2 * Math.PI * percentage) * (size / 3);
      return [x, y];
    }
    datasets.forEach((_ref) => {
      let {
        value,
        label,
        color
      } = _ref;
      const percentage = value / getSummValue();
      const [startX, startY] = getCoordinatesForPercentage(cumulativePercentage);
      cumulativePercentage += percentage;
      const [endX, endY] = getCoordinatesForPercentage(cumulativePercentage);
      const largeArcFlag = percentage > 0.5 ? 1 : 0;
      const points = [
        `M ${startX} ${startY}`,
        `A ${size / 3} ${size / 3} 0 ${largeArcFlag} 1 ${endX} ${endY}`,
        "L 0 0"
      ].join(" ");
      paths2.push({
        points,
        label,
        color
      });
    });
    return paths2;
  };
  const formatTooltipText = () => {
    if (currentIndex === null)
      return "";
    const {
      value,
      label,
      color
    } = datasets[currentIndex];
    const percentage = value / getSummValue() * 100;
    const round = (v) => {
      if (parseInt(v, 10) === v)
        return v;
      return Math.round(v * 100) / 100;
    };
    if (formatTooltip) {
      return formatTooltip({
        index: currentIndex,
        value,
        label,
        color,
        percentage
      });
    }
    const tooltipText = `${label ? `${label}: ` : ""}${round(value)} (${round(percentage)}%)`;
    return `
      <div class="pie-chart-tooltip-label">
        <span class="pie-chart-tooltip-color" style="background-color: ${color};"></span> ${tooltipText}
      </div>
    `;
  };
  const setTooltip = () => {
    if (currentIndex === null && !f7Tooltip.current)
      return;
    if (!tooltip || !elRef.current || !f7)
      return;
    if (currentIndex !== null && !f7Tooltip.current) {
      f7Tooltip.current = f7.tooltip.create({
        trigger: "manual",
        containerEl: elRef.current,
        targetEl: elRef.current.querySelector(`path[data-index="${currentIndex}"]`),
        text: formatTooltipText(),
        cssClass: "pie-chart-tooltip"
      });
      f7Tooltip.current.show();
      return;
    }
    if (!f7Tooltip.current)
      return;
    if (currentIndex !== null) {
      f7Tooltip.current.setText(formatTooltipText());
      f7Tooltip.current.setTargetEl(elRef.current.querySelector(`path[data-index="${currentIndex}"]`));
      f7Tooltip.current.show();
    } else {
      f7Tooltip.current.hide();
    }
  };
  (0, import_react92.useEffect)(() => {
    if (previousIndex.current === currentIndex)
      return;
    previousIndex.current = currentIndex;
    emit(props, "select", currentIndex, datasets[currentIndex]);
    setTooltip();
  }, [currentIndex]);
  (0, import_react92.useEffect)(() => {
    return () => {
      if (f7Tooltip.current && f7Tooltip.current.destroy) {
        f7Tooltip.current.destroy();
      }
      f7Tooltip.current = null;
    };
  }, []);
  const classes = classNames("pie-chart", className);
  const paths = getPaths();
  return import_react92.default.createElement("div", _extends77({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react92.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: `-${size / 3} -${size / 3} ${size * 2 / 3} ${size * 2 / 3}`,
    style: {
      transform: "rotate(-90deg)"
    }
  }, paths.map((path, index) => import_react92.default.createElement("path", {
    key: path.label || index,
    d: path.points,
    fill: path.color,
    "data-index": index,
    className: classNames({
      "pie-chart-hidden": currentIndex !== null && currentIndex !== index
    }),
    onClick: () => setCurrentIndex(index),
    onMouseEnter: () => setCurrentIndex(index),
    onMouseLeave: () => setCurrentIndex(null)
  }))), children);
});
PieChart.displayName = "f7-pie-chart";
var pie_chart_default = PieChart;

// node_modules/framework7-react/components/progressbar.js
var import_react93 = __toESM(require_react(), 1);
function _extends78() {
  _extends78 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends78.apply(this, arguments);
}
var Progressbar = (0, import_react93.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    progress,
    infinite
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react93.useRef)(null);
  const set = (newProgress, speed) => {
    if (!f7)
      return;
    f7.progressbar.set(elRef.current, newProgress, speed);
  };
  (0, import_react93.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    set
  }));
  const transformStyle = {
    transform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : "",
    WebkitTransform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : ""
  };
  const classes = classNames(className, "progressbar", {
    "progressbar-infinite": infinite
  }, colorClasses(props));
  return import_react93.default.createElement("span", _extends78({
    ref: elRef,
    id,
    style,
    className: classes,
    "data-progress": progress
  }, extraAttrs), import_react93.default.createElement("span", {
    style: transformStyle
  }));
});
Progressbar.displayName = "f7-progressbar";
var progressbar_default = Progressbar;

// node_modules/framework7-react/components/radio.js
var import_react94 = __toESM(require_react(), 1);
function _extends79() {
  _extends79 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends79.apply(this, arguments);
}
var Radio = (0, import_react94.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    value,
    disabled,
    readonly,
    checked,
    defaultChecked
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react94.useRef)(null);
  const onChange = (event) => {
    emit(props, "change", event);
  };
  (0, import_react94.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const inputEl = import_react94.default.createElement("input", {
    type: "radio",
    name,
    value,
    disabled,
    readOnly: readonly,
    checked,
    defaultChecked,
    onChange
  });
  const iconEl = import_react94.default.createElement("i", {
    className: "icon-radio"
  });
  const classes = classNames(className, "radio", {
    disabled
  }, colorClasses(props));
  return import_react94.default.createElement("label", _extends79({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), inputEl, iconEl, children);
});
Radio.displayName = "f7-radio";
var radio_default = Radio;

// node_modules/framework7-react/components/row.js
var import_react95 = __toESM(require_react(), 1);
function _extends80() {
  _extends80 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends80.apply(this, arguments);
}
var Row = (0, import_react95.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    tag = "div",
    noGap,
    resizable,
    resizableFixed,
    resizableAbsolute,
    resizableHandler = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react95.useRef)(null);
  const onClick = (event) => {
    emit(props, "click", event);
  };
  const onResize = (el) => {
    if (el === elRef.current) {
      emit(props, "gridResize");
    }
  };
  (0, import_react95.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  (0, import_react95.useEffect)(() => {
    f7ready(() => {
      f7.on("gridResize", onResize);
    });
    return () => {
      f7.off("gridResize", onResize);
    };
  });
  const RowTag = tag;
  const classes = classNames(className, "row", {
    "no-gap": noGap,
    resizable,
    "resizable-fixed": resizableFixed,
    "resizable-absolute": resizableAbsolute
  }, colorClasses(props));
  return import_react95.default.createElement(RowTag, _extends80({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick
  }), children, resizable && resizableHandler && import_react95.default.createElement("span", {
    className: "resize-handler"
  }));
});
Row.displayName = "f7-row";
var row_default = Row;

// node_modules/framework7-react/components/searchbar.js
var import_react96 = __toESM(require_react(), 1);
function _extends81() {
  _extends81 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends81.apply(this, arguments);
}
var Searchbar = (0, import_react96.forwardRef)((props, ref) => {
  const f7Searchbar = (0, import_react96.useRef)(null);
  const {
    className,
    id,
    style,
    noShadow,
    noHairline,
    form = true,
    placeholder = "Search",
    spellcheck,
    disableButton = true,
    disableButtonText = "Cancel",
    clearButton = true,
    value,
    inputEvents = "change input compositionend",
    expandable,
    inline,
    searchContainer,
    searchIn = ".item-title",
    searchItem = "li",
    searchGroup = ".list-group",
    searchGroupTitle = ".item-divider, .list-group-title",
    foundEl = ".searchbar-found",
    notFoundEl = ".searchbar-not-found",
    backdrop,
    backdropEl,
    hideOnEnableEl = ".searchbar-hide-on-enable",
    hideOnSearchEl = ".searchbar-hide-on-search",
    ignore = ".searchbar-ignore",
    customSearch = false,
    removeDiacritics = false,
    hideDividers = true,
    hideGroups = true,
    init = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react96.useRef)(null);
  const search = (query) => {
    if (!f7Searchbar.current)
      return void 0;
    return f7Searchbar.current.search(query);
  };
  const enable = () => {
    if (!f7Searchbar.current)
      return void 0;
    return f7Searchbar.current.enable();
  };
  const disable = () => {
    if (!f7Searchbar.current)
      return void 0;
    return f7Searchbar.current.disable();
  };
  const toggle = () => {
    if (!f7Searchbar.current)
      return void 0;
    return f7Searchbar.current.toggle();
  };
  const clear = () => {
    if (!f7Searchbar.current)
      return void 0;
    return f7Searchbar.current.clear();
  };
  const onChange = (event) => {
    emit(props, "change", event);
  };
  const onInput = (event) => {
    emit(props, "input", event);
  };
  const onFocus = (event) => {
    emit(props, "focus", event);
  };
  const onBlur = (event) => {
    emit(props, "blur", event);
  };
  const onSubmit = (event) => {
    emit(props, "submit", event);
  };
  const onClearButtonClick = (event) => {
    emit(props, "click:clear clickClear", event);
  };
  const onDisableButtonClick = (event) => {
    emit(props, "click:disable clickDisable", event);
  };
  (0, import_react96.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Searchbar: () => f7Searchbar.current,
    search,
    enable,
    disable,
    toggle,
    clear
  }));
  const onMount = () => {
    if (!init)
      return;
    f7ready(() => {
      const params = noUndefinedProps({
        el: elRef.current,
        inputEvents,
        searchContainer,
        searchIn,
        searchItem,
        searchGroup,
        searchGroupTitle,
        hideOnEnableEl,
        hideOnSearchEl,
        foundEl,
        notFoundEl,
        backdrop,
        backdropEl,
        disableButton,
        ignore,
        customSearch,
        removeDiacritics,
        hideDividers,
        hideGroups,
        expandable,
        inline,
        on: {
          search(searchbar, query, previousQuery) {
            emit(props, "searchbarSearch", searchbar, query, previousQuery);
          },
          clear(searchbar, previousQuery) {
            emit(props, "searchbarClear", searchbar, previousQuery);
          },
          enable(searchbar) {
            emit(props, "searchbarEnable", searchbar);
          },
          disable(searchbar) {
            emit(props, "searchbarDisable", searchbar);
          }
        }
      });
      Object.keys(params).forEach((key) => {
        if (params[key] === "") {
          delete params[key];
        }
      });
      f7Searchbar.current = f7.searchbar.create(params);
    });
  };
  const onDestroy = () => {
    if (f7Searchbar.current && f7Searchbar.current.destroy)
      f7Searchbar.current.destroy();
    f7Searchbar.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  let clearEl;
  let disableEl;
  if (clearButton) {
    clearEl = import_react96.default.createElement("span", {
      className: "input-clear-button",
      onClick: onClearButtonClick
    });
  }
  if (disableButton) {
    disableEl = import_react96.default.createElement("span", {
      className: "searchbar-disable-button",
      onClick: onDisableButtonClick
    }, disableButtonText);
  }
  const SearchbarTag = form ? "form" : "div";
  const classes = classNames(className, "searchbar", {
    "searchbar-inline": inline,
    "no-shadow": noShadow,
    "no-hairline": noHairline,
    "searchbar-expandable": expandable
  }, colorClasses(props));
  const slots = getSlots(props);
  return import_react96.default.createElement(SearchbarTag, _extends81({
    ref: elRef,
    id,
    style,
    className: classes
  }, extraAttrs, {
    onSubmit
  }), slots["before-inner"], import_react96.default.createElement("div", {
    className: "searchbar-inner"
  }, slots["inner-start"], import_react96.default.createElement("div", {
    className: "searchbar-input-wrap"
  }, slots["input-wrap-start"], import_react96.default.createElement("input", {
    value,
    placeholder,
    spellCheck: spellcheck,
    type: "search",
    onInput,
    onChange,
    onFocus,
    onBlur
  }), import_react96.default.createElement("i", {
    className: "searchbar-icon"
  }), clearEl, slots["input-wrap-end"]), disableEl, slots["inner-end"], slots.default), slots["after-inner"]);
});
Searchbar.displayName = "f7-searchbar";
var searchbar_default = Searchbar;

// node_modules/framework7-react/components/segmented.js
var import_react97 = __toESM(require_react(), 1);
function _extends82() {
  _extends82 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends82.apply(this, arguments);
}
var Segmented = (0, import_react97.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    raised,
    raisedIos,
    raisedMd,
    raisedAurora,
    round,
    roundIos,
    roundMd,
    roundAurora,
    strong,
    strongIos,
    strongMd,
    strongAurora,
    tag = "div"
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react97.useRef)(null);
  (0, import_react97.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, {
    segmented: true,
    "segmented-raised": raised,
    "segmented-raised-ios": raisedIos,
    "segmented-raised-aurora": raisedAurora,
    "segmented-raised-md": raisedMd,
    "segmented-round": round,
    "segmented-round-ios": roundIos,
    "segmented-round-aurora": roundAurora,
    "segmented-round-md": roundMd,
    "segmented-strong": strong,
    "segmented-strong-ios": strongIos,
    "segmented-strong-md": strongMd,
    "segmented-strong-aurora": strongAurora
  }, colorClasses(props));
  const SegmentedTag = tag;
  return import_react97.default.createElement(SegmentedTag, _extends82({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, (strong || strongIos || strongMd || strongAurora) && import_react97.default.createElement("span", {
    className: "segmented-highlight"
  }));
});
Segmented.displayName = "f7-segmented";
var segmented_default = Segmented;

// node_modules/skeleton-elements/react/SkeletonBlock.js
var import_react98 = __toESM(require_react(), 1);
function _extends83() {
  _extends83 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends83.apply(this, arguments);
}
var SkeletonBlock = ({
  tag: Tag = "div",
  width,
  height,
  borderRadius,
  effect,
  className,
  style,
  children,
  ...other
} = {}) => {
  const skeletonStyle = style || {};
  if (width)
    skeletonStyle.width = width;
  if (height)
    skeletonStyle.height = height;
  if (borderRadius)
    skeletonStyle.borderRadius = borderRadius;
  const skeletonClassName = ["skeleton-block", effect && `skeleton-effect-${effect}`, className].filter((c) => !!c).join(" ");
  return import_react98.default.createElement(Tag, _extends83({
    style: skeletonStyle,
    className: skeletonClassName
  }, other), children);
};
var SkeletonBlock_default = SkeletonBlock;

// node_modules/skeleton-elements/react/SkeletonText.js
var import_react99 = __toESM(require_react(), 1);
function _extends84() {
  _extends84 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends84.apply(this, arguments);
}
var SkeletonText = ({
  tag: Tag = "span",
  effect,
  className,
  children,
  ...other
} = {}) => {
  const skeletonClassName = ["skeleton-text", effect && `skeleton-effect-${effect}`, className].filter((c) => !!c).join(" ");
  return import_react99.default.createElement(Tag, _extends84({
    className: skeletonClassName
  }, other), children);
};
var SkeletonText_default = SkeletonText;

// node_modules/skeleton-elements/react/SkeletonImage.js
var import_react100 = __toESM(require_react(), 1);

// node_modules/skeleton-elements/utils/multiply-svg-points.js
function multiplySvgPoints(pointsString, iconSize, width, height) {
  const iconMaxSize = Math.min(width, height) * 0.5;
  const scale = iconMaxSize / iconSize;
  return pointsString.replace(/([0-9,\.]{1,})/g, (coords) => {
    coords = coords.split(",").map((p) => parseFloat(p));
    const x = coords[0] * scale + width / 2 - iconSize * scale / 2;
    const y = coords[1] * scale + height / 2 - iconSize * scale / 2;
    if (iconMaxSize >= 100) {
      return `${Math.round(x)},${Math.round(y)}`;
    }
    return `${x},${y}`;
  });
}
var multiply_svg_points_default = multiplySvgPoints;

// node_modules/skeleton-elements/react/SkeletonImage.js
function _extends85() {
  _extends85 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends85.apply(this, arguments);
}
var SkeletonImage = ({
  tag: Tag = "span",
  width = 1200,
  height = 600,
  borderRadius,
  color,
  iconColor,
  showIcon = true,
  effect,
  className,
  children,
  ...other
} = {}) => {
  const skeletonClassName = ["skeleton-image", effect && `skeleton-effect-${effect}`, className].filter((c) => !!c).join(" ");
  function multiplyPoints(pointsString) {
    return multiply_svg_points_default(pointsString, 56, width, height);
  }
  return import_react100.default.createElement(Tag, _extends85({
    className: skeletonClassName
  }, other), import_react100.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width,
    height,
    viewBox: `0 0 ${width} ${height}`,
    style: {
      borderRadius
    },
    preserveAspectRatio: "none"
  }, import_react100.default.createElement("polygon", {
    style: {
      fill: color
    },
    fillRule: "evenodd",
    points: `0 0 ${width} 0 ${width} ${height} 0 ${height}`
  }), showIcon && import_react100.default.createElement("path", {
    style: {
      fill: iconColor
    },
    d: multiplyPoints("M7.7148,49.5742 L48.2852,49.5742 C53.1836,49.5742 55.6446,47.1367 55.6446,42.3086 L55.6446,13.6914 C55.6446,8.8633 53.1836,6.4258 48.2852,6.4258 L7.7148,6.4258 C2.8398,6.4258 0.3554,8.8398 0.3554,13.6914 L0.3554,42.3086 C0.3554,47.1602 2.8398,49.5742 7.7148,49.5742 Z M39.2851,27.9414 C38.2304,27.0039 37.0351,26.5118 35.7695,26.5118 C34.457,26.5118 33.3085,26.9571 32.2304,27.918 L21.6366,37.3867 L17.3007,33.4492 C16.3163,32.582 15.2617,32.1133 14.1366,32.1133 C13.1054,32.1133 12.0976,32.5586 11.1366,33.4258 L4.1288,39.7305 L4.1288,13.8789 C4.1288,11.4414 5.4413,10.1992 7.7851,10.1992 L48.2147,10.1992 C50.535,10.1992 51.8708,11.4414 51.8708,13.8789 L51.8708,39.7539 L39.2851,27.9414 Z M17.8163,28.1992 C20.8398,28.1992 23.3241,25.7149 23.3241,22.668 C23.3241,19.6445 20.8398,17.1367 17.8163,17.1367 C14.7695,17.1367 12.2851,19.6445 12.2851,22.668 C12.2851,25.7149 14.7695,28.1992 17.8163,28.1992 Z")
  })), children);
};
var SkeletonImage_default = SkeletonImage;

// node_modules/skeleton-elements/react/SkeletonAvatar.js
var import_react101 = __toESM(require_react(), 1);
function _extends86() {
  _extends86 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends86.apply(this, arguments);
}
var SkeletonAvatar = ({
  tag: Tag = "span",
  size = 48,
  color,
  showIcon = true,
  iconColor,
  borderRadius = "50%",
  effect,
  className,
  children,
  ...other
} = {}) => {
  const skeletonClassName = ["skeleton-avatar", effect && `skeleton-effect-${effect}`, className].filter((c) => !!c).join(" ");
  function multiplyPoints(pointsString) {
    return multiply_svg_points_default(pointsString, 56, size, size);
  }
  return import_react101.default.createElement(Tag, _extends86({
    className: skeletonClassName
  }, other), import_react101.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: `0 0 ${size} ${size}`,
    preserveAspectRatio: "none"
  }, import_react101.default.createElement("rect", {
    width: size,
    height: size,
    fillRule: "evenodd",
    style: {
      fill: color
    },
    rx: borderRadius
  }), showIcon && import_react101.default.createElement("path", {
    style: {
      fill: iconColor
    },
    d: multiplyPoints("M28.22461,27.1590817 C34.9209931,27.1590817 40.6829044,21.1791004 40.6829044,13.3926332 C40.6829044,5.69958662 34.8898972,0 28.22461,0 C21.5594557,0 15.7663156,5.82423601 15.7663156,13.4549579 C15.7663156,21.1791004 21.5594557,27.1590817 28.22461,27.1590817 Z M8.66515427,56 L47.7841986,56 C52.6739629,56 54.4181241,54.5984253 54.4181241,51.8576005 C54.4181241,43.8219674 44.358068,32.7341519 28.22461,32.7341519 C12.0600561,32.7341519 2,43.8219674 2,51.8576005 C2,54.5984253 3.74402832,56 8.66515427,56 Z")
  })), children);
};
var SkeletonAvatar_default = SkeletonAvatar;

// node_modules/framework7-react/components/skeleton-avatar.js
var skeleton_avatar_default = SkeletonAvatar_default;

// node_modules/framework7-react/components/skeleton-block.js
var skeleton_block_default = SkeletonBlock_default;

// node_modules/framework7-react/components/skeleton-image.js
var skeleton_image_default = SkeletonImage_default;

// node_modules/framework7-react/components/skeleton-text.js
var skeleton_text_default = SkeletonText_default;

// node_modules/framework7-react/components/stepper.js
var import_react106 = __toESM(require_react(), 1);
function _extends87() {
  _extends87 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends87.apply(this, arguments);
}
var Stepper = (0, import_react106.forwardRef)((props, ref) => {
  const f7Stepper = (0, import_react106.useRef)(null);
  const {
    className,
    id,
    style,
    init = true,
    value = 0,
    min = 0,
    max = 100,
    step = 1,
    formatValue,
    name: name2,
    inputId,
    input = true,
    inputType = "text",
    inputReadonly = false,
    autorepeat = false,
    autorepeatDynamic = false,
    wraps = false,
    manualInputMode = false,
    decimalPoint = 4,
    buttonsEndInputMode = true,
    disabled,
    buttonsOnly,
    round,
    roundMd,
    roundIos,
    roundAurora,
    fill,
    fillMd,
    fillIos,
    fillAurora,
    large,
    largeMd,
    largeIos,
    largeAurora,
    small,
    smallMd,
    smallIos,
    smallAurora,
    raised,
    raisedMd,
    raisedIos,
    raisedAurora
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react106.useRef)(null);
  const increment = () => {
    if (!f7Stepper.current)
      return;
    f7Stepper.current.increment();
  };
  const decrement = () => {
    if (!f7Stepper.current)
      return;
    f7Stepper.current.decrement();
  };
  const setValue = (newValue) => {
    if (f7Stepper.current && f7Stepper.current.setValue)
      f7Stepper.current.setValue(newValue);
  };
  const getValue = () => {
    if (f7Stepper.current && f7Stepper.current.getValue) {
      return f7Stepper.current.getValue();
    }
    return void 0;
  };
  const onInput = (event) => {
    emit(props, "input", event, f7Stepper.current);
  };
  const onChange = (event) => {
    emit(props, "change", event, f7Stepper.current);
  };
  const onMinusClick = (event) => {
    emit(props, "stepperMinusClick", event, f7Stepper.current);
  };
  const onPlusClick = (event) => {
    emit(props, "stepperPlusClick", event, f7Stepper.current);
  };
  (0, import_react106.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    f7Stepper: () => f7Stepper.current,
    increment,
    decrement,
    setValue,
    getValue
  }));
  watchProp(value, (newValue) => {
    if (!f7Stepper.current)
      return;
    f7Stepper.current.setValue(newValue);
  });
  const onStepperChange = (stepper, newValue) => {
    emit(props, "stepperChange", newValue);
  };
  const stepperEvents = (method) => {
    if (!f7Stepper.current)
      return;
    f7Stepper.current[method]("change", onStepperChange);
  };
  const onMount = () => {
    f7ready(() => {
      if (!init || !elRef.current)
        return;
      f7Stepper.current = f7.stepper.create(noUndefinedProps({
        el: elRef.current,
        min,
        max,
        value,
        step,
        formatValue,
        autorepeat,
        autorepeatDynamic,
        wraps,
        manualInputMode,
        decimalPoint,
        buttonsEndInputMode
      }));
      stepperEvents("on");
    });
  };
  const onDestroy = () => {
    if (f7Stepper.current && f7Stepper.current.destroy) {
      f7Stepper.current.destroy();
    }
    f7Stepper.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    stepperEvents("on");
    return () => {
      stepperEvents("off");
    };
  });
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  let inputWrapEl;
  let valueEl;
  if (input && !buttonsOnly) {
    const inputEl = import_react106.default.createElement("input", {
      name: name2,
      id: inputId,
      type: inputType,
      min: inputType === "number" ? min : void 0,
      max: inputType === "number" ? max : void 0,
      step: inputType === "number" ? step : void 0,
      onInput,
      onChange,
      value,
      readOnly: inputReadonly
    });
    inputWrapEl = import_react106.default.createElement("div", {
      className: "stepper-input-wrap"
    }, inputEl);
  }
  if (!input && !buttonsOnly) {
    valueEl = import_react106.default.createElement("div", {
      className: "stepper-value"
    }, value);
  }
  const classes = classNames(className, "stepper", {
    disabled,
    "stepper-round": round,
    "stepper-round-ios": roundIos,
    "stepper-round-md": roundMd,
    "stepper-round-aurora": roundAurora,
    "stepper-fill": fill,
    "stepper-fill-ios": fillIos,
    "stepper-fill-md": fillMd,
    "stepper-fill-aurora": fillAurora,
    "stepper-large": large,
    "stepper-large-ios": largeIos,
    "stepper-large-md": largeMd,
    "stepper-large-aurora": largeAurora,
    "stepper-small": small,
    "stepper-small-ios": smallIos,
    "stepper-small-md": smallMd,
    "stepper-small-aurora": smallAurora,
    "stepper-raised": raised,
    "stepper-raised-ios": raisedIos,
    "stepper-raised-md": raisedMd,
    "stepper-raised-aurora": raisedAurora
  }, colorClasses(props));
  return import_react106.default.createElement("div", _extends87({
    ref: elRef,
    id,
    style,
    className: classes
  }, extraAttrs), import_react106.default.createElement("div", {
    className: "stepper-button-minus",
    onClick: onMinusClick
  }), inputWrapEl, valueEl, import_react106.default.createElement("div", {
    className: "stepper-button-plus",
    onClick: onPlusClick
  }));
});
Stepper.displayName = "f7-stepper";
var stepper_default = Stepper;

// node_modules/framework7-react/components/subnavbar.js
var import_react107 = __toESM(require_react(), 1);
function _extends88() {
  _extends88 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends88.apply(this, arguments);
}
var Subnavbar = (0, import_react107.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    inner = true,
    title,
    sliding
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react107.useRef)(null);
  (0, import_react107.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "subnavbar", {
    sliding
  }, colorClasses(props));
  return import_react107.default.createElement("div", _extends88({
    className: classes,
    id,
    style,
    ref: elRef
  }, extraAttrs), inner ? import_react107.default.createElement("div", {
    className: "subnavbar-inner"
  }, title && import_react107.default.createElement("div", {
    className: "subnavbar-title"
  }, title), children) : children);
});
Subnavbar.displayName = "f7-subnavbar";
var subnavbar_default2 = Subnavbar;

// node_modules/framework7-react/components/swipeout-actions.js
var import_react108 = __toESM(require_react(), 1);
function _extends89() {
  _extends89 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends89.apply(this, arguments);
}
var SwipeoutActions = (0, import_react108.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    left,
    right,
    side
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react108.useRef)(null);
  (0, import_react108.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  let sideComputed = side;
  if (!sideComputed) {
    if (left)
      sideComputed = "left";
    if (right)
      sideComputed = "right";
  }
  const classes = classNames(className, `swipeout-actions-${sideComputed}`, colorClasses(props));
  return import_react108.default.createElement("div", _extends89({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
SwipeoutActions.displayName = "f7-swipeout-actions";
var swipeout_actions_default = SwipeoutActions;

// node_modules/framework7-react/components/swipeout-button.js
var import_react109 = __toESM(require_react(), 1);
function _extends90() {
  _extends90 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends90.apply(this, arguments);
}
var SwipeoutButton = (0, import_react109.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    text,
    confirmTitle,
    confirmText,
    overswipe,
    close,
    delete: deleteProp,
    href
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react109.useRef)(null);
  const onClick = (e) => {
    emit(props, "click", e);
  };
  (0, import_react109.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, {
    "swipeout-overswipe": overswipe,
    "swipeout-delete": deleteProp,
    "swipeout-close": close
  }, colorClasses(props));
  return import_react109.default.createElement("a", _extends90({
    ref: elRef,
    href: href || "#",
    id,
    style,
    "data-confirm": confirmText || void 0,
    "data-confirm-title": confirmTitle || void 0,
    className: classes
  }, extraAttrs, {
    onClick
  }), children, text);
});
SwipeoutButton.displayName = "f7-swipeout-button";
var swipeout_button_default = SwipeoutButton;

// node_modules/swiper/react/swiper.js
var import_react115 = __toESM(require_react(), 1);

// node_modules/swiper/components-shared/utils.js
function isObject2(o) {
  return typeof o === "object" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === "Object";
}
function extend2(target, src) {
  const noExtend = ["__proto__", "constructor", "prototype"];
  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {
    if (typeof target[key] === "undefined")
      target[key] = src[key];
    else if (isObject2(src[key]) && isObject2(target[key]) && Object.keys(src[key]).length > 0) {
      if (src[key].__swiper__)
        target[key] = src[key];
      else
        extend2(target[key], src[key]);
    } else {
      target[key] = src[key];
    }
  });
}
function needsNavigation(params) {
  if (params === void 0) {
    params = {};
  }
  return params.navigation && typeof params.navigation.nextEl === "undefined" && typeof params.navigation.prevEl === "undefined";
}
function needsPagination(params) {
  if (params === void 0) {
    params = {};
  }
  return params.pagination && typeof params.pagination.el === "undefined";
}
function needsScrollbar(params) {
  if (params === void 0) {
    params = {};
  }
  return params.scrollbar && typeof params.scrollbar.el === "undefined";
}
function uniqueClasses(classNames2) {
  if (classNames2 === void 0) {
    classNames2 = "";
  }
  const classes = classNames2.split(" ").map((c) => c.trim()).filter((c) => !!c);
  const unique = [];
  classes.forEach((c) => {
    if (unique.indexOf(c) < 0)
      unique.push(c);
  });
  return unique.join(" ");
}

// node_modules/swiper/components-shared/params-list.js
var paramsList = [
  "modules",
  "init",
  "_direction",
  "touchEventsTarget",
  "initialSlide",
  "_speed",
  "cssMode",
  "updateOnWindowResize",
  "resizeObserver",
  "nested",
  "focusableElements",
  "_enabled",
  "_width",
  "_height",
  "preventInteractionOnTransition",
  "userAgent",
  "url",
  "_edgeSwipeDetection",
  "_edgeSwipeThreshold",
  "_freeMode",
  "_autoHeight",
  "setWrapperSize",
  "virtualTranslate",
  "_effect",
  "breakpoints",
  "_spaceBetween",
  "_slidesPerView",
  "maxBackfaceHiddenSlides",
  "_grid",
  "_slidesPerGroup",
  "_slidesPerGroupSkip",
  "_slidesPerGroupAuto",
  "_centeredSlides",
  "_centeredSlidesBounds",
  "_slidesOffsetBefore",
  "_slidesOffsetAfter",
  "normalizeSlideIndex",
  "_centerInsufficientSlides",
  "_watchOverflow",
  "roundLengths",
  "touchRatio",
  "touchAngle",
  "simulateTouch",
  "_shortSwipes",
  "_longSwipes",
  "longSwipesRatio",
  "longSwipesMs",
  "_followFinger",
  "allowTouchMove",
  "_threshold",
  "touchMoveStopPropagation",
  "touchStartPreventDefault",
  "touchStartForcePreventDefault",
  "touchReleaseOnEdges",
  "uniqueNavElements",
  "_resistance",
  "_resistanceRatio",
  "_watchSlidesProgress",
  "_grabCursor",
  "preventClicks",
  "preventClicksPropagation",
  "_slideToClickedSlide",
  "_preloadImages",
  "updateOnImagesReady",
  "_loop",
  "_loopAdditionalSlides",
  "_loopedSlides",
  "_loopFillGroupWithBlank",
  "loopPreventsSlide",
  "_rewind",
  "_allowSlidePrev",
  "_allowSlideNext",
  "_swipeHandler",
  "_noSwiping",
  "noSwipingClass",
  "noSwipingSelector",
  "passiveListeners",
  "containerModifierClass",
  "slideClass",
  "slideBlankClass",
  "slideActiveClass",
  "slideDuplicateActiveClass",
  "slideVisibleClass",
  "slideDuplicateClass",
  "slideNextClass",
  "slideDuplicateNextClass",
  "slidePrevClass",
  "slideDuplicatePrevClass",
  "wrapperClass",
  "runCallbacksOnInit",
  "observer",
  "observeParents",
  "observeSlideChildren",
  "a11y",
  "_autoplay",
  "_controller",
  "coverflowEffect",
  "cubeEffect",
  "fadeEffect",
  "flipEffect",
  "creativeEffect",
  "cardsEffect",
  "hashNavigation",
  "history",
  "keyboard",
  "lazy",
  "mousewheel",
  "_navigation",
  "_pagination",
  "parallax",
  "_scrollbar",
  "_thumbs",
  "virtual",
  "zoom"
];

// node_modules/swiper/components-shared/get-params.js
function getParams(obj, splitEvents) {
  if (obj === void 0) {
    obj = {};
  }
  if (splitEvents === void 0) {
    splitEvents = true;
  }
  const params = {
    on: {}
  };
  const events = {};
  const passedParams = {};
  extend2(params, core_default.defaults);
  extend2(params, core_default.extendedDefaults);
  params._emitClasses = true;
  params.init = false;
  const rest = {};
  const allowedParams = paramsList.map((key) => key.replace(/_/, ""));
  const plainObj = Object.assign({}, obj);
  Object.keys(plainObj).forEach((key) => {
    if (typeof obj[key] === "undefined")
      return;
    if (allowedParams.indexOf(key) >= 0) {
      if (isObject2(obj[key])) {
        params[key] = {};
        passedParams[key] = {};
        extend2(params[key], obj[key]);
        extend2(passedParams[key], obj[key]);
      } else {
        params[key] = obj[key];
        passedParams[key] = obj[key];
      }
    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === "function") {
      if (splitEvents) {
        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
      } else {
        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
      }
    } else {
      rest[key] = obj[key];
    }
  });
  ["navigation", "pagination", "scrollbar"].forEach((key) => {
    if (params[key] === true)
      params[key] = {};
    if (params[key] === false)
      delete params[key];
  });
  return {
    params,
    passedParams,
    rest,
    events
  };
}

// node_modules/swiper/components-shared/mount-swiper.js
function mountSwiper(_ref, swiperParams) {
  let {
    el,
    nextEl,
    prevEl,
    paginationEl,
    scrollbarEl,
    swiper
  } = _ref;
  if (needsNavigation(swiperParams) && nextEl && prevEl) {
    swiper.params.navigation.nextEl = nextEl;
    swiper.originalParams.navigation.nextEl = nextEl;
    swiper.params.navigation.prevEl = prevEl;
    swiper.originalParams.navigation.prevEl = prevEl;
  }
  if (needsPagination(swiperParams) && paginationEl) {
    swiper.params.pagination.el = paginationEl;
    swiper.originalParams.pagination.el = paginationEl;
  }
  if (needsScrollbar(swiperParams) && scrollbarEl) {
    swiper.params.scrollbar.el = scrollbarEl;
    swiper.originalParams.scrollbar.el = scrollbarEl;
  }
  swiper.init(el);
}

// node_modules/swiper/react/loop.js
var import_react110 = __toESM(require_react(), 1);
function calcLoopedSlides(slides, swiperParams) {
  let slidesPerViewParams = swiperParams.slidesPerView;
  if (swiperParams.breakpoints) {
    const breakpoint = core_default.prototype.getBreakpoint(swiperParams.breakpoints);
    const breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : void 0;
    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {
      slidesPerViewParams = breakpointOnlyParams.slidesPerView;
    }
  }
  let loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));
  loopedSlides += swiperParams.loopAdditionalSlides;
  if (loopedSlides > slides.length) {
    loopedSlides = slides.length;
  }
  return loopedSlides;
}
function renderLoop(swiper, slides, swiperParams) {
  const modifiedSlides = slides.map((child, index) => {
    return import_react110.default.cloneElement(child, {
      swiper,
      "data-swiper-slide-index": index
    });
  });
  function duplicateSlide(child, index, position) {
    return import_react110.default.cloneElement(child, {
      key: `${child.key}-duplicate-${index}-${position}`,
      className: `${child.props.className || ""} ${swiperParams.slideDuplicateClass}`
    });
  }
  if (swiperParams.loopFillGroupWithBlank) {
    const blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;
    if (blankSlidesNum !== swiperParams.slidesPerGroup) {
      for (let i = 0; i < blankSlidesNum; i += 1) {
        const blankSlide = import_react110.default.createElement("div", {
          className: `${swiperParams.slideClass} ${swiperParams.slideBlankClass}`
        });
        modifiedSlides.push(blankSlide);
      }
    }
  }
  if (swiperParams.slidesPerView === "auto" && !swiperParams.loopedSlides) {
    swiperParams.loopedSlides = modifiedSlides.length;
  }
  const loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);
  const prependSlides = [];
  const appendSlides = [];
  modifiedSlides.forEach((child, index) => {
    if (index < loopedSlides) {
      appendSlides.push(duplicateSlide(child, index, "prepend"));
    }
    if (index < modifiedSlides.length && index >= modifiedSlides.length - loopedSlides) {
      prependSlides.push(duplicateSlide(child, index, "append"));
    }
  });
  if (swiper) {
    swiper.loopedSlides = loopedSlides;
  }
  return [...prependSlides, ...modifiedSlides, ...appendSlides];
}

// node_modules/swiper/components-shared/get-changed-params.js
function getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {
  const keys = [];
  if (!oldParams)
    return keys;
  const addKey = (key) => {
    if (keys.indexOf(key) < 0)
      keys.push(key);
  };
  if (children && oldChildren) {
    const oldChildrenKeys = oldChildren.map(getKey);
    const childrenKeys = children.map(getKey);
    if (oldChildrenKeys.join("") !== childrenKeys.join(""))
      addKey("children");
    if (oldChildren.length !== children.length)
      addKey("children");
  }
  const watchParams = paramsList.filter((key) => key[0] === "_").map((key) => key.replace(/_/, ""));
  watchParams.forEach((key) => {
    if (key in swiperParams && key in oldParams) {
      if (isObject2(swiperParams[key]) && isObject2(oldParams[key])) {
        const newKeys = Object.keys(swiperParams[key]);
        const oldKeys = Object.keys(oldParams[key]);
        if (newKeys.length !== oldKeys.length) {
          addKey(key);
        } else {
          newKeys.forEach((newKey) => {
            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {
              addKey(key);
            }
          });
          oldKeys.forEach((oldKey) => {
            if (swiperParams[key][oldKey] !== oldParams[key][oldKey])
              addKey(key);
          });
        }
      } else if (swiperParams[key] !== oldParams[key]) {
        addKey(key);
      }
    }
  });
  return keys;
}

// node_modules/swiper/react/get-children.js
var import_react111 = __toESM(require_react(), 1);
function processChildren(c) {
  const slides = [];
  import_react111.default.Children.toArray(c).forEach((child) => {
    if (child.type && child.type.displayName === "SwiperSlide") {
      slides.push(child);
    } else if (child.props && child.props.children) {
      processChildren(child.props.children).forEach((slide) => slides.push(slide));
    }
  });
  return slides;
}
function getChildren(c) {
  const slides = [];
  const slots = {
    "container-start": [],
    "container-end": [],
    "wrapper-start": [],
    "wrapper-end": []
  };
  import_react111.default.Children.toArray(c).forEach((child) => {
    if (child.type && child.type.displayName === "SwiperSlide") {
      slides.push(child);
    } else if (child.props && child.props.slot && slots[child.props.slot]) {
      slots[child.props.slot].push(child);
    } else if (child.props && child.props.children) {
      const foundSlides = processChildren(child.props.children);
      if (foundSlides.length > 0) {
        foundSlides.forEach((slide) => slides.push(slide));
      } else {
        slots["container-end"].push(child);
      }
    } else {
      slots["container-end"].push(child);
    }
  });
  return {
    slides,
    slots
  };
}

// node_modules/swiper/components-shared/update-swiper.js
function updateSwiper(_ref) {
  let {
    swiper,
    slides,
    passedParams,
    changedParams,
    nextEl,
    prevEl,
    scrollbarEl,
    paginationEl
  } = _ref;
  const updateParams = changedParams.filter((key) => key !== "children" && key !== "direction");
  const {
    params: currentParams,
    pagination,
    navigation,
    scrollbar,
    virtual,
    thumbs
  } = swiper;
  let needThumbsInit;
  let needControllerInit;
  let needPaginationInit;
  let needScrollbarInit;
  let needNavigationInit;
  if (changedParams.includes("thumbs") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {
    needThumbsInit = true;
  }
  if (changedParams.includes("controller") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {
    needControllerInit = true;
  }
  if (changedParams.includes("pagination") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {
    needPaginationInit = true;
  }
  if (changedParams.includes("scrollbar") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {
    needScrollbarInit = true;
  }
  if (changedParams.includes("navigation") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {
    needNavigationInit = true;
  }
  const destroyModule = (mod) => {
    if (!swiper[mod])
      return;
    swiper[mod].destroy();
    if (mod === "navigation") {
      currentParams[mod].prevEl = void 0;
      currentParams[mod].nextEl = void 0;
      swiper[mod].prevEl = void 0;
      swiper[mod].nextEl = void 0;
    } else {
      currentParams[mod].el = void 0;
      swiper[mod].el = void 0;
    }
  };
  updateParams.forEach((key) => {
    if (isObject2(currentParams[key]) && isObject2(passedParams[key])) {
      extend2(currentParams[key], passedParams[key]);
    } else {
      const newValue = passedParams[key];
      if ((newValue === true || newValue === false) && (key === "navigation" || key === "pagination" || key === "scrollbar")) {
        if (newValue === false) {
          destroyModule(key);
        }
      } else {
        currentParams[key] = passedParams[key];
      }
    }
  });
  if (updateParams.includes("controller") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {
    swiper.controller.control = currentParams.controller.control;
  }
  if (changedParams.includes("children") && slides && virtual && currentParams.virtual.enabled) {
    virtual.slides = slides;
    virtual.update(true);
  } else if (changedParams.includes("children") && swiper.lazy && swiper.params.lazy.enabled) {
    swiper.lazy.load();
  }
  if (needThumbsInit) {
    const initialized = thumbs.init();
    if (initialized)
      thumbs.update(true);
  }
  if (needControllerInit) {
    swiper.controller.control = currentParams.controller.control;
  }
  if (needPaginationInit) {
    if (paginationEl)
      currentParams.pagination.el = paginationEl;
    pagination.init();
    pagination.render();
    pagination.update();
  }
  if (needScrollbarInit) {
    if (scrollbarEl)
      currentParams.scrollbar.el = scrollbarEl;
    scrollbar.init();
    scrollbar.updateSize();
    scrollbar.setTranslate();
  }
  if (needNavigationInit) {
    if (nextEl)
      currentParams.navigation.nextEl = nextEl;
    if (prevEl)
      currentParams.navigation.prevEl = prevEl;
    navigation.init();
    navigation.update();
  }
  if (changedParams.includes("allowSlideNext")) {
    swiper.allowSlideNext = passedParams.allowSlideNext;
  }
  if (changedParams.includes("allowSlidePrev")) {
    swiper.allowSlidePrev = passedParams.allowSlidePrev;
  }
  if (changedParams.includes("direction")) {
    swiper.changeDirection(passedParams.direction, false);
  }
  swiper.update();
}

// node_modules/swiper/react/virtual.js
var import_react112 = __toESM(require_react(), 1);
function renderVirtual(swiper, slides, virtualData) {
  if (!virtualData)
    return null;
  const style = swiper.isHorizontal() ? {
    [swiper.rtlTranslate ? "right" : "left"]: `${virtualData.offset}px`
  } : {
    top: `${virtualData.offset}px`
  };
  return slides.filter((child, index) => index >= virtualData.from && index <= virtualData.to).map((child) => {
    return import_react112.default.cloneElement(child, {
      swiper,
      style
    });
  });
}

// node_modules/swiper/components-shared/update-on-virtual-data.js
var updateOnVirtualData = (swiper) => {
  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled)
    return;
  swiper.updateSlides();
  swiper.updateProgress();
  swiper.updateSlidesClasses();
  if (swiper.lazy && swiper.params.lazy.enabled) {
    swiper.lazy.load();
  }
  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {
    swiper.parallax.setTranslate();
  }
};

// node_modules/swiper/react/use-isomorphic-layout-effect.js
var import_react113 = __toESM(require_react(), 1);
function useIsomorphicLayoutEffect2(callback, deps) {
  if (typeof window === "undefined")
    return (0, import_react113.useEffect)(callback, deps);
  return (0, import_react113.useLayoutEffect)(callback, deps);
}

// node_modules/swiper/react/context.js
var import_react114 = __toESM(require_react(), 1);
var SwiperSlideContext = (0, import_react114.createContext)(null);
var SwiperContext = (0, import_react114.createContext)(null);

// node_modules/swiper/react/swiper.js
function _extends91() {
  _extends91 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends91.apply(this, arguments);
}
var Swiper = (0, import_react115.forwardRef)(function(_temp, externalElRef) {
  let {
    className,
    tag: Tag = "div",
    wrapperTag: WrapperTag = "div",
    children,
    onSwiper,
    ...rest
  } = _temp === void 0 ? {} : _temp;
  let eventsAssigned = false;
  const [containerClasses, setContainerClasses] = (0, import_react115.useState)("swiper");
  const [virtualData, setVirtualData] = (0, import_react115.useState)(null);
  const [breakpointChanged, setBreakpointChanged] = (0, import_react115.useState)(false);
  const initializedRef = (0, import_react115.useRef)(false);
  const swiperElRef = (0, import_react115.useRef)(null);
  const swiperRef = (0, import_react115.useRef)(null);
  const oldPassedParamsRef = (0, import_react115.useRef)(null);
  const oldSlides = (0, import_react115.useRef)(null);
  const nextElRef = (0, import_react115.useRef)(null);
  const prevElRef = (0, import_react115.useRef)(null);
  const paginationElRef = (0, import_react115.useRef)(null);
  const scrollbarElRef = (0, import_react115.useRef)(null);
  const {
    params: swiperParams,
    passedParams,
    rest: restProps,
    events
  } = getParams(rest);
  const {
    slides,
    slots
  } = getChildren(children);
  const onBeforeBreakpoint = () => {
    setBreakpointChanged(!breakpointChanged);
  };
  Object.assign(swiperParams.on, {
    _containerClasses(swiper, classes) {
      setContainerClasses(classes);
    }
  });
  const initSwiper = () => {
    Object.assign(swiperParams.on, events);
    eventsAssigned = true;
    swiperRef.current = new core_default(swiperParams);
    swiperRef.current.loopCreate = () => {
    };
    swiperRef.current.loopDestroy = () => {
    };
    if (swiperParams.loop) {
      swiperRef.current.loopedSlides = calcLoopedSlides(slides, swiperParams);
    }
    if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {
      swiperRef.current.virtual.slides = slides;
      const extendWith = {
        cache: false,
        slides,
        renderExternal: setVirtualData,
        renderExternalUpdate: false
      };
      extend2(swiperRef.current.params.virtual, extendWith);
      extend2(swiperRef.current.originalParams.virtual, extendWith);
    }
  };
  if (!swiperElRef.current) {
    initSwiper();
  }
  if (swiperRef.current) {
    swiperRef.current.on("_beforeBreakpoint", onBeforeBreakpoint);
  }
  const attachEvents = () => {
    if (eventsAssigned || !events || !swiperRef.current)
      return;
    Object.keys(events).forEach((eventName) => {
      swiperRef.current.on(eventName, events[eventName]);
    });
  };
  const detachEvents = () => {
    if (!events || !swiperRef.current)
      return;
    Object.keys(events).forEach((eventName) => {
      swiperRef.current.off(eventName, events[eventName]);
    });
  };
  (0, import_react115.useEffect)(() => {
    return () => {
      if (swiperRef.current)
        swiperRef.current.off("_beforeBreakpoint", onBeforeBreakpoint);
    };
  });
  (0, import_react115.useEffect)(() => {
    if (!initializedRef.current && swiperRef.current) {
      swiperRef.current.emitSlidesClasses();
      initializedRef.current = true;
    }
  });
  useIsomorphicLayoutEffect2(() => {
    if (externalElRef) {
      externalElRef.current = swiperElRef.current;
    }
    if (!swiperElRef.current)
      return;
    if (swiperRef.current.destroyed) {
      initSwiper();
    }
    mountSwiper({
      el: swiperElRef.current,
      nextEl: nextElRef.current,
      prevEl: prevElRef.current,
      paginationEl: paginationElRef.current,
      scrollbarEl: scrollbarElRef.current,
      swiper: swiperRef.current
    }, swiperParams);
    if (onSwiper)
      onSwiper(swiperRef.current);
    return () => {
      if (swiperRef.current && !swiperRef.current.destroyed) {
        swiperRef.current.destroy(true, false);
      }
    };
  }, []);
  useIsomorphicLayoutEffect2(() => {
    attachEvents();
    const changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c) => c.key);
    oldPassedParamsRef.current = passedParams;
    oldSlides.current = slides;
    if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {
      updateSwiper({
        swiper: swiperRef.current,
        slides,
        passedParams,
        changedParams,
        nextEl: nextElRef.current,
        prevEl: prevElRef.current,
        scrollbarEl: scrollbarElRef.current,
        paginationEl: paginationElRef.current
      });
    }
    return () => {
      detachEvents();
    };
  });
  useIsomorphicLayoutEffect2(() => {
    updateOnVirtualData(swiperRef.current);
  }, [virtualData]);
  function renderSlides() {
    if (swiperParams.virtual) {
      return renderVirtual(swiperRef.current, slides, virtualData);
    }
    if (!swiperParams.loop || swiperRef.current && swiperRef.current.destroyed) {
      return slides.map((child) => {
        return import_react115.default.cloneElement(child, {
          swiper: swiperRef.current
        });
      });
    }
    return renderLoop(swiperRef.current, slides, swiperParams);
  }
  return import_react115.default.createElement(Tag, _extends91({
    ref: swiperElRef,
    className: uniqueClasses(`${containerClasses}${className ? ` ${className}` : ""}`)
  }, restProps), import_react115.default.createElement(SwiperContext.Provider, {
    value: swiperRef.current
  }, slots["container-start"], import_react115.default.createElement(WrapperTag, {
    className: "swiper-wrapper"
  }, slots["wrapper-start"], renderSlides(), slots["wrapper-end"]), needsNavigation(swiperParams) && import_react115.default.createElement(import_react115.default.Fragment, null, import_react115.default.createElement("div", {
    ref: prevElRef,
    className: "swiper-button-prev"
  }), import_react115.default.createElement("div", {
    ref: nextElRef,
    className: "swiper-button-next"
  })), needsScrollbar(swiperParams) && import_react115.default.createElement("div", {
    ref: scrollbarElRef,
    className: "swiper-scrollbar"
  }), needsPagination(swiperParams) && import_react115.default.createElement("div", {
    ref: paginationElRef,
    className: "swiper-pagination"
  }), slots["container-end"]));
});
Swiper.displayName = "Swiper";

// node_modules/swiper/react/swiper-slide.js
var import_react116 = __toESM(require_react(), 1);
function _extends92() {
  _extends92 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends92.apply(this, arguments);
}
var SwiperSlide = (0, import_react116.forwardRef)(function(_temp, externalRef) {
  let {
    tag: Tag = "div",
    children,
    className = "",
    swiper,
    zoom,
    virtualIndex,
    ...rest
  } = _temp === void 0 ? {} : _temp;
  const slideElRef = (0, import_react116.useRef)(null);
  const [slideClasses, setSlideClasses] = (0, import_react116.useState)("swiper-slide");
  function updateClasses(_s, el, classNames2) {
    if (el === slideElRef.current) {
      setSlideClasses(classNames2);
    }
  }
  useIsomorphicLayoutEffect2(() => {
    if (externalRef) {
      externalRef.current = slideElRef.current;
    }
    if (!slideElRef.current || !swiper) {
      return;
    }
    if (swiper.destroyed) {
      if (slideClasses !== "swiper-slide") {
        setSlideClasses("swiper-slide");
      }
      return;
    }
    swiper.on("_slideClass", updateClasses);
    return () => {
      if (!swiper)
        return;
      swiper.off("_slideClass", updateClasses);
    };
  });
  useIsomorphicLayoutEffect2(() => {
    if (swiper && slideElRef.current && !swiper.destroyed) {
      setSlideClasses(swiper.getSlideClasses(slideElRef.current));
    }
  }, [swiper]);
  const slideData = {
    isActive: slideClasses.indexOf("swiper-slide-active") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-active") >= 0,
    isVisible: slideClasses.indexOf("swiper-slide-visible") >= 0,
    isDuplicate: slideClasses.indexOf("swiper-slide-duplicate") >= 0,
    isPrev: slideClasses.indexOf("swiper-slide-prev") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-prev") >= 0,
    isNext: slideClasses.indexOf("swiper-slide-next") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-next") >= 0
  };
  const renderChildren = () => {
    return typeof children === "function" ? children(slideData) : children;
  };
  return import_react116.default.createElement(Tag, _extends92({
    ref: slideElRef,
    className: uniqueClasses(`${slideClasses}${className ? ` ${className}` : ""}`),
    "data-swiper-slide-index": virtualIndex
  }, rest), import_react116.default.createElement(SwiperSlideContext.Provider, {
    value: slideData
  }, zoom ? import_react116.default.createElement("div", {
    className: "swiper-zoom-container",
    "data-swiper-zoom": typeof zoom === "number" ? zoom : void 0
  }, renderChildren()) : renderChildren()));
});
SwiperSlide.displayName = "SwiperSlide";

// node_modules/framework7-react/components/swiper-slide.js
var swiper_slide_default = SwiperSlide;

// node_modules/framework7-react/components/swiper.js
var swiper_default = Swiper;

// node_modules/framework7-react/components/tab.js
var import_react119 = __toESM(require_react(), 1);
function _extends93() {
  _extends93 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends93.apply(this, arguments);
}
var Tab = (0, import_react119.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    tabActive
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react119.useRef)(null);
  const routerData = (0, import_react119.useRef)(null);
  const routerContext = (0, import_react119.useContext)(RouterContext);
  let initialTabContent = null;
  if (!routerData.current && routerContext && routerContext.route && routerContext.route.route && routerContext.route.route.tab && routerContext.route.route.tab.id === id) {
    const {
      component,
      asyncComponent,
      options: tabRouteOptions
    } = routerContext.route.route.tab;
    if (component || asyncComponent) {
      const parentProps = routerContext.route.route.options && routerContext.route.route.options.props;
      initialTabContent = {
        id: getComponentId(),
        component: component || asyncComponent,
        isAsync: !!asyncComponent,
        props: {
          ...parentProps || {},
          ...tabRouteOptions && tabRouteOptions.props || {},
          f7router: routerContext.router,
          f7route: routerContext.route,
          ...routerContext.route.params
        }
      };
    }
  }
  const [tabContent, setTabContent] = (0, import_react119.useState)(initialTabContent || null);
  (0, import_react119.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  if (f7 && !routerData.current) {
    routerData.current = {
      setTabContent
    };
    f7routers.tabs.push(routerData.current);
  }
  const onMount = () => {
    if (elRef.current && initialTabContent) {
      elRef.current.f7RouterTabLoaded = true;
    }
    f7ready(() => {
      if (!routerData.current) {
        routerData.current = {
          el: elRef.current,
          setTabContent
        };
        f7routers.tabs.push(routerData.current);
      } else {
        routerData.current.el = elRef.current;
      }
    });
  };
  const onDestroy = () => {
    if (!routerData.current)
      return;
    f7routers.tabs.splice(f7routers.tabs.indexOf(routerData.current), 1);
    routerData.current = null;
  };
  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (!routerData.current || !f7)
      return;
    f7events.emit("tabRouterDidUpdate", routerData.current);
  });
  useTab(elRef, props);
  const classes = classNames(className, "tab", {
    "tab-active": tabActive
  }, colorClasses(props));
  const renderChildren = () => {
    if (!tabContent)
      return children;
    if (tabContent.isAsync) {
      return useAsyncComponent(tabContent.component, tabContent.props, tabContent.id);
    }
    const TabContent = tabContent.component;
    return import_react119.default.createElement(TabContent, _extends93({
      key: tabContent.id
    }, tabContent.props));
  };
  return import_react119.default.createElement("div", _extends93({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), renderChildren());
});
Tab.displayName = "f7-tab";
var tab_default = Tab;

// node_modules/framework7-react/components/tabs.js
var import_react120 = __toESM(require_react(), 1);
function _extends94() {
  _extends94 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends94.apply(this, arguments);
}
var Tabs = (0, import_react120.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    animated,
    swipeable,
    routable,
    swiperParams
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react120.useRef)(null);
  (0, import_react120.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  useIsomorphicLayoutEffect(() => {
    if (!swipeable || !swiperParams)
      return;
    if (!elRef.current)
      return;
    elRef.current.f7SwiperParams = swiperParams;
  }, []);
  const classes = classNames(className, colorClasses(props));
  const wrapClasses = classNames({
    "tabs-animated-wrap": animated,
    "tabs-swipeable-wrap": swipeable
  });
  const tabsClasses = classNames({
    tabs: true,
    "tabs-routable": routable
  });
  if (animated || swipeable) {
    return import_react120.default.createElement("div", _extends94({
      id,
      style,
      className: classNames(wrapClasses, classes),
      ref: elRef
    }, extraAttrs), import_react120.default.createElement("div", {
      className: tabsClasses
    }, children));
  }
  return import_react120.default.createElement("div", _extends94({
    id,
    style,
    className: classNames(tabsClasses, classes),
    ref: elRef
  }, extraAttrs), children);
});
Tabs.displayName = "f7-tabs";
var tabs_default = Tabs;

// node_modules/framework7-react/components/toolbar.js
var import_react121 = __toESM(require_react(), 1);
function _extends95() {
  _extends95 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends95.apply(this, arguments);
}
var Toolbar = (0, import_react121.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    tabbar,
    labels,
    scrollable,
    hidden,
    noShadow,
    noHairline,
    noBorder,
    position,
    topMd,
    topIos,
    topAurora,
    top,
    bottomMd,
    bottomIos,
    bottomAurora,
    bottom,
    inner = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react121.useRef)(null);
  const onHide = (toolbarEl) => {
    if (elRef.current !== toolbarEl)
      return;
    emit(props, "toolbarHide");
  };
  const onShow = (toolbarEl) => {
    if (elRef.current !== toolbarEl)
      return;
    emit(props, "toolbarShow");
  };
  const hide = (animate) => {
    if (!f7)
      return;
    f7.toolbar.hide(elRef.current, animate);
  };
  const show = (animate) => {
    if (!f7)
      return;
    f7.toolbar.show(elRef.current, animate);
  };
  (0, import_react121.useImperativeHandle)(ref, () => ({
    el: elRef.current,
    hide,
    show
  }));
  useIsomorphicLayoutEffect(() => {
    f7ready(() => {
      if (tabbar && f7 && elRef.current) {
        f7.toolbar.setHighlight(elRef.current);
      }
      f7.on("toolbarShow", onShow);
      f7.on("toolbarHide", onHide);
    });
    return () => {
      if (!f7)
        return;
      f7.off("toolbarShow", onShow);
      f7.off("toolbarHide", onHide);
    };
  });
  const theme2 = useTheme();
  const classes = classNames(className, "toolbar", {
    tabbar,
    "toolbar-bottom": theme2 && theme2.md && bottomMd || theme2 && theme2.ios && bottomIos || theme2 && theme2.aurora && bottomAurora || bottom || position === "bottom",
    "toolbar-top": theme2 && theme2.md && topMd || theme2 && theme2.ios && topIos || theme2 && theme2.aurora && topAurora || top || position === "top",
    "tabbar-labels": labels,
    "tabbar-scrollable": scrollable,
    "toolbar-hidden": hidden,
    "no-shadow": noShadow,
    "no-hairline": noHairline || noBorder
  }, colorClasses(props));
  const slots = getSlots(props);
  return import_react121.default.createElement("div", _extends95({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react121.default.createElement(TabbarContext.Provider, {
    value: {
      tabbarHasLabels: labels
    }
  }, slots["before-inner"], inner ? import_react121.default.createElement("div", {
    className: "toolbar-inner"
  }, slots.default) : slots.default, slots["after-inner"]));
});
Toolbar.displayName = "f7-toolbar";
var toolbar_default2 = Toolbar;

// node_modules/framework7-react/components/treeview-item.js
var import_react122 = __toESM(require_react(), 1);
function _extends96() {
  _extends96 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends96.apply(this, arguments);
}
var TreeviewItem = (0, import_react122.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    toggle,
    itemToggle,
    selectable,
    selected,
    opened,
    label,
    loadChildren,
    link
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react122.useRef)(null);
  const onClick = (event) => {
    emit(props, "click", event);
  };
  const onOpen = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "treeviewOpen", el);
  };
  const onClose = (el) => {
    if (elRef.current !== el)
      return;
    emit(props, "treeviewClose", el);
  };
  const onLoadChildren = (el, done) => {
    if (elRef.current !== el)
      return;
    emit(props, "treeviewLoadChildren", el, done);
  };
  (0, import_react122.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const attachEvents = () => {
    if (!elRef.current)
      return;
    f7ready(() => {
      f7.on("treeviewOpen", onOpen);
      f7.on("treeviewClose", onClose);
      f7.on("treeviewLoadChildren", onLoadChildren);
    });
  };
  const detachEvents = () => {
    if (!f7)
      return;
    f7.off("treeviewOpen", onOpen);
    f7.off("treeviewClose", onClose);
    f7.off("treeviewLoadChildren", onLoadChildren);
  };
  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  const hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots["children-start"] && slots["children-start"].length;
  const needToggle = typeof toggle === "undefined" ? hasChildren : toggle;
  const iconEl = useIcon(props);
  const TreeviewRootTag = link || link === "" ? "a" : "div";
  const classes = classNames(className, "treeview-item", {
    "treeview-item-opened": opened,
    "treeview-load-children": loadChildren
  }, colorClasses(props));
  const itemRootClasses = classNames("treeview-item-root", {
    "treeview-item-selectable": selectable,
    "treeview-item-selected": selected,
    "treeview-item-toggle": itemToggle
  }, routerClasses(props), actionsClasses(props));
  let href = link;
  if (link === true)
    href = "#";
  if (link === false)
    href = void 0;
  const itemRootAttrs = {
    href,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return import_react122.default.createElement("div", _extends96({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), import_react122.default.createElement(TreeviewRootTag, _extends96({
    onClick,
    className: itemRootClasses
  }, itemRootAttrs), slots["root-start"], needToggle && import_react122.default.createElement("div", {
    className: "treeview-toggle"
  }), import_react122.default.createElement("div", {
    className: "treeview-item-content"
  }, slots["content-start"], iconEl, slots.media, import_react122.default.createElement("div", {
    className: "treeview-item-label"
  }, slots["label-start"], label, slots.label), slots.content, slots["content-end"]), slots.root, slots["root-end"]), hasChildren && import_react122.default.createElement("div", {
    className: "treeview-item-children"
  }, slots["children-start"], slots.default, slots.children));
});
TreeviewItem.displayName = "f7-treeview-item";
var treeview_item_default = TreeviewItem;

// node_modules/framework7-react/components/treeview.js
var import_react123 = __toESM(require_react(), 1);
function _extends97() {
  _extends97 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends97.apply(this, arguments);
}
var Treeview = (0, import_react123.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react123.useRef)(null);
  (0, import_react123.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "treeview", colorClasses(props));
  return import_react123.default.createElement("div", _extends97({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Treeview.displayName = "f7-treeview";
var treeview_default = Treeview;

// node_modules/framework7-react/components/views.js
var import_react124 = __toESM(require_react(), 1);
function _extends98() {
  _extends98 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends98.apply(this, arguments);
}
var Views = (0, import_react124.forwardRef)((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    tabs
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = (0, import_react124.useRef)(null);
  (0, import_react124.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, "views", {
    tabs
  }, colorClasses(props));
  return import_react124.default.createElement("div", _extends98({
    id,
    style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Views.displayName = "f7-views";
var views_default = Views;

// node_modules/framework7-react/framework7-react.js
var framework7_react_default = plugin_default;

// dep:framework7-react
var framework7_react_default2 = framework7_react_default;
export {
  accordion_default as Accordion,
  accordion_content_default as AccordionContent,
  accordion_item_default as AccordionItem,
  accordion_toggle_default as AccordionToggle,
  actions_default as Actions,
  actions_button_default as ActionsButton,
  actions_group_default as ActionsGroup,
  actions_label_default as ActionsLabel,
  app_default as App,
  appbar_default as Appbar,
  area_chart_default as AreaChart,
  badge_default as Badge,
  block_default as Block,
  block_footer_default as BlockFooter,
  block_header_default as BlockHeader,
  block_title_default as BlockTitle,
  breadcrumbs_default as Breadcrumbs,
  breadcrumbs_collapsed_default as BreadcrumbsCollapsed,
  breadcrumbs_item_default as BreadcrumbsItem,
  breadcrumbs_separator_default as BreadcrumbsSeparator,
  button_default as Button,
  card_default as Card,
  card_content_default as CardContent,
  card_footer_default as CardFooter,
  card_header_default as CardHeader,
  checkbox_default as Checkbox,
  chip_default as Chip,
  col_default as Col,
  fab_default as Fab,
  fab_backdrop_default as FabBackdrop,
  fab_button_default as FabButton,
  fab_buttons_default as FabButtons,
  gauge_default as Gauge,
  icon_default as Icon,
  input_default as Input,
  link_default as Link,
  list_default as List,
  list_button_default as ListButton,
  list_group_default as ListGroup,
  list_index_default as ListIndex,
  list_input_default as ListInput,
  list_item_default as ListItem,
  list_item_cell_default as ListItemCell,
  list_item_content_default as ListItemContent,
  list_item_row_default as ListItemRow,
  login_screen_default as LoginScreen,
  login_screen_title_default as LoginScreenTitle,
  menu_default as Menu,
  menu_dropdown_default as MenuDropdown,
  menu_dropdown_item_default as MenuDropdownItem,
  menu_item_default as MenuItem,
  message_default as Message,
  messagebar_default as Messagebar,
  messagebar_attachment_default as MessagebarAttachment,
  messagebar_attachments_default as MessagebarAttachments,
  messagebar_sheet_default as MessagebarSheet,
  messagebar_sheet_image_default as MessagebarSheetImage,
  messagebar_sheet_item_default as MessagebarSheetItem,
  messages_default as Messages,
  messages_title_default as MessagesTitle,
  nav_left_default as NavLeft,
  nav_right_default as NavRight,
  nav_title_default as NavTitle,
  nav_title_large_default as NavTitleLarge,
  navbar_default2 as Navbar,
  page_default as Page,
  page_content_default as PageContent,
  panel_default as Panel,
  photo_browser_default as PhotoBrowser,
  pie_chart_default as PieChart,
  popover_default as Popover,
  popup_default as Popup,
  preloader_default as Preloader,
  progressbar_default as Progressbar,
  radio_default as Radio,
  range_default as Range,
  routable_modals_default as RoutableModals,
  row_default as Row,
  searchbar_default as Searchbar,
  segmented_default as Segmented,
  sheet_default as Sheet,
  skeleton_avatar_default as SkeletonAvatar,
  skeleton_block_default as SkeletonBlock,
  skeleton_image_default as SkeletonImage,
  skeleton_text_default as SkeletonText,
  stepper_default as Stepper,
  subnavbar_default2 as Subnavbar,
  swipeout_actions_default as SwipeoutActions,
  swipeout_button_default as SwipeoutButton,
  swiper_default as Swiper,
  swiper_slide_default as SwiperSlide,
  tab_default as Tab,
  tabs_default as Tabs,
  text_editor_default as TextEditor,
  toggle_default as Toggle,
  toolbar_default2 as Toolbar,
  treeview_default as Treeview,
  treeview_item_default as TreeviewItem,
  view_default2 as View,
  views_default as Views,
  framework7_react_default2 as default,
  f7,
  f7ready,
  theme,
  useStore
};
//# sourceMappingURL=framework7-react.js.map
