{"version":3,"sources":["../../../src/api/layer-map.ts"],"names":["deviation","extent","groupSort","median","variance","rgb","scaleLinear","scaleOrdinal","scaleLog","scalePoint","scaleQuantile","scaleQuantize","scaleSqrt","scaleThreshold","format","d3Format","moment","CPUGridLayer","HeatmapLayer","HexagonLayer","GeoJsonLayer","H3HexagonLayer","MVTLayer","CartoTileLayer","TILE_FORMATS","assert","SCALE_FUNCS","linear","ordinal","log","point","quantile","quantize","sqrt","custom","UNKNOWN_COLOR","AGGREGATION","average","maximum","minimum","sum","OPACITY_MAP","getFillColor","getLineColor","getTextColor","AGGREGATION_FUNC","values","accessor","v","length","mode","pop","stddev","hexToRGBA","c","r","g","b","opacity","sharedPropMap","color","isVisible","label","textLabel","alignment","anchor","size","visConfig","enable3d","elevationScale","filled","strokeColor","stroked","thickness","radius","wireframe","aggregationVisConfig","colorAggregation","x","colorRange","colors","map","coverage","elevationPercentile","percentile","defaultProps","lineMiterLimit","lineWidthUnits","pointRadiusUnits","rounded","wrapLongitude","mergePropMaps","a","getLayer","type","config","dataset","getTileLayer","geoColumn","getPosition","d","coordinates","hexagonId","columns","hex_id","layerTypeDefs","Layer","propMap","outline","geojson","grid","worldUnitSize","cellSize","heatmap","hexagon","getHexagon","layer","data","tiles","tileUrl","formatTiles","URL","searchParams","get","MVT","uniqueIdProperty","domainFromAttribute","attribute","scaleType","categories","category","filter","undefined","min","max","domainFromValues","sort","d0","d1","calculateDomain","name","tilestats","attributes","layers","find","features","properties","Array","isArray","normalizeAccessor","opacityToAlpha","Math","round","pow","getColorValueAccessor","aggregator","p","getColorAccessor","colorMap","scale","domain","scaleColor","forEach","value","push","slice","range","unknown","alpha","propertyValue","getSizeAccessor","FORMATS","date","s","utc","integer","float","timestamp","default","String","getTextAccessor","getTextPixelOffsetAccessor","padding","signX","signY","sizeOffset","calculateOffset","_domainFromValues"],"mappings":"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","sourcesContent":["import {deviation, extent, groupSort, median, variance} from 'd3-array';\nimport {rgb} from 'd3-color';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n  scaleLog,\n  scalePoint,\n  scaleQuantile,\n  scaleQuantize,\n  scaleSqrt,\n  scaleThreshold\n} from 'd3-scale';\nimport {format as d3Format} from 'd3-format';\nimport moment from 'moment-timezone';\n\nimport {Layer, _ConstructorOf as ConstructorOf} from '@deck.gl/core';\nimport {CPUGridLayer, HeatmapLayer, HexagonLayer} from '@deck.gl/aggregation-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {H3HexagonLayer, MVTLayer} from '@deck.gl/geo-layers';\n\nimport CartoTileLayer from '../layers/carto-tile-layer';\nimport {TILE_FORMATS} from './maps-api-common';\nimport {assert} from '../utils';\n\nconst SCALE_FUNCS = {\n  linear: scaleLinear,\n  ordinal: scaleOrdinal,\n  log: scaleLog,\n  point: scalePoint,\n  quantile: scaleQuantile,\n  quantize: scaleQuantize,\n  sqrt: scaleSqrt,\n  custom: scaleThreshold\n};\nexport type SCALE_TYPE = keyof typeof SCALE_FUNCS;\n\nconst UNKNOWN_COLOR = '#868d91';\n\nexport const AGGREGATION = {\n  average: 'MEAN',\n  maximum: 'MAX',\n  minimum: 'MIN',\n  sum: 'SUM'\n};\n\nexport const OPACITY_MAP = {\n  getFillColor: 'opacity',\n  getLineColor: 'strokeOpacity',\n  getTextColor: 'opacity'\n};\n\nconst AGGREGATION_FUNC = {\n  'count unique': (values, accessor) => groupSort(values, v => v.length, accessor).length,\n  median,\n  // Unfortunately mode() is only available in d3-array@3+ which is ESM only\n  mode: (values, accessor) => groupSort(values, v => v.length, accessor).pop(),\n  stddev: deviation,\n  variance\n};\n\nconst hexToRGBA = c => {\n  const {r, g, b, opacity} = rgb(c);\n  return [r, g, b, 255 * opacity];\n};\n\n// Kepler -> Deck.gl\nconst sharedPropMap = {\n  color: 'getFillColor',\n  isVisible: 'visible',\n  label: 'cartoLabel',\n  textLabel: {\n    alignment: 'getTextAlignmentBaseline',\n    anchor: 'getTextAnchor',\n    color: 'getTextColor',\n    size: 'getTextSize'\n  },\n  visConfig: {\n    enable3d: 'extruded',\n    elevationScale: 'elevationScale',\n    filled: 'filled',\n    strokeColor: 'getLineColor',\n    stroked: 'stroked',\n    thickness: 'getLineWidth',\n    radius: 'getPointRadius',\n    wireframe: 'wireframe'\n  }\n};\n\nconst aggregationVisConfig = {\n  colorAggregation: x => ({colorAggregation: AGGREGATION[x] || AGGREGATION.sum}),\n  colorRange: x => ({colorRange: x.colors.map(hexToRGBA)}),\n  coverage: 'coverage',\n  elevationPercentile: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n  percentile: ['lowerPercentile', 'upperPercentile']\n};\n\nconst defaultProps = {\n  lineMiterLimit: 2,\n  lineWidthUnits: 'pixels',\n  pointRadiusUnits: 'pixels',\n  rounded: true,\n  wrapLongitude: false\n};\n\nfunction mergePropMaps(a: Record<string, any> = {}, b: Record<string, any> = {}) {\n  return {...a, ...b, visConfig: {...a.visConfig, ...b.visConfig}};\n}\n\nexport function getLayer(\n  type: string,\n  config,\n  dataset\n): {Layer: ConstructorOf<Layer>; propMap: any; defaultProps: any} {\n  if (type === 'mvt' || type === 'tileset') {\n    return getTileLayer(dataset);\n  }\n\n  const geoColumn = dataset?.geoColumn;\n  const getPosition = d => d[geoColumn].coordinates;\n\n  const hexagonId = config.columns?.hex_id;\n\n  const layerTypeDefs: Record<\n    string,\n    {Layer: ConstructorOf<Layer>; propMap?: any; defaultProps?: any}\n  > = {\n    point: {\n      Layer: GeoJsonLayer,\n      propMap: {visConfig: {outline: 'stroked'}}\n    },\n    geojson: {\n      Layer: GeoJsonLayer\n    },\n    grid: {\n      Layer: CPUGridLayer,\n      propMap: {visConfig: {...aggregationVisConfig, worldUnitSize: x => ({cellSize: 1000 * x})}},\n      defaultProps: {getPosition}\n    },\n    heatmap: {\n      Layer: HeatmapLayer,\n      propMap: {visConfig: {...aggregationVisConfig, radius: 'radiusPixels'}},\n      defaultProps: {getPosition}\n    },\n    hexagon: {\n      Layer: HexagonLayer,\n      propMap: {visConfig: {...aggregationVisConfig, worldUnitSize: x => ({radius: 1000 * x})}},\n      defaultProps: {getPosition}\n    },\n    hexagonId: {\n      Layer: H3HexagonLayer,\n      propMap: {visConfig: {coverage: 'coverage'}},\n      defaultProps: {getHexagon: d => d[hexagonId], stroked: false}\n    }\n  };\n\n  const layer = layerTypeDefs[type];\n\n  assert(layer, `Unsupported layer type: ${type}`);\n  return {\n    ...layer,\n    propMap: mergePropMaps(sharedPropMap, layer.propMap),\n    defaultProps: {...defaultProps, ...layer.defaultProps}\n  };\n}\n\nfunction getTileLayer(dataset) {\n  const {\n    data: {\n      tiles: [tileUrl]\n    }\n  } = dataset;\n  /* global URL */\n  const formatTiles = new URL(tileUrl).searchParams.get('formatTiles') || TILE_FORMATS.MVT;\n\n  return {\n    Layer: formatTiles === TILE_FORMATS.MVT ? MVTLayer : CartoTileLayer,\n    propMap: sharedPropMap,\n    defaultProps: {\n      ...defaultProps,\n      uniqueIdProperty: 'geoid',\n      formatTiles\n    }\n  };\n}\n\nfunction domainFromAttribute(attribute, scaleType: SCALE_TYPE) {\n  if (scaleType === 'ordinal' || scaleType === 'point') {\n    return attribute.categories.map(c => c.category).filter(c => c !== undefined && c !== null);\n  }\n\n  let {min} = attribute;\n  if (scaleType === 'log' && min === 0) {\n    min = 1e-5;\n  }\n  return [min, attribute.max];\n}\n\nfunction domainFromValues(values, scaleType: SCALE_TYPE) {\n  if (scaleType === 'ordinal') {\n    return groupSort(\n      values,\n      g => -g.length,\n      d => d\n    );\n  } else if (scaleType === 'quantile') {\n    return values.sort((a, b) => a - b);\n  } else if (scaleType === 'log') {\n    const [d0, d1] = extent(values as number[]);\n    return [d0 === 0 ? 1e-5 : d0, d1];\n  }\n  return extent(values);\n}\n\nfunction calculateDomain(data, name, scaleType) {\n  if (data.tilestats) {\n    // Tileset data type\n    const {attributes} = data.tilestats.layers[0];\n    const attribute = attributes.find(a => a.attribute === name);\n    return domainFromAttribute(attribute, scaleType);\n  } else if (data.features) {\n    // GeoJSON data type\n    const values = data.features.map(({properties}) => properties[name]);\n    return domainFromValues(values, scaleType);\n  } else if (Array.isArray(data) && data[0][name] !== undefined) {\n    // JSON data type\n    const values = data.map(properties => properties[name]);\n    return domainFromValues(values, scaleType);\n  }\n\n  return [0, 1];\n}\n\nfunction normalizeAccessor(accessor, data) {\n  if (data.features || data.tilestats) {\n    return ({properties}) => {\n      return accessor(properties);\n    };\n  }\n  return accessor;\n}\n\nexport function opacityToAlpha(opacity) {\n  return opacity !== undefined ? Math.round(255 * Math.pow(opacity, 1 / 2.2)) : 255;\n}\n\nexport function getColorValueAccessor({name}, colorAggregation, data: any) {\n  const aggregator = AGGREGATION_FUNC[colorAggregation];\n  const accessor = values => aggregator(values, p => p[name]);\n  return normalizeAccessor(accessor, data);\n}\n\nexport function getColorAccessor(\n  {name},\n  scaleType: SCALE_TYPE,\n  {colors, colorMap},\n  opacity: number | undefined,\n  data: any\n) {\n  const scale = SCALE_FUNCS[scaleType as any]();\n  let domain: (string | number)[] = [];\n  let scaleColor: string[] = [];\n\n  if (Array.isArray(colorMap)) {\n    colorMap.forEach(([value, color]) => {\n      domain.push(value);\n      scaleColor.push(color);\n    });\n  } else {\n    domain = calculateDomain(data, name, scaleType);\n    scaleColor = colors;\n  }\n\n  if (scaleType === 'ordinal') {\n    domain = domain.slice(0, scaleColor.length);\n  }\n\n  scale.domain(domain);\n  scale.range(scaleColor);\n  scale.unknown(UNKNOWN_COLOR);\n  const alpha = opacityToAlpha(opacity);\n\n  const accessor = properties => {\n    const propertyValue = properties[name];\n    const {r, g, b} = rgb(scale(propertyValue));\n    return [r, g, b, propertyValue === null ? 0 : alpha];\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nexport function getSizeAccessor({name}, scaleType: SCALE_TYPE, range: Iterable<Range>, data: any) {\n  const scale = SCALE_FUNCS[scaleType as any]();\n  scale.domain(calculateDomain(data, name, scaleType));\n  scale.range(range);\n\n  const accessor = properties => {\n    return scale(properties[name]);\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nconst FORMATS: Record<string, (value: any) => string> = {\n  date: s => moment.utc(s).format('MM/DD/YY HH:mm:ssa'),\n  integer: d3Format('i'),\n  float: d3Format('.5f'),\n  timestamp: s => moment.utc(s).format('X'),\n  default: String\n};\n\nexport function getTextAccessor({name, type}, data) {\n  const format = FORMATS[type] || FORMATS.default;\n  const accessor = properties => {\n    return format(properties[name]);\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nexport function getTextPixelOffsetAccessor({alignment, anchor, size}, radius) {\n  const padding = 20;\n  const signX = anchor === 'middle' ? 0 : anchor === 'start' ? 1 : -1;\n  const signY = alignment === 'center' ? 0 : alignment === 'bottom' ? 1 : -1;\n  const sizeOffset = alignment === 'center' ? 0 : size;\n\n  const calculateOffset = r => [signX * (r + padding), signY * (r + padding + sizeOffset)];\n\n  return typeof radius === 'function'\n    ? d => {\n        return calculateOffset(radius(d));\n      }\n    : calculateOffset(radius);\n}\n\nexport {domainFromValues as _domainFromValues};\n"],"file":"layer-map.js"}