{"version":3,"sources":["../../../src/layers/carto-layer.ts"],"names":["defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","aggregationExp","aggregationResLevel","CartoLayer","state","apiVersion","getSubLayers","length","props","localCreds","log","assert","Object","values","API_VERSIONS","includes","V1","V2","MAP_TYPES","QUERY","TILESET","V3","COLUMNS_SUPPORT","join","GEO_COLUMN_SUPPORT","Array","isArray","oldProps","changeFlags","_checkProps","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","FORMATS","TILEJSON","propName","layer","_notUsed","propsNoData","MVTLayer","tileUrl","URL","tiles","searchParams","get","TILE_FORMATS","MVT","scheme","H3TileLayer","QuadbinTileLayer","CartoTileLayer","updateTriggers","_getSubLayerAndProps","getSubLayerProps","id","layerName","CompositeLayer"],"mappings":"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","sourcesContent":["import {\n  CompositeLayer,\n  Layer,\n  log,\n  CompositeLayerProps,\n  LayerProps,\n  ChangeFlags\n} from '@deck.gl/core';\nimport CartoTileLayer from './carto-tile-layer';\nimport H3TileLayer from './h3-tile-layer';\nimport QuadbinTileLayer from './quadbin-tile-layer';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {\n  COLUMNS_SUPPORT,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapType,\n  MAP_TYPES,\n  TileFormat,\n  TILE_FORMATS\n} from '../api/maps-api-common';\nimport {\n  ClassicCredentials,\n  CloudNativeCredentials,\n  Credentials,\n  getDefaultCredentials\n} from '../config';\nimport {FetchLayerDataResult} from '../api/maps-v3-client';\nimport {assert} from '../utils';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null},\n\n  // (String, optional): aggregation SQL expression. Only used for spatial index datasets\n  aggregationExp: null,\n\n  // (Number, optional): aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3\n  aggregationResLevel: null\n};\n\n/** All properties supported by CartoLayer. */\nexport type CartoLayerProps<DataT = any> = _CartoLayerProps & CompositeLayerProps<DataT>;\n\n/** Properties added by CartoLayer. */\ntype _CartoLayerProps = {\n  /**\n   * Either a SQL query or a name of dataset/tileset.\n   */\n  data: string;\n\n  /**\n   * Data type.\n   *\n   * Possible values are:\n   *  * `MAP_TYPES.QUERY`, if data is a SQL query.\n   *  * `MAP_TYPES.TILESET`, if data is a tileset name.\n   *  * `MAP_TYPES.TABLE`, if data is a dataset name. Only supported with API v3.\n   */\n  type: MapType;\n\n  /**\n   * Name of the connection registered in the CARTO workspace.\n   *\n   * Required when apiVersion is `API_VERSIONS.V3`.\n   */\n  connection?: string;\n\n  /**\n   * Use to override the default tile data format.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3`.\n   *\n   * Possible values are: `TILE_FORMATS.BINARY`, `TILE_FORMATS.GEOJSON` and `TILE_FORMATS.MVT`.\n   */\n  formatTiles?: TileFormat;\n\n  /**\n   * Name of the geo_column in the CARTO platform.\n   *\n   * Use this override the default column (`'geom'`), from which the geometry information should be fetched.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  geoColumn?: string;\n\n  /**\n   * Names of columns to fetch.\n   *\n   * By default, all columns are fetched\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  columns?: string[];\n\n  /**\n   * A string pointing to a unique attribute at the result of the query.\n   *\n   * A unique attribute is needed for highlighting with vector tiles when a feature is split across two or more tiles.\n   */\n  uniqueIdProperty?: string;\n\n  /**\n   * Optional. Overrides the configuration to connect with CARTO.\n   *\n   * @see Credentials\n   */\n  credentials?: Credentials;\n\n  /**\n   * Called when the request to the CARTO Maps API failed.\n   *\n   * By default the Error is thrown.\n   */\n  onDataError?: (err: unknown) => void;\n\n  clientId?: string;\n\n  /** Aggregation SQL expression. Only used for spatial index datasets **/\n  aggregationExp?: string;\n\n  /** Aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3. **/\n  aggregationResLevel?: number;\n};\n\nexport default class CartoLayer<ExtraProps = {}> extends CompositeLayer<\n  Required<_CartoLayerProps> & ExtraProps\n> {\n  static layerName = 'CartoLayer';\n  static defaultProps = defaultProps as any;\n\n  initializeState(): void {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props: CartoLayerProps): void {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (!COLUMNS_SUPPORT.includes(type)) {\n        log.assert(!columns, `columns prop is only supported for types: ${COLUMNS_SUPPORT.join()}`);\n      }\n      if (!GEO_COLUMN_SUPPORT.includes(type)) {\n        log.assert(\n          !geoColumn,\n          `geoColumn prop is only supported for types: ${GEO_COLUMN_SUPPORT.join()}`\n        );\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({\n    props,\n    oldProps,\n    changeFlags\n  }: {\n    props: CartoLayerProps;\n    oldProps: CartoLayerProps;\n    context: any;\n    changeFlags: ChangeFlags;\n  }): void {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.aggregationExp !== oldProps.aggregationExp ||\n      props.aggregationResLevel !== oldProps.aggregationResLevel ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateData();\n    }\n  }\n\n  async _updateData(): Promise<void> {\n    try {\n      const {type, data: source, clientId, credentials, connection, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result: Partial<FetchLayerDataResult>;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {\n          data: await getDataV2({type, source, credentials: credentials as ClassicCredentials})\n        };\n      } else {\n        result = await fetchLayerData({\n          type,\n          source,\n          clientId,\n          credentials: credentials as CloudNativeCredentials,\n          connection,\n          ...rest,\n          // CartoLayer only supports tiled output from v8.8, force data format\n          format: FORMATS.TILEJSON\n        });\n      }\n\n      this.setState({...result, apiVersion});\n\n      this.props.onDataLoad?.(result.data, {\n        propName: 'data',\n        layer: this\n      });\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err as Error);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps(): [any, LayerProps] {\n    assert(this.state);\n\n    const {data, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {data: _notUsed, ...propsNoData} = this.props;\n    // @ts-expect-error 'uniqueIdProperty' is specified more than once, so this usage will be overwritten.\n    const props = {uniqueIdProperty, ...propsNoData};\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    /* global URL */\n    const tileUrl = new URL(data.tiles[0]);\n\n    props.formatTiles =\n      props.formatTiles ||\n      (tileUrl.searchParams.get('formatTiles') as TileFormat) ||\n      TILE_FORMATS.MVT;\n\n    if (data.scheme === 'h3') {\n      return [H3TileLayer, props];\n    }\n    if (data.scheme === 'quadbin') {\n      return [QuadbinTileLayer, props];\n    }\n    return props.formatTiles === TILE_FORMATS.MVT ? [MVTLayer, props] : [CartoTileLayer, props];\n  }\n\n  renderLayers(): Layer | null {\n    assert(this.state);\n\n    const {data} = this.state;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n"],"file":"carto-layer.js"}