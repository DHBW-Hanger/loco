{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tile-manager.ts"],"names":["I3SPendingTilesRegister","STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","constructor","_statusMap","add","request","key","callback","frameState","frameNumber","status","pendingTilesRegister","register","then","data","actualFrameNumber","deregister","catch","error","update","find","hasPendingTiles","isZero"],"mappings":";AACA,OAAOA,uBAAP,MAAoC,qBAApC;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE,WADE;AAEbC,EAAAA,SAAS,EAAE,WAFE;AAGbC,EAAAA,KAAK,EAAE;AAHM,CAAf;AAOA,eAAe,MAAMC,cAAN,CAAqB;AAIlCC,EAAAA,WAAW,GAAG;AAAA;;AAAA,kDAFiB,IAAIN,uBAAJ,EAEjB;;AACZ,SAAKO,UAAL,GAAkB,EAAlB;AACD;;AAEDC,EAAAA,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyBC,UAAzB,EAAiD;AAClD,QAAI,CAAC,KAAKL,UAAL,CAAgBG,GAAhB,CAAL,EAA2B;AACzB,YAAM;AAACG,QAAAA;AAAD,UAAgBD,UAAtB;AACA,WAAKL,UAAL,CAAgBG,GAAhB,IAAuB;AAACD,QAAAA,OAAD;AAAUE,QAAAA,QAAV;AAAoBD,QAAAA,GAApB;AAAyBE,QAAAA,UAAzB;AAAqCE,QAAAA,MAAM,EAAEb,MAAM,CAACC;AAApD,OAAvB;AAEA,WAAKa,oBAAL,CAA0BC,QAA1B,CAAmCH,WAAnC;AACAJ,MAAAA,OAAO,GACJQ,IADH,CACSC,IAAD,IAAU;AACd,aAAKX,UAAL,CAAgBG,GAAhB,EAAqBI,MAArB,GAA8Bb,MAAM,CAACE,SAArC;AACA,cAAM;AAACU,UAAAA,WAAW,EAAEM;AAAd,YAAmC,KAAKZ,UAAL,CAAgBG,GAAhB,EAAqBE,UAA9D;AAEA,aAAKG,oBAAL,CAA0BK,UAA1B,CAAqCD,iBAArC;;AACA,aAAKZ,UAAL,CAAgBG,GAAhB,EAAqBC,QAArB,CAA8BO,IAA9B,EAAoCN,UAApC;AACD,OAPH,EAQGS,KARH,CAQUC,KAAD,IAAW;AAChB,aAAKf,UAAL,CAAgBG,GAAhB,EAAqBI,MAArB,GAA8Bb,MAAM,CAACG,KAArC;AACA,cAAM;AAACS,UAAAA,WAAW,EAAEM;AAAd,YAAmC,KAAKZ,UAAL,CAAgBG,GAAhB,EAAqBE,UAA9D;AAEA,aAAKG,oBAAL,CAA0BK,UAA1B,CAAqCD,iBAArC;AACAR,QAAAA,QAAQ,CAACW,KAAD,CAAR;AACD,OAdH;AAeD;AACF;;AAEDC,EAAAA,MAAM,CAACb,GAAD,EAAME,UAAN,EAA8B;AAClC,QAAI,KAAKL,UAAL,CAAgBG,GAAhB,CAAJ,EAA0B;AAExB,WAAKK,oBAAL,CAA0BK,UAA1B,CAAqC,KAAKb,UAAL,CAAgBG,GAAhB,EAAqBE,UAArB,CAAgCC,WAArE;AAEA,WAAKE,oBAAL,CAA0BC,QAA1B,CAAmCJ,UAAU,CAACC,WAA9C;AACA,WAAKN,UAAL,CAAgBG,GAAhB,EAAqBE,UAArB,GAAkCA,UAAlC;AACD;AACF;;AAEDY,EAAAA,IAAI,CAACd,GAAD,EAAM;AACR,WAAO,KAAKH,UAAL,CAAgBG,GAAhB,CAAP;AACD;;AAODe,EAAAA,eAAe,CAACZ,WAAD,EAA+B;AAC5C,WAAO,CAAC,KAAKE,oBAAL,CAA0BW,MAA1B,CAAiCb,WAAjC,CAAR;AACD;;AArDiC","sourcesContent":["import {FrameState} from '../helpers/frame-state';\nimport I3SPendingTilesRegister from './i3s-frame-counter';\n\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n\n// A helper class to manage tile metadata fetching\nexport default class I3STileManager {\n  private _statusMap: object;\n  private pendingTilesRegister = new I3SPendingTilesRegister();\n\n  constructor() {\n    this._statusMap = {};\n  }\n\n  add(request, key, callback, frameState: FrameState) {\n    if (!this._statusMap[key]) {\n      const {frameNumber} = frameState;\n      this._statusMap[key] = {request, callback, key, frameState, status: STATUS.REQUESTED};\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(frameNumber);\n      request()\n        .then((data) => {\n          this._statusMap[key].status = STATUS.COMPLETED;\n          const {frameNumber: actualFrameNumber} = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(actualFrameNumber);\n          this._statusMap[key].callback(data, frameState);\n        })\n        .catch((error) => {\n          this._statusMap[key].status = STATUS.ERROR;\n          const {frameNumber: actualFrameNumber} = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(actualFrameNumber);\n          callback(error);\n        });\n    }\n  }\n\n  update(key, frameState: FrameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      this.pendingTilesRegister.deregister(this._statusMap[key].frameState.frameNumber);\n      // Register pending request for the new frameNumber\n      this.pendingTilesRegister.register(frameState.frameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(frameNumber: number): boolean {\n    return !this.pendingTilesRegister.isZero(frameNumber);\n  }\n}\n"],"file":"i3s-tile-manager.js"}