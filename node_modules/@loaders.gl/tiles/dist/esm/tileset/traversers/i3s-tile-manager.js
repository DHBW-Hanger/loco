import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import I3SPendingTilesRegister from './i3s-frame-counter';
const STATUS = {
  REQUESTED: 'REQUESTED',
  COMPLETED: 'COMPLETED',
  ERROR: 'ERROR'
};
export default class I3STileManager {
  constructor() {
    _defineProperty(this, "_statusMap", void 0);

    _defineProperty(this, "pendingTilesRegister", new I3SPendingTilesRegister());

    this._statusMap = {};
  }

  add(request, key, callback, frameState) {
    if (!this._statusMap[key]) {
      const {
        frameNumber
      } = frameState;
      this._statusMap[key] = {
        request,
        callback,
        key,
        frameState,
        status: STATUS.REQUESTED
      };
      this.pendingTilesRegister.register(frameNumber);
      request().then(data => {
        this._statusMap[key].status = STATUS.COMPLETED;
        const {
          frameNumber: actualFrameNumber
        } = this._statusMap[key].frameState;
        this.pendingTilesRegister.deregister(actualFrameNumber);

        this._statusMap[key].callback(data, frameState);
      }).catch(error => {
        this._statusMap[key].status = STATUS.ERROR;
        const {
          frameNumber: actualFrameNumber
        } = this._statusMap[key].frameState;
        this.pendingTilesRegister.deregister(actualFrameNumber);
        callback(error);
      });
    }
  }

  update(key, frameState) {
    if (this._statusMap[key]) {
      this.pendingTilesRegister.deregister(this._statusMap[key].frameState.frameNumber);
      this.pendingTilesRegister.register(frameState.frameNumber);
      this._statusMap[key].frameState = frameState;
    }
  }

  find(key) {
    return this._statusMap[key];
  }

  hasPendingTiles(frameNumber) {
    return !this.pendingTilesRegister.isZero(frameNumber);
  }

}
//# sourceMappingURL=i3s-tile-manager.js.map