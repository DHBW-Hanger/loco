"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _i3sFrameCounter = _interopRequireDefault(require("./i3s-frame-counter"));

var STATUS = {
  REQUESTED: 'REQUESTED',
  COMPLETED: 'COMPLETED',
  ERROR: 'ERROR'
};

var I3STileManager = function () {
  function I3STileManager() {
    (0, _classCallCheck2.default)(this, I3STileManager);
    (0, _defineProperty2.default)(this, "_statusMap", void 0);
    (0, _defineProperty2.default)(this, "pendingTilesRegister", new _i3sFrameCounter.default());
    this._statusMap = {};
  }

  (0, _createClass2.default)(I3STileManager, [{
    key: "add",
    value: function add(request, key, callback, frameState) {
      var _this = this;

      if (!this._statusMap[key]) {
        var frameNumber = frameState.frameNumber;
        this._statusMap[key] = {
          request: request,
          callback: callback,
          key: key,
          frameState: frameState,
          status: STATUS.REQUESTED
        };
        this.pendingTilesRegister.register(frameNumber);
        request().then(function (data) {
          _this._statusMap[key].status = STATUS.COMPLETED;
          var actualFrameNumber = _this._statusMap[key].frameState.frameNumber;

          _this.pendingTilesRegister.deregister(actualFrameNumber);

          _this._statusMap[key].callback(data, frameState);
        }).catch(function (error) {
          _this._statusMap[key].status = STATUS.ERROR;
          var actualFrameNumber = _this._statusMap[key].frameState.frameNumber;

          _this.pendingTilesRegister.deregister(actualFrameNumber);

          callback(error);
        });
      }
    }
  }, {
    key: "update",
    value: function update(key, frameState) {
      if (this._statusMap[key]) {
        this.pendingTilesRegister.deregister(this._statusMap[key].frameState.frameNumber);
        this.pendingTilesRegister.register(frameState.frameNumber);
        this._statusMap[key].frameState = frameState;
      }
    }
  }, {
    key: "find",
    value: function find(key) {
      return this._statusMap[key];
    }
  }, {
    key: "hasPendingTiles",
    value: function hasPendingTiles(frameNumber) {
      return !this.pendingTilesRegister.isZero(frameNumber);
    }
  }]);
  return I3STileManager;
}();

exports.default = I3STileManager;
//# sourceMappingURL=i3s-tile-manager.js.map