function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, getSlots } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';

const Appbar = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    inner = true,
    innerClass,
    innerClassName,
    noShadow,
    noHairline
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  let innerEl;

  if (inner) {
    innerEl = /*#__PURE__*/React.createElement("div", {
      className: classNames('appbar-inner', innerClass, innerClassName)
    }, children);
  }

  const classes = classNames(className, 'appbar', {
    'no-shadow': noShadow,
    'no-hairline': noHairline
  }, colorClasses(props));
  const slots = getSlots(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), slots['before-inner'], innerEl || slots.default, slots['after-inner']);
});
Appbar.displayName = 'f7-appbar';
export default Appbar;