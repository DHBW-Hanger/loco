function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect.js';
import { classNames, getExtraAttrs, emit, getSlots, noUndefinedProps } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import Link from './link.js';
import Input from './input.js';
import { f7ready, f7 } from '../shared/f7.js';
import { watchProp } from '../shared/watch-prop.js';


const Messagebar = /*#__PURE__*/forwardRef((props, ref) => {
  const f7Messagebar = useRef(null);
  const updateSheetVisible = useRef(false);
  const updateAttachmentsVisible = useRef(false);
  const {
    className,
    id,
    style,
    sheetVisible,
    attachmentsVisible,
    top,
    resizable = true,
    bottomOffset = 0,
    topOffset = 0,
    maxHeight,
    resizePage = true,
    sendLink,
    value,
    disabled,
    readonly,
    textareaId,
    name,
    placeholder = 'Message',
    init = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  const areaElRef = useRef(null);

  const onChange = event => {
    emit(props, 'change', event);
  };

  const onInput = event => {
    emit(props, 'input', event);
  };

  const onFocus = event => {
    emit(props, 'focus', event);
  };

  const onBlur = event => {
    emit(props, 'blur', event);
  };

  const onClick = event => {
    const inputValue = areaElRef.current.el.value;
    const clear = f7Messagebar.current ? () => {
      f7Messagebar.current.clear();
    } : () => {};
    emit(props, 'submit', inputValue, clear);
    emit(props, 'send', inputValue, clear);
    emit(props, 'click', event);
  };

  const onAttachmentDelete = (instance, attachmentEl, attachmentElIndex) => {
    emit(props, 'messagebarAttachmentDelete', instance, attachmentEl, attachmentElIndex);
  };

  const onAttachmentClick = (instance, attachmentEl, attachmentElIndex) => {
    emit(props, 'messagebarAttachmentClick', instance, attachmentEl, attachmentElIndex);
  };

  const onResizePage = instance => {
    emit(props, 'messagebarResizePage', instance);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current,
    f7Messagebar: () => f7Messagebar.current
  }));
  watchProp(sheetVisible, () => {
    if (!resizable || !f7Messagebar.current) return;
    updateSheetVisible.current = true;
  });
  watchProp(attachmentsVisible, () => {
    if (!resizable || !f7Messagebar.current) return;
    updateAttachmentsVisible.current = true;
  });
  useIsomorphicLayoutEffect(() => {
    if (!f7Messagebar.current) return;

    if (updateSheetVisible.current) {
      updateSheetVisible.current = false;
      f7Messagebar.current.sheetVisible = sheetVisible;
      f7Messagebar.current.resizePage();
    }

    if (updateAttachmentsVisible.current) {
      updateAttachmentsVisible.current = false;
      f7Messagebar.current.attachmentsVisible = attachmentsVisible;
      f7Messagebar.current.resizePage();
    }
  });

  const onMount = () => {
    if (!init) return;
    if (!elRef.current) return;
    const params = noUndefinedProps({
      el: elRef.current,
      top,
      resizePage,
      bottomOffset,
      topOffset,
      maxHeight,
      on: {
        attachmentDelete: onAttachmentDelete,
        attachmentClick: onAttachmentClick,
        resizePage: onResizePage
      }
    });
    f7ready(() => {
      f7Messagebar.current = f7.messagebar.create(params);
    });
  };

  const onDestroy = () => {
    if (f7Messagebar.current && f7Messagebar.current.destroy) f7Messagebar.current.destroy();
    f7Messagebar.current = null;
  };

  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  const slots = getSlots(props);
  const {
    default: slotsDefault,
    'before-inner': slotsBeforeInner,
    'after-inner': slotsAfterInner,
    'send-link': slotsSendLink,
    'inner-start': slotsInnerStart,
    'inner-end': slotsInnerEnd,
    'before-area': slotsBeforeArea,
    'after-area': slotsAfterArea
  } = slots;
  const innerEndEls = [];
  let messagebarAttachmentsEl;
  let messagebarSheetEl;

  if (slotsDefault) {
    slotsDefault.forEach(child => {
      if (typeof child === 'undefined') return;
      const tag = child.type && (child.type.displayName || child.type.name);

      if (tag && (tag.indexOf('messagebar-attachments') >= 0 || tag === 'F7MessagebarAttachments' || tag === 'f7-messagebar-attachments')) {
        messagebarAttachmentsEl = child;
      } else if (tag && (tag.indexOf('messagebar-sheet') >= 0 || tag === 'F7MessagebarSheet' || tag === 'f7-messagebar-sheet')) {
        messagebarSheetEl = child;
      } else {
        innerEndEls.push(child);
      }
    });
  }

  const valueProps = {};
  if ('value' in props) valueProps.value = value;
  const classes = classNames(className, 'toolbar', 'messagebar', {
    'messagebar-attachments-visible': attachmentsVisible,
    'messagebar-sheet-visible': sheetVisible
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), slotsBeforeInner, /*#__PURE__*/React.createElement("div", {
    className: "toolbar-inner"
  }, slotsInnerStart, /*#__PURE__*/React.createElement("div", {
    className: "messagebar-area"
  }, slotsBeforeArea, messagebarAttachmentsEl, /*#__PURE__*/React.createElement(Input, _extends({
    id: textareaId,
    ref: areaElRef,
    type: "textarea",
    wrap: false,
    placeholder: placeholder,
    disabled: disabled,
    name: name,
    readonly: readonly,
    resizable: resizable,
    onInput: onInput,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur
  }, valueProps)), slotsAfterArea), (sendLink && sendLink.length > 0 || slotsSendLink) && /*#__PURE__*/React.createElement(Link, {
    onClick: onClick
  }, slotsSendLink || sendLink), slotsInnerEnd, innerEndEls), slotsAfterInner, messagebarSheetEl);
});
Messagebar.displayName = 'f7-messagebar';
export default Messagebar;