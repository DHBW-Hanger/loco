function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle, useContext } from 'react';
import { classNames, getExtraAttrs, isStringProp, emit } from '../shared/utils.js';
import { colorClasses, routerAttrs, routerClasses, actionsAttrs, actionsClasses } from '../shared/mixins.js';
import { useIcon } from '../shared/use-icon.js';
import { useRouteProps } from '../shared/use-route-props.js';
import { useTooltip } from '../shared/use-tooltip.js';
import { TabbarContext } from '../shared/tabbar-context.js';
import Badge from './badge.js';
import { useSmartSelect } from '../shared/use-smart-select.js';


const Link = /*#__PURE__*/forwardRef((props, ref) => {
  const f7SmartSelect = useRef(null);
  const {
    className,
    id,
    style,
    children,
    noLinkClass,
    text,
    tabLink,
    tabLinkActive,
    tabbarLabel,
    iconOnly,
    badge,
    badgeColor,
    href = '#',
    target,
    // Smart Select
    smartSelect,
    smartSelectParams
  } = props;
  const tabbarContext = useContext(TabbarContext);
  const isTabbarLabel = tabbarLabel || tabbarContext.tabbarHasLabels;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = e => {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current,
    f7SmartSelect: () => f7SmartSelect.current
  }));
  useTooltip(elRef, props);
  useRouteProps(elRef, props);
  useSmartSelect(smartSelect, smartSelectParams, f7SmartSelect, () => {
    return elRef.current;
  });
  let textEl;
  let badgeEl;

  if (text) {
    if (badge) badgeEl = /*#__PURE__*/React.createElement(Badge, {
      color: badgeColor
    }, badge);
    textEl = /*#__PURE__*/React.createElement("span", {
      className: isTabbarLabel ? 'tabbar-label' : ''
    }, text, badgeEl);
  }

  const iconEl = useIcon(props);
  let iconOnlyComputed;

  if (iconOnly || !text && children && children.length === 0 || !text && !children) {
    iconOnlyComputed = true;
  } else {
    iconOnlyComputed = false;
  }

  const classes = classNames(className, {
    link: !(noLinkClass || isTabbarLabel),
    'icon-only': iconOnlyComputed,
    'tab-link': tabLink || tabLink === '',
    'tab-link-active': tabLinkActive,
    'smart-select': smartSelect
  }, colorClasses(props), routerClasses(props), actionsClasses(props));
  let hrefComputed = href;
  if (href === true) hrefComputed = '#';
  if (href === false) hrefComputed = undefined; // no href attribute

  const attrs = {
    href: hrefComputed,
    target,
    'data-tab': isStringProp(tabLink) && tabLink || undefined,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return /*#__PURE__*/React.createElement("a", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, attrs, extraAttrs, {
    onClick: onClick
  }), iconEl, textEl, children);
});
Link.displayName = 'f7-link';
export default Link;