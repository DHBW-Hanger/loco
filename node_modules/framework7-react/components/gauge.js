function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint no-nested-ternary: off */
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';

const Gauge = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    type = 'circle',
    value = 0,
    size = 200,
    bgColor = 'transparent',
    borderBgColor = '#eeeeee',
    borderColor = '#000000',
    borderWidth = 10,
    valueText,
    valueTextColor = '#000000',
    valueFontSize = 31,
    valueFontWeight = 500,
    labelText,
    labelTextColor = '#888888',
    labelFontSize = 14,
    labelFontWeight = 400
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, 'gauge');
  const semiCircle = type === 'semicircle';
  const radius = size / 2 - borderWidth / 2;
  const length = 2 * Math.PI * radius;
  const progress = Math.max(Math.min(value, 1), 0);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("svg", {
    className: "gauge-svg",
    width: `${size}px`,
    height: `${semiCircle ? size / 2 : size}px`,
    viewBox: `0 0 ${size} ${semiCircle ? size / 2 : size}`
  }, semiCircle && /*#__PURE__*/React.createElement("path", {
    className: "gauge-back-semi",
    d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,
    stroke: borderBgColor,
    strokeWidth: borderWidth,
    fill: bgColor || 'none'
  }), semiCircle && /*#__PURE__*/React.createElement("path", {
    className: "gauge-front-semi",
    d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,
    stroke: borderColor,
    strokeWidth: borderWidth,
    strokeDasharray: length / 2,
    strokeDashoffset: length / 2 * (1 + progress),
    fill: borderBgColor ? 'none' : bgColor || 'none'
  }), !semiCircle && borderBgColor && /*#__PURE__*/React.createElement("circle", {
    className: "gauge-back-circle",
    stroke: borderBgColor,
    strokeWidth: borderWidth,
    fill: bgColor || 'none',
    cx: size / 2,
    cy: size / 2,
    r: radius
  }), !semiCircle && /*#__PURE__*/React.createElement("circle", {
    className: "gauge-front-circle",
    transform: `rotate(-90 ${size / 2} ${size / 2})`,
    stroke: borderColor,
    strokeWidth: borderWidth,
    strokeDasharray: length,
    strokeDashoffset: length * (1 - progress),
    fill: borderBgColor ? 'none' : bgColor || 'none',
    cx: size / 2,
    cy: size / 2,
    r: radius
  }), valueText && /*#__PURE__*/React.createElement("text", {
    className: "gauge-value-text",
    x: "50%",
    y: semiCircle ? '100%' : '50%',
    fontWeight: valueFontWeight,
    fontSize: valueFontSize,
    fill: valueTextColor,
    dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,
    textAnchor: "middle",
    dominantBaseline: !semiCircle ? 'middle' : null
  }, valueText), labelText && /*#__PURE__*/React.createElement("text", {
    className: "gauge-label-text",
    x: "50%",
    y: semiCircle ? '100%' : '50%',
    fontWeight: labelFontWeight,
    fontSize: labelFontSize,
    fill: labelTextColor,
    dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,
    textAnchor: "middle",
    dominantBaseline: !semiCircle ? 'middle' : null
  }, labelText)));
});
Gauge.displayName = 'f7-gauge';
export default Gauge;