function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';

const Message = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    text,
    name,
    avatar,
    type = 'sent',
    image,
    header,
    footer,
    textHeader,
    textFooter,
    first,
    last,
    tail,
    sameName,
    sameHeader,
    sameFooter,
    sameAvatar,
    typing
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = event => {
    emit(props, 'click', event);
  };

  const onNameClick = event => {
    emit(props, 'clickName', event);
  };

  const onTextClick = event => {
    emit(props, 'clickText', event);
  };

  const onAvatarClick = event => {
    emit(props, 'clickAvatar', event);
  };

  const onHeaderClick = event => {
    emit(props, 'clickHeader', event);
  };

  const onFooterClick = event => {
    emit(props, 'clickFooter', event);
  };

  const onBubbleClick = event => {
    emit(props, 'clickBubble', event);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  const slots = getSlots(props);
  const classes = classNames(className, 'message', {
    'message-sent': type === 'sent',
    'message-received': type === 'received',
    'message-typing': typing,
    'message-first': first,
    'message-last': last,
    'message-tail': tail,
    'message-same-name': sameName,
    'message-same-header': sameHeader,
    'message-same-footer': sameFooter,
    'message-same-avatar': sameAvatar
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), slots.start, (avatar || slots.avatar) && /*#__PURE__*/React.createElement("div", {
    className: "message-avatar",
    style: {
      backgroundImage: avatar && `url(${avatar})`
    },
    onClick: onAvatarClick
  }, slots.avatar), /*#__PURE__*/React.createElement("div", {
    className: "message-content"
  }, slots['content-start'], (slots.name || name) && /*#__PURE__*/React.createElement("div", {
    className: "message-name",
    onClick: onNameClick
  }, name, slots.name), (slots.header || header) && /*#__PURE__*/React.createElement("div", {
    className: "message-header",
    onClick: onHeaderClick
  }, header, slots.header), /*#__PURE__*/React.createElement("div", {
    className: "message-bubble",
    onClick: onBubbleClick
  }, slots['bubble-start'], (slots.image || image) && /*#__PURE__*/React.createElement("div", {
    className: "message-image"
  }, slots.image || /*#__PURE__*/React.createElement("img", {
    src: image
  })), (slots['text-header'] || textHeader) && /*#__PURE__*/React.createElement("div", {
    className: "message-text-header"
  }, textHeader, slots['text-header']), (slots.text || text || typing) && /*#__PURE__*/React.createElement("div", {
    className: "message-text",
    onClick: onTextClick
  }, text, slots.text, typing && /*#__PURE__*/React.createElement("div", {
    className: "message-typing-indicator"
  }, /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", null))), (slots['text-footer'] || textFooter) && /*#__PURE__*/React.createElement("div", {
    className: "message-text-footer"
  }, textFooter, slots['text-footer']), slots['bubble-end'], slots.default), (slots.footer || footer) && /*#__PURE__*/React.createElement("div", {
    className: "message-footer",
    onClick: onFooterClick
  }, footer, slots.footer), slots['content-end']), slots.end);
});
Message.displayName = 'f7-message';
export default Message;