function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect.js';
import { classNames, getExtraAttrs, getSlots, noUndefinedProps, emit } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { f7ready, f7 } from '../shared/f7.js';


const Searchbar = /*#__PURE__*/forwardRef((props, ref) => {
  const f7Searchbar = useRef(null);
  const {
    className,
    id,
    style,
    noShadow,
    noHairline,
    form = true,
    placeholder = 'Search',
    spellcheck,
    disableButton = true,
    disableButtonText = 'Cancel',
    clearButton = true,
    // Input Value
    value,
    // SB Params
    inputEvents = 'change input compositionend',
    expandable,
    inline,
    searchContainer,
    searchIn = '.item-title',
    searchItem = 'li',
    searchGroup = '.list-group',
    searchGroupTitle = '.item-divider, .list-group-title',
    foundEl = '.searchbar-found',
    notFoundEl = '.searchbar-not-found',
    backdrop,
    backdropEl,
    hideOnEnableEl = '.searchbar-hide-on-enable',
    hideOnSearchEl = '.searchbar-hide-on-search',
    ignore = '.searchbar-ignore',
    customSearch = false,
    removeDiacritics = false,
    hideDividers = true,
    hideGroups = true,
    init = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const search = query => {
    if (!f7Searchbar.current) return undefined;
    return f7Searchbar.current.search(query);
  };

  const enable = () => {
    if (!f7Searchbar.current) return undefined;
    return f7Searchbar.current.enable();
  };

  const disable = () => {
    if (!f7Searchbar.current) return undefined;
    return f7Searchbar.current.disable();
  };

  const toggle = () => {
    if (!f7Searchbar.current) return undefined;
    return f7Searchbar.current.toggle();
  };

  const clear = () => {
    if (!f7Searchbar.current) return undefined;
    return f7Searchbar.current.clear();
  };

  const onChange = event => {
    emit(props, 'change', event);
  };

  const onInput = event => {
    emit(props, 'input', event);
  };

  const onFocus = event => {
    emit(props, 'focus', event);
  };

  const onBlur = event => {
    emit(props, 'blur', event);
  };

  const onSubmit = event => {
    emit(props, 'submit', event);
  };

  const onClearButtonClick = event => {
    emit(props, 'click:clear clickClear', event);
  };

  const onDisableButtonClick = event => {
    emit(props, 'click:disable clickDisable', event);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current,
    f7Searchbar: () => f7Searchbar.current,
    search,
    enable,
    disable,
    toggle,
    clear
  }));

  const onMount = () => {
    if (!init) return;
    f7ready(() => {
      const params = noUndefinedProps({
        el: elRef.current,
        inputEvents,
        searchContainer,
        searchIn,
        searchItem,
        searchGroup,
        searchGroupTitle,
        hideOnEnableEl,
        hideOnSearchEl,
        foundEl,
        notFoundEl,
        backdrop,
        backdropEl,
        disableButton,
        ignore,
        customSearch,
        removeDiacritics,
        hideDividers,
        hideGroups,
        expandable,
        inline,
        on: {
          search(searchbar, query, previousQuery) {
            emit(props, 'searchbarSearch', searchbar, query, previousQuery);
          },

          clear(searchbar, previousQuery) {
            emit(props, 'searchbarClear', searchbar, previousQuery);
          },

          enable(searchbar) {
            emit(props, 'searchbarEnable', searchbar);
          },

          disable(searchbar) {
            emit(props, 'searchbarDisable', searchbar);
          }

        }
      });
      Object.keys(params).forEach(key => {
        if (params[key] === '') {
          delete params[key];
        }
      });
      f7Searchbar.current = f7.searchbar.create(params);
    });
  };

  const onDestroy = () => {
    if (f7Searchbar.current && f7Searchbar.current.destroy) f7Searchbar.current.destroy();
    f7Searchbar.current = null;
  };

  useIsomorphicLayoutEffect(() => {
    onMount();
    return onDestroy;
  }, []);
  let clearEl;
  let disableEl;

  if (clearButton) {
    clearEl = /*#__PURE__*/React.createElement("span", {
      className: "input-clear-button",
      onClick: onClearButtonClick
    });
  }

  if (disableButton) {
    disableEl = /*#__PURE__*/React.createElement("span", {
      className: "searchbar-disable-button",
      onClick: onDisableButtonClick
    }, disableButtonText);
  }

  const SearchbarTag = form ? 'form' : 'div';
  const classes = classNames(className, 'searchbar', {
    'searchbar-inline': inline,
    'no-shadow': noShadow,
    'no-hairline': noHairline,
    'searchbar-expandable': expandable
  }, colorClasses(props));
  const slots = getSlots(props);
  return /*#__PURE__*/React.createElement(SearchbarTag, _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, extraAttrs, {
    onSubmit: onSubmit
  }), slots['before-inner'], /*#__PURE__*/React.createElement("div", {
    className: "searchbar-inner"
  }, slots['inner-start'], /*#__PURE__*/React.createElement("div", {
    className: "searchbar-input-wrap"
  }, slots['input-wrap-start'], /*#__PURE__*/React.createElement("input", {
    value: value,
    placeholder: placeholder,
    spellCheck: spellcheck,
    type: "search",
    onInput: onInput,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur
  }), /*#__PURE__*/React.createElement("i", {
    className: "searchbar-icon"
  }), clearEl, slots['input-wrap-end']), disableEl, slots['inner-end'], slots.default), slots['after-inner']);
});
Searchbar.displayName = 'f7-searchbar';
export default Searchbar;