function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, extend, isStringProp, emit } from '../shared/utils.js';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins.js';
import { useTooltip } from '../shared/use-tooltip.js';
import { useIcon } from '../shared/use-icon.js';
import { useRouteProps } from '../shared/use-route-props.js';
import Preloader from './preloader.js';

const Button = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    text,
    type,
    href = '#',
    target,
    tabLink,
    tabLinkActive,
    round,
    roundIos,
    roundAurora,
    roundMd,
    fill,
    fillIos,
    fillAurora,
    fillMd,
    large,
    largeIos,
    largeAurora,
    largeMd,
    small,
    smallIos,
    smallAurora,
    smallMd,
    raised,
    raisedIos,
    raisedAurora,
    raisedMd,
    active,
    outline,
    outlineIos,
    outlineAurora,
    outlineMd,
    disabled,
    preloader,
    preloaderSize,
    preloaderColor,
    loading
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = e => {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  useRouteProps(elRef, props);

  const getClasses = () => {
    return classNames(className, 'button', {
      'tab-link': tabLink || tabLink === '',
      'tab-link-active': tabLinkActive,
      'button-round': round,
      'button-round-ios': roundIos,
      'button-round-aurora': roundAurora,
      'button-round-md': roundMd,
      'button-fill': fill,
      'button-fill-ios': fillIos,
      'button-fill-aurora': fillAurora,
      'button-fill-md': fillMd,
      'button-large': large,
      'button-large-ios': largeIos,
      'button-large-aurora': largeAurora,
      'button-large-md': largeMd,
      'button-small': small,
      'button-small-ios': smallIos,
      'button-small-aurora': smallAurora,
      'button-small-md': smallMd,
      'button-raised': raised,
      'button-raised-ios': raisedIos,
      'button-raised-aurora': raisedAurora,
      'button-raised-md': raisedMd,
      'button-active': active,
      'button-outline': outline,
      'button-outline-ios': outlineIos,
      'button-outline-aurora': outlineAurora,
      'button-outline-md': outlineMd,
      'button-preloader': preloader,
      'button-loading': loading,
      disabled
    }, colorClasses(props), routerClasses(props), actionsClasses(props));
  };

  const ButtonTag = type === 'submit' || type === 'reset' || type === 'button' ? 'button' : 'a';

  const getAttrs = () => {
    let hrefComputed = href;
    if (href === true) hrefComputed = '#';
    if (href === false || ButtonTag === 'button') hrefComputed = undefined; // no href attribute

    return extend({
      href: hrefComputed,
      target,
      type,
      'data-tab': isStringProp(tabLink) && tabLink || undefined
    }, routerAttrs(props), actionsAttrs(props));
  };

  const iconEl = useIcon(props);
  let textEl;

  if (text) {
    textEl = /*#__PURE__*/React.createElement("span", null, text);
  }

  if (preloader) {
    return /*#__PURE__*/React.createElement(ButtonTag, _extends({
      ref: elRef,
      id: id,
      style: style,
      className: getClasses()
    }, getAttrs(), extraAttrs, {
      onClick: onClick
    }), /*#__PURE__*/React.createElement(Preloader, {
      size: preloaderSize,
      color: preloaderColor
    }), /*#__PURE__*/React.createElement("span", null, iconEl, textEl, children));
  }

  return /*#__PURE__*/React.createElement(ButtonTag, _extends({
    ref: elRef,
    id: id,
    style: style,
    className: getClasses()
  }, getAttrs(), extraAttrs, {
    onClick: onClick
  }), iconEl, textEl, children);
});
Button.displayName = 'f7-button';
export default Button;