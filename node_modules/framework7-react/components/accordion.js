function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';

const Accordion = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    accordionOpposite,
    children
  } = props;
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  const extraAttrs = getExtraAttrs(props);
  const classes = classNames(className, 'accordion-list', accordionOpposite && 'accordion-opposite', colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Accordion.displayName = 'f7-accordion';
export default Accordion;