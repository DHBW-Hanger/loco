import React, { useRef, useEffect } from 'react';
import { classNames } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import Badge from './badge.js';

const ListItemContent = props => {
  const {
    indeterminate,
    radio,
    checkbox,
    value,
    name,
    readonly,
    disabled,
    checked,
    defaultChecked,
    required,
    media,
    header,
    footer,
    title,
    subtitle,
    text,
    after,
    badge,
    badgeColor,
    radioIcon,
    swipeout,
    sortable,
    accordionItem,
    onChange,
    onClick,
    isMediaComputed,
    isSortableComputed,
    isSortableOppositeComputed,
    slots
  } = props;
  const inputElRef = useRef(null);
  useEffect(() => {
    if (inputElRef.current) {
      inputElRef.current.indeterminate = !!indeterminate;
    }
  }, [indeterminate]);
  let titleEl;
  let afterWrapEl;
  let afterEl;
  let badgeEl;
  let innerEl;
  let titleRowEl;
  let subtitleEl;
  let textEl;
  let mediaEl;
  let inputEl;
  let inputIconEl;
  let headerEl;
  let footerEl; // Input

  if (radio || checkbox) {
    inputEl = /*#__PURE__*/React.createElement("input", {
      ref: inputElRef,
      value: value,
      name: name,
      checked: checked,
      defaultChecked: defaultChecked,
      readOnly: readonly,
      disabled: disabled,
      required: required,
      type: radio ? 'radio' : 'checkbox',
      onChange: onChange
    });
    inputIconEl = /*#__PURE__*/React.createElement("i", {
      className: `icon icon-${radio ? 'radio' : 'checkbox'}`
    });
  } // Media


  if (media || slots.media) {
    let mediaImgEl;

    if (media) {
      mediaImgEl = /*#__PURE__*/React.createElement("img", {
        src: media
      });
    }

    mediaEl = /*#__PURE__*/React.createElement("div", {
      className: "item-media"
    }, mediaImgEl, slots.media);
  } // Inner Elements


  if (header || slots.header) {
    headerEl = /*#__PURE__*/React.createElement("div", {
      className: "item-header"
    }, header, slots.header);
  }

  if (footer || slots.footer) {
    footerEl = /*#__PURE__*/React.createElement("div", {
      className: "item-footer"
    }, footer, slots.footer);
  }

  if (title || slots.title || !isMediaComputed && headerEl || !isMediaComputed && footerEl) {
    titleEl = /*#__PURE__*/React.createElement("div", {
      className: "item-title"
    }, !isMediaComputed && headerEl, title, slots.title, !isMediaComputed && footerEl);
  }

  if (subtitle || slots.subtitle) {
    subtitleEl = /*#__PURE__*/React.createElement("div", {
      className: "item-subtitle"
    }, subtitle, slots.subtitle);
  }

  if (text || slots.text) {
    textEl = /*#__PURE__*/React.createElement("div", {
      className: "item-text"
    }, text, slots.text);
  }

  if (after || badge || slots.after) {
    if (after) {
      afterEl = /*#__PURE__*/React.createElement("span", null, after);
    }

    if (badge) {
      badgeEl = /*#__PURE__*/React.createElement(Badge, {
        color: badgeColor
      }, badge);
    }

    afterWrapEl = /*#__PURE__*/React.createElement("div", {
      className: "item-after"
    }, slots['after-start'], afterEl, badgeEl, slots.after, slots['after-end']);
  }

  if (isMediaComputed) {
    titleRowEl = /*#__PURE__*/React.createElement("div", {
      className: "item-title-row"
    }, slots['before-title'], titleEl, slots['after-title'], afterWrapEl);
    innerEl = /*#__PURE__*/React.createElement("div", {
      className: "item-inner"
    }, slots['inner-start'], headerEl, titleRowEl, subtitleEl, textEl, swipeout || accordionItem ? null : slots.default, slots.inner, footerEl, slots['inner-end']);
  } else {
    innerEl = /*#__PURE__*/React.createElement("div", {
      className: "item-inner"
    }, slots['inner-start'], slots['before-title'], titleEl, slots['after-title'], afterWrapEl, swipeout || accordionItem ? null : slots.default, slots.inner, slots['inner-end']);
  }

  const ItemContentTag = checkbox || radio ? 'label' : 'div';
  const classes = classNames('item-content', {
    'item-checkbox': checkbox,
    'item-radio': radio,
    'item-radio-icon-start': radio && radioIcon === 'start',
    'item-radio-icon-end': radio && radioIcon === 'end'
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement(ItemContentTag, {
    className: classes,
    onClick: onClick
  }, isSortableComputed && sortable !== false && isSortableOppositeComputed && /*#__PURE__*/React.createElement("div", {
    className: "sortable-handler"
  }), slots['content-start'], inputEl, inputIconEl, mediaEl, innerEl, slots.content, slots['content-end']);
};

ListItemContent.displayName = 'f7-list-item-content';
export default ListItemContent;