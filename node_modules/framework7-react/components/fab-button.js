function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, emit } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { useTooltip } from '../shared/use-tooltip.js';

const FabButton = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    fabClose,
    label,
    target
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = e => {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useTooltip(elRef, props);
  const classes = classNames(className, {
    'fab-close': fabClose,
    'fab-label-button': label
  }, colorClasses(props));
  let labelEl;

  if (label) {
    labelEl = /*#__PURE__*/React.createElement("span", {
      className: "fab-label"
    }, label);
  }

  return /*#__PURE__*/React.createElement("a", _extends({
    id: id,
    style: style,
    target: target,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), children, labelEl);
});
FabButton.displayName = 'f7-fab-button';
export default FabButton;