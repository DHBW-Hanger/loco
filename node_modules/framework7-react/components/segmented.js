function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';

const Segmented = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    raised,
    raisedIos,
    raisedMd,
    raisedAurora,
    round,
    roundIos,
    roundMd,
    roundAurora,
    strong,
    strongIos,
    strongMd,
    strongAurora,
    tag = 'div'
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, {
    segmented: true,
    'segmented-raised': raised,
    'segmented-raised-ios': raisedIos,
    'segmented-raised-aurora': raisedAurora,
    'segmented-raised-md': raisedMd,
    'segmented-round': round,
    'segmented-round-ios': roundIos,
    'segmented-round-aurora': roundAurora,
    'segmented-round-md': roundMd,
    'segmented-strong': strong,
    'segmented-strong-ios': strongIos,
    'segmented-strong-md': strongMd,
    'segmented-strong-aurora': strongAurora
  }, colorClasses(props));
  const SegmentedTag = tag;
  return /*#__PURE__*/React.createElement(SegmentedTag, _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, (strong || strongIos || strongMd || strongAurora) && /*#__PURE__*/React.createElement("span", {
    className: "segmented-highlight"
  }));
});
Segmented.displayName = 'f7-segmented';
export default Segmented;