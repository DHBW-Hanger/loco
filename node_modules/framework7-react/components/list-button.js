function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, isStringProp, emit } from '../shared/utils.js';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins.js';
import { useTooltip } from '../shared/use-tooltip.js';
import { useRouteProps } from '../shared/use-route-props.js';

const ListButton = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    title,
    text,
    tabLink,
    tabLinkActive,
    link,
    href,
    target
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  const linkElRef = useRef(null);

  const onClick = e => {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useTooltip(linkElRef, props);
  useRouteProps(linkElRef, props);
  const linkAttrs = {
    href: typeof link === 'boolean' && typeof href === 'boolean' ? '#' : link || href,
    target,
    'data-tab': isStringProp(tabLink) && tabLink,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  const linkClasses = classNames({
    'list-button': true,
    'tab-link': tabLink || tabLink === '',
    'tab-link-active': tabLinkActive,
    ...colorClasses(props),
    ...routerClasses(props),
    ...actionsClasses(props)
  });
  return /*#__PURE__*/React.createElement("li", _extends({
    id: id,
    style: style,
    className: className,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("a", _extends({
    className: linkClasses
  }, linkAttrs, {
    onClick: onClick,
    ref: linkElRef
  }), title, text, children));
});
ListButton.displayName = 'f7-list-button';
export default ListButton;