function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect.js';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';


const Tabs = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    animated,
    swipeable,
    routable,
    swiperParams
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useIsomorphicLayoutEffect(() => {
    if (!swipeable || !swiperParams) return;
    if (!elRef.current) return;
    elRef.current.f7SwiperParams = swiperParams;
  }, []);
  const classes = classNames(className, colorClasses(props));
  const wrapClasses = classNames({
    'tabs-animated-wrap': animated,
    'tabs-swipeable-wrap': swipeable
  });
  const tabsClasses = classNames({
    tabs: true,
    'tabs-routable': routable
  });

  if (animated || swipeable) {
    return /*#__PURE__*/React.createElement("div", _extends({
      id: id,
      style: style,
      className: classNames(wrapClasses, classes),
      ref: elRef
    }, extraAttrs), /*#__PURE__*/React.createElement("div", {
      className: tabsClasses
    }, children));
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classNames(tabsClasses, classes),
    ref: elRef
  }, extraAttrs), children);
});
Tabs.displayName = 'f7-tabs';
export default Tabs;