function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { f7 } from '../shared/f7.js';

const Progressbar = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    progress,
    infinite
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const set = (newProgress, speed) => {
    if (!f7) return;
    f7.progressbar.set(elRef.current, newProgress, speed);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current,
    set
  }));
  const transformStyle = {
    transform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : '',
    WebkitTransform: progress ? `translate3d(${-100 + progress}%, 0, 0)` : ''
  };
  const classes = classNames(className, 'progressbar', {
    'progressbar-infinite': infinite
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("span", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes,
    "data-progress": progress
  }, extraAttrs), /*#__PURE__*/React.createElement("span", {
    style: transformStyle
  }));
});
Progressbar.displayName = 'f7-progressbar';
export default Progressbar;