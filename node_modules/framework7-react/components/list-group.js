function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle, useContext } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { ListContext } from '../shared/list-context.js';

const ListGroup = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    simpleList,
    mediaList,
    sortable,
    sortableOpposite,
    sortableTapHold,
    sortableMoveElements
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const listContext = useContext(ListContext);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  const classes = classNames(className, 'list-group', {
    'media-list': mediaList,
    sortable,
    'sortable-tap-hold': sortableTapHold,
    'sortable-opposite': sortableOpposite
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    "data-sortable-move-elements": typeof sortableMoveElements !== 'undefined' ? sortableMoveElements.toString() : undefined,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement(ListContext.Provider, {
    value: {
      listIsMedia: mediaList || listContext.listIsMedia,
      listIsSimple: simpleList || listContext.listIsSimple,
      listIsSortable: sortable || listContext.listIsSortable,
      listIsSortableOpposite: sortableOpposite || listContext.listIsSortableOpposite
    }
  }, children)));
});
ListGroup.displayName = 'f7-list-group';
export default ListGroup;