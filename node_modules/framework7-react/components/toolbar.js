function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect.js';
import { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { useTheme } from '../shared/use-theme.js';
import { f7ready, f7 } from '../shared/f7.js';
import { TabbarContext } from '../shared/tabbar-context.js';

const Toolbar = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    tabbar,
    labels,
    scrollable,
    hidden,
    noShadow,
    noHairline,
    noBorder,
    position,
    topMd,
    topIos,
    topAurora,
    top,
    bottomMd,
    bottomIos,
    bottomAurora,
    bottom,
    inner = true
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onHide = toolbarEl => {
    if (elRef.current !== toolbarEl) return;
    emit(props, 'toolbarHide');
  };

  const onShow = toolbarEl => {
    if (elRef.current !== toolbarEl) return;
    emit(props, 'toolbarShow');
  };

  const hide = animate => {
    if (!f7) return;
    f7.toolbar.hide(elRef.current, animate);
  };

  const show = animate => {
    if (!f7) return;
    f7.toolbar.show(elRef.current, animate);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current,
    hide,
    show
  }));
  useIsomorphicLayoutEffect(() => {
    f7ready(() => {
      if (tabbar && f7 && elRef.current) {
        f7.toolbar.setHighlight(elRef.current);
      }

      f7.on('toolbarShow', onShow);
      f7.on('toolbarHide', onHide);
    });
    return () => {
      if (!f7) return;
      f7.off('toolbarShow', onShow);
      f7.off('toolbarHide', onHide);
    };
  });
  const theme = useTheme();
  const classes = classNames(className, 'toolbar', {
    tabbar,
    'toolbar-bottom': theme && theme.md && bottomMd || theme && theme.ios && bottomIos || theme && theme.aurora && bottomAurora || bottom || position === 'bottom',
    'toolbar-top': theme && theme.md && topMd || theme && theme.ios && topIos || theme && theme.aurora && topAurora || top || position === 'top',
    'tabbar-labels': labels,
    'tabbar-scrollable': scrollable,
    'toolbar-hidden': hidden,
    'no-shadow': noShadow,
    'no-hairline': noHairline || noBorder
  }, colorClasses(props));
  const slots = getSlots(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement(TabbarContext.Provider, {
    value: {
      tabbarHasLabels: labels
    }
  }, slots['before-inner'], inner ? /*#__PURE__*/React.createElement("div", {
    className: "toolbar-inner"
  }, slots.default) : slots.default, slots['after-inner']));
});
Toolbar.displayName = 'f7-toolbar';
export default Toolbar;