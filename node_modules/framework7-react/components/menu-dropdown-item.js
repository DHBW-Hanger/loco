function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, emit } from '../shared/utils.js';
import { colorClasses, routerAttrs, routerClasses, actionsAttrs, actionsClasses } from '../shared/mixins.js';
import { useRouteProps } from '../shared/use-route-props.js';

const MenuDropdownItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    link,
    href,
    target,
    text,
    divider,
    menuClose
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = e => {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useRouteProps(elRef, props);
  const isLink = link || href || href === '';
  const Tag = isLink ? 'a' : 'div';
  const classes = classNames({
    'menu-dropdown-link': isLink && !divider,
    'menu-dropdown-item': !isLink && !divider,
    'menu-dropdown-divider': divider
  }, className, colorClasses(props), routerClasses(props), actionsClasses(props), {
    'menu-close': typeof menuClose === 'undefined'
  });
  let hrefComputed = href;
  if (typeof hrefComputed === 'undefined' && link) hrefComputed = '#';
  const attrs = {
    href: hrefComputed,
    target,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return /*#__PURE__*/React.createElement(Tag, _extends({
    className: classes,
    id: id,
    style: style,
    ref: elRef
  }, attrs, extraAttrs, {
    onClick: onClick
  }), text, children);
});
MenuDropdownItem.displayName = 'f7-menu-dropdown-item';
export default MenuDropdownItem;