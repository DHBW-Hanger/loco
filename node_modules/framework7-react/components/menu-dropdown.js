function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';

const MenuDropdown = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    children,
    contentHeight,
    position,
    left,
    center,
    right
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  let positionComputed = position || 'left';
  if (left) positionComputed = 'left';
  if (center) positionComputed = 'center';
  if (right) positionComputed = 'right';
  const classes = classNames('menu-dropdown', `menu-dropdown-${positionComputed}`, colorClasses(props), className);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("div", {
    className: "menu-dropdown-content",
    style: {
      height: contentHeight
    }
  }, children));
});
MenuDropdown.displayName = 'f7-menu-dropdown';
export default MenuDropdown;