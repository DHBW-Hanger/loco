function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect.js';
import { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils.js';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins.js';
import { useIcon } from '../shared/use-icon.js';
import { f7ready, f7 } from '../shared/f7.js';

const TreeviewItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    id,
    style,
    toggle,
    itemToggle,
    selectable,
    selected,
    opened,
    label,
    loadChildren,
    link
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);

  const onClick = event => {
    emit(props, 'click', event);
  };

  const onOpen = el => {
    if (elRef.current !== el) return;
    emit(props, 'treeviewOpen', el);
  };

  const onClose = el => {
    if (elRef.current !== el) return;
    emit(props, 'treeviewClose', el);
  };

  const onLoadChildren = (el, done) => {
    if (elRef.current !== el) return;
    emit(props, 'treeviewLoadChildren', el, done);
  };

  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));

  const attachEvents = () => {
    if (!elRef.current) return;
    f7ready(() => {
      f7.on('treeviewOpen', onOpen);
      f7.on('treeviewClose', onClose);
      f7.on('treeviewLoadChildren', onLoadChildren);
    });
  };

  const detachEvents = () => {
    if (!f7) return;
    f7.off('treeviewOpen', onOpen);
    f7.off('treeviewClose', onClose);
    f7.off('treeviewLoadChildren', onLoadChildren);
  };

  useIsomorphicLayoutEffect(() => {
    attachEvents();
    return detachEvents;
  });
  const slots = getSlots(props);
  const hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;
  const needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;
  const iconEl = useIcon(props);
  const TreeviewRootTag = link || link === '' ? 'a' : 'div';
  const classes = classNames(className, 'treeview-item', {
    'treeview-item-opened': opened,
    'treeview-load-children': loadChildren
  }, colorClasses(props));
  const itemRootClasses = classNames('treeview-item-root', {
    'treeview-item-selectable': selectable,
    'treeview-item-selected': selected,
    'treeview-item-toggle': itemToggle
  }, routerClasses(props), actionsClasses(props));
  let href = link;
  if (link === true) href = '#';
  if (link === false) href = undefined; // no href attribute

  const itemRootAttrs = {
    href,
    ...routerAttrs(props),
    ...actionsAttrs(props)
  };
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement(TreeviewRootTag, _extends({
    onClick: onClick,
    className: itemRootClasses
  }, itemRootAttrs), slots['root-start'], needToggle && /*#__PURE__*/React.createElement("div", {
    className: "treeview-toggle"
  }), /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-content"
  }, slots['content-start'], iconEl, slots.media, /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-label"
  }, slots['label-start'], label, slots.label), slots.content, slots['content-end']), slots.root, slots['root-end']), hasChildren && /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-children"
  }, slots['children-start'], slots.default, slots.children));
});
TreeviewItem.displayName = 'f7-treeview-item';
export default TreeviewItem;